
reciver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ef8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080050bc  080050bc  000150bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050dc  080050dc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080050dc  080050dc  000150dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050e4  080050e4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050e4  080050e4  000150e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050e8  080050e8  000150e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080050ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000010  080050fc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  080050fc  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001366e  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002975  00000000  00000000  000336f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a0  00000000  00000000  00036068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000deb  00000000  00000000  00037208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000232fe  00000000  00000000  00037ff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001687e  00000000  00000000  0005b2f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc1fe  00000000  00000000  00071b6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004adc  00000000  00000000  0014dd70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0015284c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080050a4 	.word	0x080050a4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	080050a4 	.word	0x080050a4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_ADC_ConvCpltCallback>:
#include "ADC.h"
#include "stm32f4xx_hal.h"


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]

}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <HAL_TIM_PeriodElapsedCallback>:
extern UART_HandleTypeDef huart4;
extern uint32_t valores[2];
char selecionado =0;
extern uint8_t datos[5];
extern char flag;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ // completar
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	if (htim == &htim6){
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4a3a      	ldr	r2, [pc, #232]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d16d      	bne.n	8000600 <HAL_TIM_PeriodElapsedCallback+0xec>
		setPedal(valores[0]);
 8000524:	4b39      	ldr	r3, [pc, #228]	; (800060c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4618      	mov	r0, r3
 800052a:	f000 f879 	bl	8000620 <setPedal>
		setVolante(valores[1]);
 800052e:	4b37      	ldr	r3, [pc, #220]	; (800060c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	4618      	mov	r0, r3
 8000534:	f000 f8b2 	bl	800069c <setVolante>




		if (flag){
 8000538:	4b35      	ldr	r3, [pc, #212]	; (8000610 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d05c      	beq.n	80005fa <HAL_TIM_PeriodElapsedCallback+0xe6>
		switch(selecionado){
 8000540:	4b34      	ldr	r3, [pc, #208]	; (8000614 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b02      	cmp	r3, #2
 8000546:	d036      	beq.n	80005b6 <HAL_TIM_PeriodElapsedCallback+0xa2>
 8000548:	2b02      	cmp	r3, #2
 800054a:	dc4e      	bgt.n	80005ea <HAL_TIM_PeriodElapsedCallback+0xd6>
 800054c:	2b00      	cmp	r3, #0
 800054e:	d002      	beq.n	8000556 <HAL_TIM_PeriodElapsedCallback+0x42>
 8000550:	2b01      	cmp	r3, #1
 8000552:	d01a      	beq.n	800058a <HAL_TIM_PeriodElapsedCallback+0x76>
 8000554:	e049      	b.n	80005ea <HAL_TIM_PeriodElapsedCallback+0xd6>
		case 0:
			datos[0] = 0;
 8000556:	4b30      	ldr	r3, [pc, #192]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000558:	2200      	movs	r2, #0
 800055a:	701a      	strb	r2, [r3, #0]
			datos[1] = (getPedal() >> 8) ;
 800055c:	f000 f870 	bl	8000640 <getPedal>
 8000560:	4603      	mov	r3, r0
 8000562:	121b      	asrs	r3, r3, #8
 8000564:	b2da      	uxtb	r2, r3
 8000566:	4b2c      	ldr	r3, [pc, #176]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000568:	705a      	strb	r2, [r3, #1]
			datos[2] = getPedal() ;
 800056a:	f000 f869 	bl	8000640 <getPedal>
 800056e:	4603      	mov	r3, r0
 8000570:	b2da      	uxtb	r2, r3
 8000572:	4b29      	ldr	r3, [pc, #164]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000574:	709a      	strb	r2, [r3, #2]
			datos[3] = 'o';
 8000576:	4b28      	ldr	r3, [pc, #160]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000578:	226f      	movs	r2, #111	; 0x6f
 800057a:	70da      	strb	r2, [r3, #3]
			datos[4] = 'k';
 800057c:	4b26      	ldr	r3, [pc, #152]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800057e:	226b      	movs	r2, #107	; 0x6b
 8000580:	711a      	strb	r2, [r3, #4]
			selecionado = 1;
 8000582:	4b24      	ldr	r3, [pc, #144]	; (8000614 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000584:	2201      	movs	r2, #1
 8000586:	701a      	strb	r2, [r3, #0]
			break;
 8000588:	e02f      	b.n	80005ea <HAL_TIM_PeriodElapsedCallback+0xd6>
		case 1:
			datos[0] = 1;
 800058a:	4b23      	ldr	r3, [pc, #140]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800058c:	2201      	movs	r2, #1
 800058e:	701a      	strb	r2, [r3, #0]
			datos[1] = 0;
 8000590:	4b21      	ldr	r3, [pc, #132]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000592:	2200      	movs	r2, #0
 8000594:	705a      	strb	r2, [r3, #1]
			datos[2] =  getCambio();
 8000596:	f000 f891 	bl	80006bc <getCambio>
 800059a:	4603      	mov	r3, r0
 800059c:	461a      	mov	r2, r3
 800059e:	4b1e      	ldr	r3, [pc, #120]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80005a0:	709a      	strb	r2, [r3, #2]
			datos[3] = 'o';
 80005a2:	4b1d      	ldr	r3, [pc, #116]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80005a4:	226f      	movs	r2, #111	; 0x6f
 80005a6:	70da      	strb	r2, [r3, #3]
			datos[4] = 'k';
 80005a8:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80005aa:	226b      	movs	r2, #107	; 0x6b
 80005ac:	711a      	strb	r2, [r3, #4]
			selecionado = 2;
 80005ae:	4b19      	ldr	r3, [pc, #100]	; (8000614 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80005b0:	2202      	movs	r2, #2
 80005b2:	701a      	strb	r2, [r3, #0]
			break;
 80005b4:	e019      	b.n	80005ea <HAL_TIM_PeriodElapsedCallback+0xd6>
		case 2:
			datos[0] = 2;
 80005b6:	4b18      	ldr	r3, [pc, #96]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80005b8:	2202      	movs	r2, #2
 80005ba:	701a      	strb	r2, [r3, #0]
			datos[1] = (getAngulo() >> 8);
 80005bc:	f000 f862 	bl	8000684 <getAngulo>
 80005c0:	4603      	mov	r3, r0
 80005c2:	121b      	asrs	r3, r3, #8
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	4b14      	ldr	r3, [pc, #80]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80005c8:	705a      	strb	r2, [r3, #1]
			datos[2] =  getAngulo();
 80005ca:	f000 f85b 	bl	8000684 <getAngulo>
 80005ce:	4603      	mov	r3, r0
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80005d4:	709a      	strb	r2, [r3, #2]
			datos[3] = 'o';
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80005d8:	226f      	movs	r2, #111	; 0x6f
 80005da:	70da      	strb	r2, [r3, #3]
			datos[4] = 'k';
 80005dc:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80005de:	226b      	movs	r2, #107	; 0x6b
 80005e0:	711a      	strb	r2, [r3, #4]
			selecionado = 0;
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	701a      	strb	r2, [r3, #0]
			break;
 80005e8:	bf00      	nop
		}
		flag =0;
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart4, datos,5);
 80005f0:	2205      	movs	r2, #5
 80005f2:	4909      	ldr	r1, [pc, #36]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80005f4:	4809      	ldr	r0, [pc, #36]	; (800061c <HAL_TIM_PeriodElapsedCallback+0x108>)
 80005f6:	f003 fe28 	bl	800424a <HAL_UART_Transmit_IT>

		}
		HAL_TIM_Base_Start_IT(&htim6);
 80005fa:	4803      	ldr	r0, [pc, #12]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80005fc:	f003 f998 	bl	8003930 <HAL_TIM_Base_Start_IT>


	}


}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000184 	.word	0x20000184
 800060c:	2000025c 	.word	0x2000025c
 8000610:	20000000 	.word	0x20000000
 8000614:	2000002c 	.word	0x2000002c
 8000618:	20000254 	.word	0x20000254
 800061c:	200001cc 	.word	0x200001cc

08000620 <setPedal>:
int pedal =0;
int angulo =0;
int volante =0;
char cambio =0;

void setPedal(int valor){
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	pedal = valor;
 8000628:	4a04      	ldr	r2, [pc, #16]	; (800063c <setPedal+0x1c>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6013      	str	r3, [r2, #0]
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000030 	.word	0x20000030

08000640 <getPedal>:
int getPedal(){
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
	return pedal;
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <getPedal+0x14>)
 8000646:	681b      	ldr	r3, [r3, #0]
}
 8000648:	4618      	mov	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000030 	.word	0x20000030

08000658 <setAngulo>:



void setAngulo(int valor){
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	angulo = 239*valor + 796;
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	4613      	mov	r3, r2
 8000664:	011b      	lsls	r3, r3, #4
 8000666:	1a9b      	subs	r3, r3, r2
 8000668:	011b      	lsls	r3, r3, #4
 800066a:	1a9b      	subs	r3, r3, r2
 800066c:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8000670:	4a03      	ldr	r2, [pc, #12]	; (8000680 <setAngulo+0x28>)
 8000672:	6013      	str	r3, [r2, #0]
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	20000034 	.word	0x20000034

08000684 <getAngulo>:
int getAngulo(){
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
	return angulo;
 8000688:	4b03      	ldr	r3, [pc, #12]	; (8000698 <getAngulo+0x14>)
 800068a:	681b      	ldr	r3, [r3, #0]
}
 800068c:	4618      	mov	r0, r3
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	20000034 	.word	0x20000034

0800069c <setVolante>:



void setVolante(int valor){
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	volante = valor;
 80006a4:	4a04      	ldr	r2, [pc, #16]	; (80006b8 <setVolante+0x1c>)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	6013      	str	r3, [r2, #0]
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	20000038 	.word	0x20000038

080006bc <getCambio>:


void setCambio(int valor){
	cambio = valor;
}
char getCambio(){
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
	return cambio;
 80006c0:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <getCambio+0x14>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	2000003c 	.word	0x2000003c

080006d4 <HAL_UART_TxCpltCallback>:
/* USER CODE BEGIN 0 */
int adc_val ;
uint8_t datos[5] ;
uint32_t valores[2] = {0,0};
char flag =1;
void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart){
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	flag =1;
 80006dc:	4b04      	ldr	r3, [pc, #16]	; (80006f0 <HAL_UART_TxCpltCallback+0x1c>)
 80006de:	2201      	movs	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	20000000 	.word	0x20000000

080006f4 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	 setAngulo(__HAL_TIM_GET_COUNTER(htim));
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ffa8 	bl	8000658 <setAngulo>
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000714:	f000 fd16 	bl	8001144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000718:	f000 f826 	bl	8000768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071c:	f000 fa1e 	bl	8000b5c <MX_GPIO_Init>
  MX_DMA_Init();
 8000720:	f000 f9fc 	bl	8000b1c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000724:	f000 f9d0 	bl	8000ac8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000728:	f000 f91a 	bl	8000960 <MX_TIM2_Init>
  MX_UART4_Init();
 800072c:	f000 f9a2 	bl	8000a74 <MX_UART4_Init>
  MX_ADC1_Init();
 8000730:	f000 f888 	bl	8000844 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000734:	f000 f8e6 	bl	8000904 <MX_I2C1_Init>
  MX_TIM6_Init();
 8000738:	f000 f966 	bl	8000a08 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */


  HAL_ADC_Start_DMA(&hadc1, valores, 2);
 800073c:	2202      	movs	r2, #2
 800073e:	4906      	ldr	r1, [pc, #24]	; (8000758 <main+0x48>)
 8000740:	4806      	ldr	r0, [pc, #24]	; (800075c <main+0x4c>)
 8000742:	f000 fec5 	bl	80014d0 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim6); //timer para mandar datos
 8000746:	4806      	ldr	r0, [pc, #24]	; (8000760 <main+0x50>)
 8000748:	f003 f8f2 	bl	8003930 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 800074c:	213c      	movs	r1, #60	; 0x3c
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <main+0x54>)
 8000750:	f003 fa04 	bl	8003b5c <HAL_TIM_Encoder_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000754:	e7fe      	b.n	8000754 <main+0x44>
 8000756:	bf00      	nop
 8000758:	2000025c 	.word	0x2000025c
 800075c:	20000040 	.word	0x20000040
 8000760:	20000184 	.word	0x20000184
 8000764:	2000013c 	.word	0x2000013c

08000768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b094      	sub	sp, #80	; 0x50
 800076c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	2234      	movs	r2, #52	; 0x34
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f004 fc68 	bl	800504c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077c:	f107 0308 	add.w	r3, r7, #8
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800078c:	2300      	movs	r3, #0
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	4b2a      	ldr	r3, [pc, #168]	; (800083c <SystemClock_Config+0xd4>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000794:	4a29      	ldr	r2, [pc, #164]	; (800083c <SystemClock_Config+0xd4>)
 8000796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079a:	6413      	str	r3, [r2, #64]	; 0x40
 800079c:	4b27      	ldr	r3, [pc, #156]	; (800083c <SystemClock_Config+0xd4>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007a8:	2300      	movs	r3, #0
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	4b24      	ldr	r3, [pc, #144]	; (8000840 <SystemClock_Config+0xd8>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007b4:	4a22      	ldr	r2, [pc, #136]	; (8000840 <SystemClock_Config+0xd8>)
 80007b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ba:	6013      	str	r3, [r2, #0]
 80007bc:	4b20      	ldr	r3, [pc, #128]	; (8000840 <SystemClock_Config+0xd8>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c8:	2302      	movs	r3, #2
 80007ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007cc:	2301      	movs	r3, #1
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d0:	2310      	movs	r3, #16
 80007d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d4:	2302      	movs	r3, #2
 80007d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d8:	2300      	movs	r3, #0
 80007da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007dc:	2310      	movs	r3, #16
 80007de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007e0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007e6:	2304      	movs	r3, #4
 80007e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007ea:	2302      	movs	r3, #2
 80007ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 fdac 	bl	8003354 <HAL_RCC_OscConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000802:	f000 fa1b 	bl	8000c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000806:	230f      	movs	r3, #15
 8000808:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080a:	2302      	movs	r3, #2
 800080c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000816:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800081c:	f107 0308 	add.w	r3, r7, #8
 8000820:	2102      	movs	r1, #2
 8000822:	4618      	mov	r0, r3
 8000824:	f002 fa4c 	bl	8002cc0 <HAL_RCC_ClockConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800082e:	f000 fa05 	bl	8000c3c <Error_Handler>
  }
}
 8000832:	bf00      	nop
 8000834:	3750      	adds	r7, #80	; 0x50
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800
 8000840:	40007000 	.word	0x40007000

08000844 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800084a:	463b      	mov	r3, r7
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000856:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <MX_ADC1_Init+0xb4>)
 8000858:	4a28      	ldr	r2, [pc, #160]	; (80008fc <MX_ADC1_Init+0xb8>)
 800085a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800085c:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <MX_ADC1_Init+0xb4>)
 800085e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000862:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000864:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <MX_ADC1_Init+0xb4>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800086a:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <MX_ADC1_Init+0xb4>)
 800086c:	2201      	movs	r2, #1
 800086e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000870:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <MX_ADC1_Init+0xb4>)
 8000872:	2201      	movs	r2, #1
 8000874:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000876:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <MX_ADC1_Init+0xb4>)
 8000878:	2200      	movs	r2, #0
 800087a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800087e:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <MX_ADC1_Init+0xb4>)
 8000880:	2200      	movs	r2, #0
 8000882:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000884:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <MX_ADC1_Init+0xb4>)
 8000886:	4a1e      	ldr	r2, [pc, #120]	; (8000900 <MX_ADC1_Init+0xbc>)
 8000888:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800088a:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_ADC1_Init+0xb4>)
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000890:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <MX_ADC1_Init+0xb4>)
 8000892:	2202      	movs	r2, #2
 8000894:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_ADC1_Init+0xb4>)
 8000898:	2201      	movs	r2, #1
 800089a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800089e:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <MX_ADC1_Init+0xb4>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008a4:	4814      	ldr	r0, [pc, #80]	; (80008f8 <MX_ADC1_Init+0xb4>)
 80008a6:	f000 fcbf 	bl	8001228 <HAL_ADC_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008b0:	f000 f9c4 	bl	8000c3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80008b4:	2305      	movs	r3, #5
 80008b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008b8:	2301      	movs	r3, #1
 80008ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008bc:	2300      	movs	r3, #0
 80008be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008c0:	463b      	mov	r3, r7
 80008c2:	4619      	mov	r1, r3
 80008c4:	480c      	ldr	r0, [pc, #48]	; (80008f8 <MX_ADC1_Init+0xb4>)
 80008c6:	f000 ff31 	bl	800172c <HAL_ADC_ConfigChannel>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008d0:	f000 f9b4 	bl	8000c3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80008d4:	2306      	movs	r3, #6
 80008d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80008d8:	2302      	movs	r3, #2
 80008da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008dc:	463b      	mov	r3, r7
 80008de:	4619      	mov	r1, r3
 80008e0:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_ADC1_Init+0xb4>)
 80008e2:	f000 ff23 	bl	800172c <HAL_ADC_ConfigChannel>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80008ec:	f000 f9a6 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000040 	.word	0x20000040
 80008fc:	40012000 	.word	0x40012000
 8000900:	0f000001 	.word	0x0f000001

08000904 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_I2C1_Init+0x50>)
 800090a:	4a13      	ldr	r2, [pc, #76]	; (8000958 <MX_I2C1_Init+0x54>)
 800090c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_I2C1_Init+0x50>)
 8000910:	4a12      	ldr	r2, [pc, #72]	; (800095c <MX_I2C1_Init+0x58>)
 8000912:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_I2C1_Init+0x50>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_I2C1_Init+0x50>)
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_I2C1_Init+0x50>)
 8000922:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000926:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MX_I2C1_Init+0x50>)
 800092a:	2200      	movs	r2, #0
 800092c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_I2C1_Init+0x50>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000934:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MX_I2C1_Init+0x50>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_I2C1_Init+0x50>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_I2C1_Init+0x50>)
 8000942:	f002 f879 	bl	8002a38 <HAL_I2C_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800094c:	f000 f976 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200000e8 	.word	0x200000e8
 8000958:	40005400 	.word	0x40005400
 800095c:	000186a0 	.word	0x000186a0

08000960 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08c      	sub	sp, #48	; 0x30
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	2224      	movs	r2, #36	; 0x24
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f004 fb6c 	bl	800504c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800097c:	4b21      	ldr	r3, [pc, #132]	; (8000a04 <MX_TIM2_Init+0xa4>)
 800097e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000982:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000984:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <MX_TIM2_Init+0xa4>)
 8000986:	2200      	movs	r2, #0
 8000988:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098a:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <MX_TIM2_Init+0xa4>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000990:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <MX_TIM2_Init+0xa4>)
 8000992:	f04f 32ff 	mov.w	r2, #4294967295
 8000996:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000998:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <MX_TIM2_Init+0xa4>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099e:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <MX_TIM2_Init+0xa4>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80009a4:	2301      	movs	r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009a8:	2300      	movs	r3, #0
 80009aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009ac:	2301      	movs	r3, #1
 80009ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009b8:	2300      	movs	r3, #0
 80009ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009bc:	2301      	movs	r3, #1
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80009c8:	f107 030c 	add.w	r3, r7, #12
 80009cc:	4619      	mov	r1, r3
 80009ce:	480d      	ldr	r0, [pc, #52]	; (8000a04 <MX_TIM2_Init+0xa4>)
 80009d0:	f003 f81e 	bl	8003a10 <HAL_TIM_Encoder_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80009da:	f000 f92f 	bl	8000c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	4619      	mov	r1, r3
 80009ea:	4806      	ldr	r0, [pc, #24]	; (8000a04 <MX_TIM2_Init+0xa4>)
 80009ec:	f003 fb50 	bl	8004090 <HAL_TIMEx_MasterConfigSynchronization>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80009f6:	f000 f921 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	3730      	adds	r7, #48	; 0x30
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	2000013c 	.word	0x2000013c

08000a08 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0e:	463b      	mov	r3, r7
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MX_TIM6_Init+0x64>)
 8000a18:	4a15      	ldr	r2, [pc, #84]	; (8000a70 <MX_TIM6_Init+0x68>)
 8000a1a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8399;
 8000a1c:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <MX_TIM6_Init+0x64>)
 8000a1e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000a22:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_TIM6_Init+0x64>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <MX_TIM6_Init+0x64>)
 8000a2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a30:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <MX_TIM6_Init+0x64>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <MX_TIM6_Init+0x64>)
 8000a3a:	f002 ff29 	bl	8003890 <HAL_TIM_Base_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000a44:	f000 f8fa 	bl	8000c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a50:	463b      	mov	r3, r7
 8000a52:	4619      	mov	r1, r3
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_TIM6_Init+0x64>)
 8000a56:	f003 fb1b 	bl	8004090 <HAL_TIMEx_MasterConfigSynchronization>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000a60:	f000 f8ec 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000184 	.word	0x20000184
 8000a70:	40001000 	.word	0x40001000

08000a74 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <MX_UART4_Init+0x4c>)
 8000a7a:	4a12      	ldr	r2, [pc, #72]	; (8000ac4 <MX_UART4_Init+0x50>)
 8000a7c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <MX_UART4_Init+0x4c>)
 8000a80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a84:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <MX_UART4_Init+0x4c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <MX_UART4_Init+0x4c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <MX_UART4_Init+0x4c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a98:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <MX_UART4_Init+0x4c>)
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9e:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <MX_UART4_Init+0x4c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <MX_UART4_Init+0x4c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000aaa:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <MX_UART4_Init+0x4c>)
 8000aac:	f003 fb80 	bl	80041b0 <HAL_UART_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000ab6:	f000 f8c1 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	200001cc 	.word	0x200001cc
 8000ac4:	40004c00 	.word	0x40004c00

08000ac8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000ace:	4a12      	ldr	r2, [pc, #72]	; (8000b18 <MX_USART2_UART_Init+0x50>)
 8000ad0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000ad4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000aee:	220c      	movs	r2, #12
 8000af0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af2:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000afe:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000b00:	f003 fb56 	bl	80041b0 <HAL_UART_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b0a:	f000 f897 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000210 	.word	0x20000210
 8000b18:	40004400 	.word	0x40004400

08000b1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_DMA_Init+0x3c>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <MX_DMA_Init+0x3c>)
 8000b2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_DMA_Init+0x3c>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2100      	movs	r1, #0
 8000b42:	2038      	movs	r0, #56	; 0x38
 8000b44:	f001 f987 	bl	8001e56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b48:	2038      	movs	r0, #56	; 0x38
 8000b4a:	f001 f9a0 	bl	8001e8e <HAL_NVIC_EnableIRQ>

}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800

08000b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b2f      	ldr	r3, [pc, #188]	; (8000c34 <MX_GPIO_Init+0xd8>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a2e      	ldr	r2, [pc, #184]	; (8000c34 <MX_GPIO_Init+0xd8>)
 8000b7c:	f043 0304 	orr.w	r3, r3, #4
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b2c      	ldr	r3, [pc, #176]	; (8000c34 <MX_GPIO_Init+0xd8>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b28      	ldr	r3, [pc, #160]	; (8000c34 <MX_GPIO_Init+0xd8>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a27      	ldr	r2, [pc, #156]	; (8000c34 <MX_GPIO_Init+0xd8>)
 8000b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b25      	ldr	r3, [pc, #148]	; (8000c34 <MX_GPIO_Init+0xd8>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <MX_GPIO_Init+0xd8>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a20      	ldr	r2, [pc, #128]	; (8000c34 <MX_GPIO_Init+0xd8>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <MX_GPIO_Init+0xd8>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <MX_GPIO_Init+0xd8>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a19      	ldr	r2, [pc, #100]	; (8000c34 <MX_GPIO_Init+0xd8>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <MX_GPIO_Init+0xd8>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000be8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	480f      	ldr	r0, [pc, #60]	; (8000c38 <MX_GPIO_Init+0xdc>)
 8000bfa:	f001 fd65 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c04:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	4808      	ldr	r0, [pc, #32]	; (8000c38 <MX_GPIO_Init+0xdc>)
 8000c16:	f001 fd57 	bl	80026c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	2028      	movs	r0, #40	; 0x28
 8000c20:	f001 f919 	bl	8001e56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c24:	2028      	movs	r0, #40	; 0x28
 8000c26:	f001 f932 	bl	8001e8e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c2a:	bf00      	nop
 8000c2c:	3728      	adds	r7, #40	; 0x28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020400 	.word	0x40020400

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <Error_Handler+0x8>
	...

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	4a0f      	ldr	r2, [pc, #60]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5e:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	603b      	str	r3, [r7, #0]
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	4a08      	ldr	r2, [pc, #32]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c78:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c86:	2007      	movs	r0, #7
 8000c88:	f001 f8da 	bl	8001e40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40023800 	.word	0x40023800

08000c98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	; 0x28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a33      	ldr	r2, [pc, #204]	; (8000d84 <HAL_ADC_MspInit+0xec>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d15f      	bne.n	8000d7a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	4b32      	ldr	r3, [pc, #200]	; (8000d88 <HAL_ADC_MspInit+0xf0>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	4a31      	ldr	r2, [pc, #196]	; (8000d88 <HAL_ADC_MspInit+0xf0>)
 8000cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cca:	4b2f      	ldr	r3, [pc, #188]	; (8000d88 <HAL_ADC_MspInit+0xf0>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b2b      	ldr	r3, [pc, #172]	; (8000d88 <HAL_ADC_MspInit+0xf0>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a2a      	ldr	r2, [pc, #168]	; (8000d88 <HAL_ADC_MspInit+0xf0>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b28      	ldr	r3, [pc, #160]	; (8000d88 <HAL_ADC_MspInit+0xf0>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000cf2:	2360      	movs	r3, #96	; 0x60
 8000cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	4821      	ldr	r0, [pc, #132]	; (8000d8c <HAL_ADC_MspInit+0xf4>)
 8000d06:	f001 fcdf 	bl	80026c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000d0a:	4b21      	ldr	r3, [pc, #132]	; (8000d90 <HAL_ADC_MspInit+0xf8>)
 8000d0c:	4a21      	ldr	r2, [pc, #132]	; (8000d94 <HAL_ADC_MspInit+0xfc>)
 8000d0e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d10:	4b1f      	ldr	r3, [pc, #124]	; (8000d90 <HAL_ADC_MspInit+0xf8>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d16:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <HAL_ADC_MspInit+0xf8>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d1c:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <HAL_ADC_MspInit+0xf8>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d22:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <HAL_ADC_MspInit+0xf8>)
 8000d24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d28:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d2a:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <HAL_ADC_MspInit+0xf8>)
 8000d2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d30:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d32:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <HAL_ADC_MspInit+0xf8>)
 8000d34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d38:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <HAL_ADC_MspInit+0xf8>)
 8000d3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d40:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d42:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <HAL_ADC_MspInit+0xf8>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <HAL_ADC_MspInit+0xf8>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d4e:	4810      	ldr	r0, [pc, #64]	; (8000d90 <HAL_ADC_MspInit+0xf8>)
 8000d50:	f001 f8b8 	bl	8001ec4 <HAL_DMA_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000d5a:	f7ff ff6f 	bl	8000c3c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a0b      	ldr	r2, [pc, #44]	; (8000d90 <HAL_ADC_MspInit+0xf8>)
 8000d62:	639a      	str	r2, [r3, #56]	; 0x38
 8000d64:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <HAL_ADC_MspInit+0xf8>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2012      	movs	r0, #18
 8000d70:	f001 f871 	bl	8001e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000d74:	2012      	movs	r0, #18
 8000d76:	f001 f88a 	bl	8001e8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d7a:	bf00      	nop
 8000d7c:	3728      	adds	r7, #40	; 0x28
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40012000 	.word	0x40012000
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020000 	.word	0x40020000
 8000d90:	20000088 	.word	0x20000088
 8000d94:	40026410 	.word	0x40026410

08000d98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	; 0x28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a19      	ldr	r2, [pc, #100]	; (8000e1c <HAL_I2C_MspInit+0x84>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d12b      	bne.n	8000e12 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <HAL_I2C_MspInit+0x88>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a17      	ldr	r2, [pc, #92]	; (8000e20 <HAL_I2C_MspInit+0x88>)
 8000dc4:	f043 0302 	orr.w	r3, r3, #2
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <HAL_I2C_MspInit+0x88>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dd6:	23c0      	movs	r3, #192	; 0xc0
 8000dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dda:	2312      	movs	r3, #18
 8000ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de2:	2303      	movs	r3, #3
 8000de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000de6:	2304      	movs	r3, #4
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dea:	f107 0314 	add.w	r3, r7, #20
 8000dee:	4619      	mov	r1, r3
 8000df0:	480c      	ldr	r0, [pc, #48]	; (8000e24 <HAL_I2C_MspInit+0x8c>)
 8000df2:	f001 fc69 	bl	80026c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <HAL_I2C_MspInit+0x88>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	4a08      	ldr	r2, [pc, #32]	; (8000e20 <HAL_I2C_MspInit+0x88>)
 8000e00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_I2C_MspInit+0x88>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e12:	bf00      	nop
 8000e14:	3728      	adds	r7, #40	; 0x28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40005400 	.word	0x40005400
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020400 	.word	0x40020400

08000e28 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	; 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e48:	d12b      	bne.n	8000ea2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	4b17      	ldr	r3, [pc, #92]	; (8000eac <HAL_TIM_Encoder_MspInit+0x84>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	4a16      	ldr	r2, [pc, #88]	; (8000eac <HAL_TIM_Encoder_MspInit+0x84>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5a:	4b14      	ldr	r3, [pc, #80]	; (8000eac <HAL_TIM_Encoder_MspInit+0x84>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <HAL_TIM_Encoder_MspInit+0x84>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a0f      	ldr	r2, [pc, #60]	; (8000eac <HAL_TIM_Encoder_MspInit+0x84>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <HAL_TIM_Encoder_MspInit+0x84>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e82:	2303      	movs	r3, #3
 8000e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e92:	2301      	movs	r3, #1
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <HAL_TIM_Encoder_MspInit+0x88>)
 8000e9e:	f001 fc13 	bl	80026c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ea2:	bf00      	nop
 8000ea4:	3728      	adds	r7, #40	; 0x28
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40020000 	.word	0x40020000

08000eb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <HAL_TIM_Base_MspInit+0x48>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d115      	bne.n	8000ef2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <HAL_TIM_Base_MspInit+0x4c>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	4a0c      	ldr	r2, [pc, #48]	; (8000f00 <HAL_TIM_Base_MspInit+0x4c>)
 8000ed0:	f043 0310 	orr.w	r3, r3, #16
 8000ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <HAL_TIM_Base_MspInit+0x4c>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	f003 0310 	and.w	r3, r3, #16
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2036      	movs	r0, #54	; 0x36
 8000ee8:	f000 ffb5 	bl	8001e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000eec:	2036      	movs	r0, #54	; 0x36
 8000eee:	f000 ffce 	bl	8001e8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40001000 	.word	0x40001000
 8000f00:	40023800 	.word	0x40023800

08000f04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08c      	sub	sp, #48	; 0x30
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a36      	ldr	r2, [pc, #216]	; (8000ffc <HAL_UART_MspInit+0xf8>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d135      	bne.n	8000f92 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	61bb      	str	r3, [r7, #24]
 8000f2a:	4b35      	ldr	r3, [pc, #212]	; (8001000 <HAL_UART_MspInit+0xfc>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	4a34      	ldr	r2, [pc, #208]	; (8001000 <HAL_UART_MspInit+0xfc>)
 8000f30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f34:	6413      	str	r3, [r2, #64]	; 0x40
 8000f36:	4b32      	ldr	r3, [pc, #200]	; (8001000 <HAL_UART_MspInit+0xfc>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f3e:	61bb      	str	r3, [r7, #24]
 8000f40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	4b2e      	ldr	r3, [pc, #184]	; (8001000 <HAL_UART_MspInit+0xfc>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a2d      	ldr	r2, [pc, #180]	; (8001000 <HAL_UART_MspInit+0xfc>)
 8000f4c:	f043 0304 	orr.w	r3, r3, #4
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b2b      	ldr	r3, [pc, #172]	; (8001000 <HAL_UART_MspInit+0xfc>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0304 	and.w	r3, r3, #4
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f5e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	2302      	movs	r3, #2
 8000f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f70:	2308      	movs	r3, #8
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4822      	ldr	r0, [pc, #136]	; (8001004 <HAL_UART_MspInit+0x100>)
 8000f7c:	f001 fba4 	bl	80026c8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2100      	movs	r1, #0
 8000f84:	2034      	movs	r0, #52	; 0x34
 8000f86:	f000 ff66 	bl	8001e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000f8a:	2034      	movs	r0, #52	; 0x34
 8000f8c:	f000 ff7f 	bl	8001e8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f90:	e030      	b.n	8000ff4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a1c      	ldr	r2, [pc, #112]	; (8001008 <HAL_UART_MspInit+0x104>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d12b      	bne.n	8000ff4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	4b17      	ldr	r3, [pc, #92]	; (8001000 <HAL_UART_MspInit+0xfc>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	4a16      	ldr	r2, [pc, #88]	; (8001000 <HAL_UART_MspInit+0xfc>)
 8000fa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000faa:	6413      	str	r3, [r2, #64]	; 0x40
 8000fac:	4b14      	ldr	r3, [pc, #80]	; (8001000 <HAL_UART_MspInit+0xfc>)
 8000fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	4b10      	ldr	r3, [pc, #64]	; (8001000 <HAL_UART_MspInit+0xfc>)
 8000fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc0:	4a0f      	ldr	r2, [pc, #60]	; (8001000 <HAL_UART_MspInit+0xfc>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc8:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <HAL_UART_MspInit+0xfc>)
 8000fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fd4:	230c      	movs	r3, #12
 8000fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fe4:	2307      	movs	r3, #7
 8000fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe8:	f107 031c 	add.w	r3, r7, #28
 8000fec:	4619      	mov	r1, r3
 8000fee:	4807      	ldr	r0, [pc, #28]	; (800100c <HAL_UART_MspInit+0x108>)
 8000ff0:	f001 fb6a 	bl	80026c8 <HAL_GPIO_Init>
}
 8000ff4:	bf00      	nop
 8000ff6:	3730      	adds	r7, #48	; 0x30
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40004c00 	.word	0x40004c00
 8001000:	40023800 	.word	0x40023800
 8001004:	40020800 	.word	0x40020800
 8001008:	40004400 	.word	0x40004400
 800100c:	40020000 	.word	0x40020000

08001010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <NMI_Handler+0x4>

08001016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101a:	e7fe      	b.n	800101a <HardFault_Handler+0x4>

0800101c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <MemManage_Handler+0x4>

08001022 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <BusFault_Handler+0x4>

08001028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <UsageFault_Handler+0x4>

0800102e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800105c:	f000 f8c4 	bl	80011e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}

08001064 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <ADC_IRQHandler+0x10>)
 800106a:	f000 f920 	bl	80012ae <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000040 	.word	0x20000040

08001078 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800107c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001080:	f001 fcb6 	bl	80029f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001084:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001088:	f001 fcb2 	bl	80029f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}

08001090 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <UART4_IRQHandler+0x10>)
 8001096:	f003 f91d 	bl	80042d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200001cc 	.word	0x200001cc

080010a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <TIM6_DAC_IRQHandler+0x10>)
 80010aa:	f002 fe05 	bl	8003cb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000184 	.word	0x20000184

080010b8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <DMA2_Stream0_IRQHandler+0x10>)
 80010be:	f001 f899 	bl	80021f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000088 	.word	0x20000088

080010cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <SystemInit+0x20>)
 80010d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010d6:	4a05      	ldr	r2, [pc, #20]	; (80010ec <SystemInit+0x20>)
 80010d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001128 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010f4:	480d      	ldr	r0, [pc, #52]	; (800112c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010f6:	490e      	ldr	r1, [pc, #56]	; (8001130 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010f8:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010fc:	e002      	b.n	8001104 <LoopCopyDataInit>

080010fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001102:	3304      	adds	r3, #4

08001104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001108:	d3f9      	bcc.n	80010fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110a:	4a0b      	ldr	r2, [pc, #44]	; (8001138 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800110c:	4c0b      	ldr	r4, [pc, #44]	; (800113c <LoopFillZerobss+0x26>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001110:	e001      	b.n	8001116 <LoopFillZerobss>

08001112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001114:	3204      	adds	r2, #4

08001116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001118:	d3fb      	bcc.n	8001112 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800111a:	f7ff ffd7 	bl	80010cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800111e:	f003 ff9d 	bl	800505c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001122:	f7ff faf5 	bl	8000710 <main>
  bx  lr    
 8001126:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001128:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800112c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001130:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001134:	080050ec 	.word	0x080050ec
  ldr r2, =_sbss
 8001138:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800113c:	20000268 	.word	0x20000268

08001140 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001140:	e7fe      	b.n	8001140 <CAN1_RX0_IRQHandler>
	...

08001144 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001148:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <HAL_Init+0x40>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a0d      	ldr	r2, [pc, #52]	; (8001184 <HAL_Init+0x40>)
 800114e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001152:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001154:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <HAL_Init+0x40>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <HAL_Init+0x40>)
 800115a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800115e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <HAL_Init+0x40>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a07      	ldr	r2, [pc, #28]	; (8001184 <HAL_Init+0x40>)
 8001166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800116a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116c:	2003      	movs	r0, #3
 800116e:	f000 fe67 	bl	8001e40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001172:	2000      	movs	r0, #0
 8001174:	f000 f808 	bl	8001188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001178:	f7ff fd66 	bl	8000c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40023c00 	.word	0x40023c00

08001188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_InitTick+0x54>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_InitTick+0x58>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	4619      	mov	r1, r3
 800119a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119e:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 fe7f 	bl	8001eaa <HAL_SYSTICK_Config>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00e      	b.n	80011d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b0f      	cmp	r3, #15
 80011ba:	d80a      	bhi.n	80011d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011bc:	2200      	movs	r2, #0
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	f000 fe47 	bl	8001e56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c8:	4a06      	ldr	r2, [pc, #24]	; (80011e4 <HAL_InitTick+0x5c>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e000      	b.n	80011d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000004 	.word	0x20000004
 80011e0:	2000000c 	.word	0x2000000c
 80011e4:	20000008 	.word	0x20000008

080011e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_IncTick+0x20>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_IncTick+0x24>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	4a04      	ldr	r2, [pc, #16]	; (800120c <HAL_IncTick+0x24>)
 80011fa:	6013      	str	r3, [r2, #0]
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	2000000c 	.word	0x2000000c
 800120c:	20000264 	.word	0x20000264

08001210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return uwTick;
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <HAL_GetTick+0x14>)
 8001216:	681b      	ldr	r3, [r3, #0]
}
 8001218:	4618      	mov	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000264 	.word	0x20000264

08001228 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001230:	2300      	movs	r3, #0
 8001232:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e033      	b.n	80012a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	2b00      	cmp	r3, #0
 8001244:	d109      	bne.n	800125a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff fd26 	bl	8000c98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	f003 0310 	and.w	r3, r3, #16
 8001262:	2b00      	cmp	r3, #0
 8001264:	d118      	bne.n	8001298 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800126e:	f023 0302 	bic.w	r3, r3, #2
 8001272:	f043 0202 	orr.w	r2, r3, #2
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 fb88 	bl	8001990 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f023 0303 	bic.w	r3, r3, #3
 800128e:	f043 0201 	orr.w	r2, r3, #1
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	641a      	str	r2, [r3, #64]	; 0x40
 8001296:	e001      	b.n	800129c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b086      	sub	sp, #24
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	f003 0320 	and.w	r3, r3, #32
 80012dc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d049      	beq.n	8001378 <HAL_ADC_IRQHandler+0xca>
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d046      	beq.n	8001378 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f003 0310 	and.w	r3, r3, #16
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d105      	bne.n	8001302 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d12b      	bne.n	8001368 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001314:	2b00      	cmp	r3, #0
 8001316:	d127      	bne.n	8001368 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001322:	2b00      	cmp	r3, #0
 8001324:	d006      	beq.n	8001334 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001330:	2b00      	cmp	r3, #0
 8001332:	d119      	bne.n	8001368 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	685a      	ldr	r2, [r3, #4]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 0220 	bic.w	r2, r2, #32
 8001342:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d105      	bne.n	8001368 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	f043 0201 	orr.w	r2, r3, #1
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff f8c9 	bl	8000500 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f06f 0212 	mvn.w	r2, #18
 8001376:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001386:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d057      	beq.n	800143e <HAL_ADC_IRQHandler+0x190>
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d054      	beq.n	800143e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001398:	f003 0310 	and.w	r3, r3, #16
 800139c:	2b00      	cmp	r3, #0
 800139e:	d105      	bne.n	80013ac <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d139      	bne.n	800142e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d006      	beq.n	80013d6 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d12b      	bne.n	800142e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d124      	bne.n	800142e <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d11d      	bne.n	800142e <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d119      	bne.n	800142e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001408:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141e:	2b00      	cmp	r3, #0
 8001420:	d105      	bne.n	800142e <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f043 0201 	orr.w	r2, r3, #1
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f000 fc2c 	bl	8001c8c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f06f 020c 	mvn.w	r2, #12
 800143c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800144c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d017      	beq.n	8001484 <HAL_ADC_IRQHandler+0x1d6>
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d014      	beq.n	8001484 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	2b01      	cmp	r3, #1
 8001466:	d10d      	bne.n	8001484 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f000 f945 	bl	8001704 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f06f 0201 	mvn.w	r2, #1
 8001482:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 0320 	and.w	r3, r3, #32
 800148a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001492:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d015      	beq.n	80014c6 <HAL_ADC_IRQHandler+0x218>
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d012      	beq.n	80014c6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a4:	f043 0202 	orr.w	r2, r3, #2
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f06f 0220 	mvn.w	r2, #32
 80014b4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 f92e 	bl	8001718 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f06f 0220 	mvn.w	r2, #32
 80014c4:	601a      	str	r2, [r3, #0]
  }
}
 80014c6:	bf00      	nop
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80014dc:	2300      	movs	r3, #0
 80014de:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d101      	bne.n	80014ee <HAL_ADC_Start_DMA+0x1e>
 80014ea:	2302      	movs	r3, #2
 80014ec:	e0e9      	b.n	80016c2 <HAL_ADC_Start_DMA+0x1f2>
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2201      	movs	r2, #1
 80014f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	2b01      	cmp	r3, #1
 8001502:	d018      	beq.n	8001536 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f042 0201 	orr.w	r2, r2, #1
 8001512:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001514:	4b6d      	ldr	r3, [pc, #436]	; (80016cc <HAL_ADC_Start_DMA+0x1fc>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a6d      	ldr	r2, [pc, #436]	; (80016d0 <HAL_ADC_Start_DMA+0x200>)
 800151a:	fba2 2303 	umull	r2, r3, r2, r3
 800151e:	0c9a      	lsrs	r2, r3, #18
 8001520:	4613      	mov	r3, r2
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	4413      	add	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001528:	e002      	b.n	8001530 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	3b01      	subs	r3, #1
 800152e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f9      	bne.n	800152a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001544:	d107      	bne.n	8001556 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001554:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	2b01      	cmp	r3, #1
 8001562:	f040 80a1 	bne.w	80016a8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800156e:	f023 0301 	bic.w	r3, r3, #1
 8001572:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001584:	2b00      	cmp	r3, #0
 8001586:	d007      	beq.n	8001598 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001590:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015a4:	d106      	bne.n	80015b4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	f023 0206 	bic.w	r2, r3, #6
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	645a      	str	r2, [r3, #68]	; 0x44
 80015b2:	e002      	b.n	80015ba <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2200      	movs	r2, #0
 80015b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015c2:	4b44      	ldr	r3, [pc, #272]	; (80016d4 <HAL_ADC_Start_DMA+0x204>)
 80015c4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ca:	4a43      	ldr	r2, [pc, #268]	; (80016d8 <HAL_ADC_Start_DMA+0x208>)
 80015cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d2:	4a42      	ldr	r2, [pc, #264]	; (80016dc <HAL_ADC_Start_DMA+0x20c>)
 80015d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015da:	4a41      	ldr	r2, [pc, #260]	; (80016e0 <HAL_ADC_Start_DMA+0x210>)
 80015dc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80015e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	685a      	ldr	r2, [r3, #4]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80015f6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001606:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	334c      	adds	r3, #76	; 0x4c
 8001612:	4619      	mov	r1, r3
 8001614:	68ba      	ldr	r2, [r7, #8]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f000 fd02 	bl	8002020 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 031f 	and.w	r3, r3, #31
 8001624:	2b00      	cmp	r3, #0
 8001626:	d12a      	bne.n	800167e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a2d      	ldr	r2, [pc, #180]	; (80016e4 <HAL_ADC_Start_DMA+0x214>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d015      	beq.n	800165e <HAL_ADC_Start_DMA+0x18e>
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a2c      	ldr	r2, [pc, #176]	; (80016e8 <HAL_ADC_Start_DMA+0x218>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d105      	bne.n	8001648 <HAL_ADC_Start_DMA+0x178>
 800163c:	4b25      	ldr	r3, [pc, #148]	; (80016d4 <HAL_ADC_Start_DMA+0x204>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 031f 	and.w	r3, r3, #31
 8001644:	2b00      	cmp	r3, #0
 8001646:	d00a      	beq.n	800165e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a27      	ldr	r2, [pc, #156]	; (80016ec <HAL_ADC_Start_DMA+0x21c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d136      	bne.n	80016c0 <HAL_ADC_Start_DMA+0x1f0>
 8001652:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <HAL_ADC_Start_DMA+0x204>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f003 0310 	and.w	r3, r3, #16
 800165a:	2b00      	cmp	r3, #0
 800165c:	d130      	bne.n	80016c0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d129      	bne.n	80016c0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	e020      	b.n	80016c0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a18      	ldr	r2, [pc, #96]	; (80016e4 <HAL_ADC_Start_DMA+0x214>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d11b      	bne.n	80016c0 <HAL_ADC_Start_DMA+0x1f0>
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d114      	bne.n	80016c0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	e00b      	b.n	80016c0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	f043 0210 	orr.w	r2, r3, #16
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b8:	f043 0201 	orr.w	r2, r3, #1
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000004 	.word	0x20000004
 80016d0:	431bde83 	.word	0x431bde83
 80016d4:	40012300 	.word	0x40012300
 80016d8:	08001b89 	.word	0x08001b89
 80016dc:	08001c43 	.word	0x08001c43
 80016e0:	08001c5f 	.word	0x08001c5f
 80016e4:	40012000 	.word	0x40012000
 80016e8:	40012100 	.word	0x40012100
 80016ec:	40012200 	.word	0x40012200

080016f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001736:	2300      	movs	r3, #0
 8001738:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001740:	2b01      	cmp	r3, #1
 8001742:	d101      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x1c>
 8001744:	2302      	movs	r3, #2
 8001746:	e113      	b.n	8001970 <HAL_ADC_ConfigChannel+0x244>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b09      	cmp	r3, #9
 8001756:	d925      	bls.n	80017a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68d9      	ldr	r1, [r3, #12]
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	b29b      	uxth	r3, r3
 8001764:	461a      	mov	r2, r3
 8001766:	4613      	mov	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4413      	add	r3, r2
 800176c:	3b1e      	subs	r3, #30
 800176e:	2207      	movs	r2, #7
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43da      	mvns	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	400a      	ands	r2, r1
 800177c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68d9      	ldr	r1, [r3, #12]
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	b29b      	uxth	r3, r3
 800178e:	4618      	mov	r0, r3
 8001790:	4603      	mov	r3, r0
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	4403      	add	r3, r0
 8001796:	3b1e      	subs	r3, #30
 8001798:	409a      	lsls	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	e022      	b.n	80017ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6919      	ldr	r1, [r3, #16]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	461a      	mov	r2, r3
 80017b2:	4613      	mov	r3, r2
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	4413      	add	r3, r2
 80017b8:	2207      	movs	r2, #7
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43da      	mvns	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	400a      	ands	r2, r1
 80017c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6919      	ldr	r1, [r3, #16]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	4618      	mov	r0, r3
 80017da:	4603      	mov	r3, r0
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	4403      	add	r3, r0
 80017e0:	409a      	lsls	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b06      	cmp	r3, #6
 80017f0:	d824      	bhi.n	800183c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	3b05      	subs	r3, #5
 8001804:	221f      	movs	r2, #31
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43da      	mvns	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	400a      	ands	r2, r1
 8001812:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	b29b      	uxth	r3, r3
 8001820:	4618      	mov	r0, r3
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	3b05      	subs	r3, #5
 800182e:	fa00 f203 	lsl.w	r2, r0, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	635a      	str	r2, [r3, #52]	; 0x34
 800183a:	e04c      	b.n	80018d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b0c      	cmp	r3, #12
 8001842:	d824      	bhi.n	800188e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	3b23      	subs	r3, #35	; 0x23
 8001856:	221f      	movs	r2, #31
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43da      	mvns	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	400a      	ands	r2, r1
 8001864:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	b29b      	uxth	r3, r3
 8001872:	4618      	mov	r0, r3
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	3b23      	subs	r3, #35	; 0x23
 8001880:	fa00 f203 	lsl.w	r2, r0, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	631a      	str	r2, [r3, #48]	; 0x30
 800188c:	e023      	b.n	80018d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	3b41      	subs	r3, #65	; 0x41
 80018a0:	221f      	movs	r2, #31
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43da      	mvns	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	400a      	ands	r2, r1
 80018ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	4618      	mov	r0, r3
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	4613      	mov	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	3b41      	subs	r3, #65	; 0x41
 80018ca:	fa00 f203 	lsl.w	r2, r0, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018d6:	4b29      	ldr	r3, [pc, #164]	; (800197c <HAL_ADC_ConfigChannel+0x250>)
 80018d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a28      	ldr	r2, [pc, #160]	; (8001980 <HAL_ADC_ConfigChannel+0x254>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d10f      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x1d8>
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b12      	cmp	r3, #18
 80018ea:	d10b      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a1d      	ldr	r2, [pc, #116]	; (8001980 <HAL_ADC_ConfigChannel+0x254>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d12b      	bne.n	8001966 <HAL_ADC_ConfigChannel+0x23a>
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a1c      	ldr	r2, [pc, #112]	; (8001984 <HAL_ADC_ConfigChannel+0x258>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d003      	beq.n	8001920 <HAL_ADC_ConfigChannel+0x1f4>
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b11      	cmp	r3, #17
 800191e:	d122      	bne.n	8001966 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a11      	ldr	r2, [pc, #68]	; (8001984 <HAL_ADC_ConfigChannel+0x258>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d111      	bne.n	8001966 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001942:	4b11      	ldr	r3, [pc, #68]	; (8001988 <HAL_ADC_ConfigChannel+0x25c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a11      	ldr	r2, [pc, #68]	; (800198c <HAL_ADC_ConfigChannel+0x260>)
 8001948:	fba2 2303 	umull	r2, r3, r2, r3
 800194c:	0c9a      	lsrs	r2, r3, #18
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001958:	e002      	b.n	8001960 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	3b01      	subs	r3, #1
 800195e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f9      	bne.n	800195a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	40012300 	.word	0x40012300
 8001980:	40012000 	.word	0x40012000
 8001984:	10000012 	.word	0x10000012
 8001988:	20000004 	.word	0x20000004
 800198c:	431bde83 	.word	0x431bde83

08001990 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001998:	4b79      	ldr	r3, [pc, #484]	; (8001b80 <ADC_Init+0x1f0>)
 800199a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	431a      	orrs	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6859      	ldr	r1, [r3, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	021a      	lsls	r2, r3, #8
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80019e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6859      	ldr	r1, [r3, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6899      	ldr	r1, [r3, #8]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68da      	ldr	r2, [r3, #12]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a22:	4a58      	ldr	r2, [pc, #352]	; (8001b84 <ADC_Init+0x1f4>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d022      	beq.n	8001a6e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a36:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6899      	ldr	r1, [r3, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	430a      	orrs	r2, r1
 8001a48:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6899      	ldr	r1, [r3, #8]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	e00f      	b.n	8001a8e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a8c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0202 	bic.w	r2, r2, #2
 8001a9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6899      	ldr	r1, [r3, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	7e1b      	ldrb	r3, [r3, #24]
 8001aa8:	005a      	lsls	r2, r3, #1
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d01b      	beq.n	8001af4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001aca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ada:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6859      	ldr	r1, [r3, #4]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	035a      	lsls	r2, r3, #13
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	e007      	b.n	8001b04 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b02:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	051a      	lsls	r2, r3, #20
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6899      	ldr	r1, [r3, #8]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b46:	025a      	lsls	r2, r3, #9
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6899      	ldr	r1, [r3, #8]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	029a      	lsls	r2, r3, #10
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	609a      	str	r2, [r3, #8]
}
 8001b74:	bf00      	nop
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	40012300 	.word	0x40012300
 8001b84:	0f000001 	.word	0x0f000001

08001b88 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b94:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d13c      	bne.n	8001c1c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d12b      	bne.n	8001c14 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d127      	bne.n	8001c14 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d006      	beq.n	8001be0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d119      	bne.n	8001c14 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 0220 	bic.w	r2, r2, #32
 8001bee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d105      	bne.n	8001c14 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	f043 0201 	orr.w	r2, r3, #1
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f7fe fc73 	bl	8000500 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001c1a:	e00e      	b.n	8001c3a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	f003 0310 	and.w	r3, r3, #16
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f7ff fd75 	bl	8001718 <HAL_ADC_ErrorCallback>
}
 8001c2e:	e004      	b.n	8001c3a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	4798      	blx	r3
}
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b084      	sub	sp, #16
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c4e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f7ff fd4d 	bl	80016f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c56:	bf00      	nop
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b084      	sub	sp, #16
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2240      	movs	r2, #64	; 0x40
 8001c70:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	f043 0204 	orr.w	r2, r3, #4
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f7ff fd4a 	bl	8001718 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c84:	bf00      	nop
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd2:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	60d3      	str	r3, [r2, #12]
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cec:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <__NVIC_GetPriorityGrouping+0x18>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	f003 0307 	and.w	r3, r3, #7
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	db0b      	blt.n	8001d2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	f003 021f 	and.w	r2, r3, #31
 8001d1c:	4907      	ldr	r1, [pc, #28]	; (8001d3c <__NVIC_EnableIRQ+0x38>)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	095b      	lsrs	r3, r3, #5
 8001d24:	2001      	movs	r0, #1
 8001d26:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000e100 	.word	0xe000e100

08001d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	6039      	str	r1, [r7, #0]
 8001d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	db0a      	blt.n	8001d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	490c      	ldr	r1, [pc, #48]	; (8001d8c <__NVIC_SetPriority+0x4c>)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	0112      	lsls	r2, r2, #4
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	440b      	add	r3, r1
 8001d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d68:	e00a      	b.n	8001d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	4908      	ldr	r1, [pc, #32]	; (8001d90 <__NVIC_SetPriority+0x50>)
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	3b04      	subs	r3, #4
 8001d78:	0112      	lsls	r2, r2, #4
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	761a      	strb	r2, [r3, #24]
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000e100 	.word	0xe000e100
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b089      	sub	sp, #36	; 0x24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f1c3 0307 	rsb	r3, r3, #7
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	bf28      	it	cs
 8001db2:	2304      	movcs	r3, #4
 8001db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3304      	adds	r3, #4
 8001dba:	2b06      	cmp	r3, #6
 8001dbc:	d902      	bls.n	8001dc4 <NVIC_EncodePriority+0x30>
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3b03      	subs	r3, #3
 8001dc2:	e000      	b.n	8001dc6 <NVIC_EncodePriority+0x32>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	401a      	ands	r2, r3
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
 8001de6:	43d9      	mvns	r1, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	4313      	orrs	r3, r2
         );
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3724      	adds	r7, #36	; 0x24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
	...

08001dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e0c:	d301      	bcc.n	8001e12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e00f      	b.n	8001e32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e12:	4a0a      	ldr	r2, [pc, #40]	; (8001e3c <SysTick_Config+0x40>)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e1a:	210f      	movs	r1, #15
 8001e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e20:	f7ff ff8e 	bl	8001d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <SysTick_Config+0x40>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2a:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <SysTick_Config+0x40>)
 8001e2c:	2207      	movs	r2, #7
 8001e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	e000e010 	.word	0xe000e010

08001e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff ff29 	bl	8001ca0 <__NVIC_SetPriorityGrouping>
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b086      	sub	sp, #24
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	607a      	str	r2, [r7, #4]
 8001e62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e68:	f7ff ff3e 	bl	8001ce8 <__NVIC_GetPriorityGrouping>
 8001e6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	6978      	ldr	r0, [r7, #20]
 8001e74:	f7ff ff8e 	bl	8001d94 <NVIC_EncodePriority>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e7e:	4611      	mov	r1, r2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff ff5d 	bl	8001d40 <__NVIC_SetPriority>
}
 8001e86:	bf00      	nop
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	4603      	mov	r3, r0
 8001e96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ff31 	bl	8001d04 <__NVIC_EnableIRQ>
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff ffa2 	bl	8001dfc <SysTick_Config>
 8001eb8:	4603      	mov	r3, r0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ed0:	f7ff f99e 	bl	8001210 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e099      	b.n	8002014 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0201 	bic.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f00:	e00f      	b.n	8001f22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f02:	f7ff f985 	bl	8001210 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b05      	cmp	r3, #5
 8001f0e:	d908      	bls.n	8001f22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2220      	movs	r2, #32
 8001f14:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2203      	movs	r2, #3
 8001f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e078      	b.n	8002014 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1e8      	bne.n	8001f02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	4b38      	ldr	r3, [pc, #224]	; (800201c <HAL_DMA_Init+0x158>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d107      	bne.n	8001f8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f84:	4313      	orrs	r3, r2
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f023 0307 	bic.w	r3, r3, #7
 8001fa2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d117      	bne.n	8001fe6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00e      	beq.n	8001fe6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 fb01 	bl	80025d0 <DMA_CheckFifoParam>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d008      	beq.n	8001fe6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2240      	movs	r2, #64	; 0x40
 8001fd8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e016      	b.n	8002014 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 fab8 	bl	8002564 <DMA_CalcBaseAndBitshift>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffc:	223f      	movs	r2, #63	; 0x3f
 8001ffe:	409a      	lsls	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	f010803f 	.word	0xf010803f

08002020 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002036:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800203e:	2b01      	cmp	r3, #1
 8002040:	d101      	bne.n	8002046 <HAL_DMA_Start_IT+0x26>
 8002042:	2302      	movs	r3, #2
 8002044:	e040      	b.n	80020c8 <HAL_DMA_Start_IT+0xa8>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b01      	cmp	r3, #1
 8002058:	d12f      	bne.n	80020ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2202      	movs	r2, #2
 800205e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f000 fa4a 	bl	8002508 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002078:	223f      	movs	r2, #63	; 0x3f
 800207a:	409a      	lsls	r2, r3
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0216 	orr.w	r2, r2, #22
 800208e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	2b00      	cmp	r3, #0
 8002096:	d007      	beq.n	80020a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0208 	orr.w	r2, r2, #8
 80020a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 0201 	orr.w	r2, r2, #1
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	e005      	b.n	80020c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80020c2:	2302      	movs	r3, #2
 80020c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80020c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020de:	f7ff f897 	bl	8001210 <HAL_GetTick>
 80020e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d008      	beq.n	8002102 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2280      	movs	r2, #128	; 0x80
 80020f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e052      	b.n	80021a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0216 	bic.w	r2, r2, #22
 8002110:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695a      	ldr	r2, [r3, #20]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002120:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	2b00      	cmp	r3, #0
 8002128:	d103      	bne.n	8002132 <HAL_DMA_Abort+0x62>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800212e:	2b00      	cmp	r3, #0
 8002130:	d007      	beq.n	8002142 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0208 	bic.w	r2, r2, #8
 8002140:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0201 	bic.w	r2, r2, #1
 8002150:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002152:	e013      	b.n	800217c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002154:	f7ff f85c 	bl	8001210 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b05      	cmp	r3, #5
 8002160:	d90c      	bls.n	800217c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2220      	movs	r2, #32
 8002166:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2203      	movs	r2, #3
 800216c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e015      	b.n	80021a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1e4      	bne.n	8002154 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218e:	223f      	movs	r2, #63	; 0x3f
 8002190:	409a      	lsls	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d004      	beq.n	80021ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2280      	movs	r2, #128	; 0x80
 80021c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e00c      	b.n	80021e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2205      	movs	r2, #5
 80021d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0201 	bic.w	r2, r2, #1
 80021e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002200:	4b8e      	ldr	r3, [pc, #568]	; (800243c <HAL_DMA_IRQHandler+0x248>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a8e      	ldr	r2, [pc, #568]	; (8002440 <HAL_DMA_IRQHandler+0x24c>)
 8002206:	fba2 2303 	umull	r2, r3, r2, r3
 800220a:	0a9b      	lsrs	r3, r3, #10
 800220c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002212:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221e:	2208      	movs	r2, #8
 8002220:	409a      	lsls	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4013      	ands	r3, r2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d01a      	beq.n	8002260 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d013      	beq.n	8002260 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0204 	bic.w	r2, r2, #4
 8002246:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224c:	2208      	movs	r2, #8
 800224e:	409a      	lsls	r2, r3
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002258:	f043 0201 	orr.w	r2, r3, #1
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002264:	2201      	movs	r2, #1
 8002266:	409a      	lsls	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4013      	ands	r3, r2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d012      	beq.n	8002296 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00b      	beq.n	8002296 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002282:	2201      	movs	r2, #1
 8002284:	409a      	lsls	r2, r3
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228e:	f043 0202 	orr.w	r2, r3, #2
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229a:	2204      	movs	r2, #4
 800229c:	409a      	lsls	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	4013      	ands	r3, r2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d012      	beq.n	80022cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00b      	beq.n	80022cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b8:	2204      	movs	r2, #4
 80022ba:	409a      	lsls	r2, r3
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c4:	f043 0204 	orr.w	r2, r3, #4
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d0:	2210      	movs	r2, #16
 80022d2:	409a      	lsls	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d043      	beq.n	8002364 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d03c      	beq.n	8002364 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ee:	2210      	movs	r2, #16
 80022f0:	409a      	lsls	r2, r3
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d018      	beq.n	8002336 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d108      	bne.n	8002324 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	2b00      	cmp	r3, #0
 8002318:	d024      	beq.n	8002364 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	4798      	blx	r3
 8002322:	e01f      	b.n	8002364 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002328:	2b00      	cmp	r3, #0
 800232a:	d01b      	beq.n	8002364 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	4798      	blx	r3
 8002334:	e016      	b.n	8002364 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002340:	2b00      	cmp	r3, #0
 8002342:	d107      	bne.n	8002354 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0208 	bic.w	r2, r2, #8
 8002352:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002368:	2220      	movs	r2, #32
 800236a:	409a      	lsls	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4013      	ands	r3, r2
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 808f 	beq.w	8002494 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0310 	and.w	r3, r3, #16
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 8087 	beq.w	8002494 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238a:	2220      	movs	r2, #32
 800238c:	409a      	lsls	r2, r3
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b05      	cmp	r3, #5
 800239c:	d136      	bne.n	800240c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0216 	bic.w	r2, r2, #22
 80023ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695a      	ldr	r2, [r3, #20]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d103      	bne.n	80023ce <HAL_DMA_IRQHandler+0x1da>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d007      	beq.n	80023de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 0208 	bic.w	r2, r2, #8
 80023dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e2:	223f      	movs	r2, #63	; 0x3f
 80023e4:	409a      	lsls	r2, r3
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d07e      	beq.n	8002500 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	4798      	blx	r3
        }
        return;
 800240a:	e079      	b.n	8002500 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d01d      	beq.n	8002456 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10d      	bne.n	8002444 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242c:	2b00      	cmp	r3, #0
 800242e:	d031      	beq.n	8002494 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	4798      	blx	r3
 8002438:	e02c      	b.n	8002494 <HAL_DMA_IRQHandler+0x2a0>
 800243a:	bf00      	nop
 800243c:	20000004 	.word	0x20000004
 8002440:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002448:	2b00      	cmp	r3, #0
 800244a:	d023      	beq.n	8002494 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	4798      	blx	r3
 8002454:	e01e      	b.n	8002494 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10f      	bne.n	8002484 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0210 	bic.w	r2, r2, #16
 8002472:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002498:	2b00      	cmp	r3, #0
 800249a:	d032      	beq.n	8002502 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d022      	beq.n	80024ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2205      	movs	r2, #5
 80024ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0201 	bic.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	3301      	adds	r3, #1
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d307      	bcc.n	80024dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f2      	bne.n	80024c0 <HAL_DMA_IRQHandler+0x2cc>
 80024da:	e000      	b.n	80024de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d005      	beq.n	8002502 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	4798      	blx	r3
 80024fe:	e000      	b.n	8002502 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002500:	bf00      	nop
    }
  }
}
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
 8002514:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002524:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2b40      	cmp	r3, #64	; 0x40
 8002534:	d108      	bne.n	8002548 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002546:	e007      	b.n	8002558 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	60da      	str	r2, [r3, #12]
}
 8002558:	bf00      	nop
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	3b10      	subs	r3, #16
 8002574:	4a14      	ldr	r2, [pc, #80]	; (80025c8 <DMA_CalcBaseAndBitshift+0x64>)
 8002576:	fba2 2303 	umull	r2, r3, r2, r3
 800257a:	091b      	lsrs	r3, r3, #4
 800257c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800257e:	4a13      	ldr	r2, [pc, #76]	; (80025cc <DMA_CalcBaseAndBitshift+0x68>)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4413      	add	r3, r2
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b03      	cmp	r3, #3
 8002590:	d909      	bls.n	80025a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800259a:	f023 0303 	bic.w	r3, r3, #3
 800259e:	1d1a      	adds	r2, r3, #4
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	659a      	str	r2, [r3, #88]	; 0x58
 80025a4:	e007      	b.n	80025b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025ae:	f023 0303 	bic.w	r3, r3, #3
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	aaaaaaab 	.word	0xaaaaaaab
 80025cc:	080050d4 	.word	0x080050d4

080025d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d11f      	bne.n	800262a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d856      	bhi.n	800269e <DMA_CheckFifoParam+0xce>
 80025f0:	a201      	add	r2, pc, #4	; (adr r2, 80025f8 <DMA_CheckFifoParam+0x28>)
 80025f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f6:	bf00      	nop
 80025f8:	08002609 	.word	0x08002609
 80025fc:	0800261b 	.word	0x0800261b
 8002600:	08002609 	.word	0x08002609
 8002604:	0800269f 	.word	0x0800269f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d046      	beq.n	80026a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002618:	e043      	b.n	80026a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002622:	d140      	bne.n	80026a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002628:	e03d      	b.n	80026a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002632:	d121      	bne.n	8002678 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b03      	cmp	r3, #3
 8002638:	d837      	bhi.n	80026aa <DMA_CheckFifoParam+0xda>
 800263a:	a201      	add	r2, pc, #4	; (adr r2, 8002640 <DMA_CheckFifoParam+0x70>)
 800263c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002640:	08002651 	.word	0x08002651
 8002644:	08002657 	.word	0x08002657
 8002648:	08002651 	.word	0x08002651
 800264c:	08002669 	.word	0x08002669
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	73fb      	strb	r3, [r7, #15]
      break;
 8002654:	e030      	b.n	80026b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d025      	beq.n	80026ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002666:	e022      	b.n	80026ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002670:	d11f      	bne.n	80026b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002676:	e01c      	b.n	80026b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d903      	bls.n	8002686 <DMA_CheckFifoParam+0xb6>
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2b03      	cmp	r3, #3
 8002682:	d003      	beq.n	800268c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002684:	e018      	b.n	80026b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	73fb      	strb	r3, [r7, #15]
      break;
 800268a:	e015      	b.n	80026b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002690:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00e      	beq.n	80026b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	73fb      	strb	r3, [r7, #15]
      break;
 800269c:	e00b      	b.n	80026b6 <DMA_CheckFifoParam+0xe6>
      break;
 800269e:	bf00      	nop
 80026a0:	e00a      	b.n	80026b8 <DMA_CheckFifoParam+0xe8>
      break;
 80026a2:	bf00      	nop
 80026a4:	e008      	b.n	80026b8 <DMA_CheckFifoParam+0xe8>
      break;
 80026a6:	bf00      	nop
 80026a8:	e006      	b.n	80026b8 <DMA_CheckFifoParam+0xe8>
      break;
 80026aa:	bf00      	nop
 80026ac:	e004      	b.n	80026b8 <DMA_CheckFifoParam+0xe8>
      break;
 80026ae:	bf00      	nop
 80026b0:	e002      	b.n	80026b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80026b2:	bf00      	nop
 80026b4:	e000      	b.n	80026b8 <DMA_CheckFifoParam+0xe8>
      break;
 80026b6:	bf00      	nop
    }
  } 
  
  return status; 
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop

080026c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b089      	sub	sp, #36	; 0x24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026da:	2300      	movs	r3, #0
 80026dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	e165      	b.n	80029b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026e4:	2201      	movs	r2, #1
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	4013      	ands	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	f040 8154 	bne.w	80029aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	2b01      	cmp	r3, #1
 800270c:	d005      	beq.n	800271a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002716:	2b02      	cmp	r3, #2
 8002718:	d130      	bne.n	800277c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	2203      	movs	r2, #3
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002750:	2201      	movs	r2, #1
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	091b      	lsrs	r3, r3, #4
 8002766:	f003 0201 	and.w	r2, r3, #1
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	2b03      	cmp	r3, #3
 8002786:	d017      	beq.n	80027b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	2203      	movs	r2, #3
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d123      	bne.n	800280c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	08da      	lsrs	r2, r3, #3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3208      	adds	r2, #8
 80027cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	220f      	movs	r2, #15
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	08da      	lsrs	r2, r3, #3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3208      	adds	r2, #8
 8002806:	69b9      	ldr	r1, [r7, #24]
 8002808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	2203      	movs	r2, #3
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	43db      	mvns	r3, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4013      	ands	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0203 	and.w	r2, r3, #3
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4313      	orrs	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 80ae 	beq.w	80029aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	4b5d      	ldr	r3, [pc, #372]	; (80029c8 <HAL_GPIO_Init+0x300>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	4a5c      	ldr	r2, [pc, #368]	; (80029c8 <HAL_GPIO_Init+0x300>)
 8002858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800285c:	6453      	str	r3, [r2, #68]	; 0x44
 800285e:	4b5a      	ldr	r3, [pc, #360]	; (80029c8 <HAL_GPIO_Init+0x300>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800286a:	4a58      	ldr	r2, [pc, #352]	; (80029cc <HAL_GPIO_Init+0x304>)
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	089b      	lsrs	r3, r3, #2
 8002870:	3302      	adds	r3, #2
 8002872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	220f      	movs	r2, #15
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43db      	mvns	r3, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4013      	ands	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a4f      	ldr	r2, [pc, #316]	; (80029d0 <HAL_GPIO_Init+0x308>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d025      	beq.n	80028e2 <HAL_GPIO_Init+0x21a>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a4e      	ldr	r2, [pc, #312]	; (80029d4 <HAL_GPIO_Init+0x30c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d01f      	beq.n	80028de <HAL_GPIO_Init+0x216>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a4d      	ldr	r2, [pc, #308]	; (80029d8 <HAL_GPIO_Init+0x310>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d019      	beq.n	80028da <HAL_GPIO_Init+0x212>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a4c      	ldr	r2, [pc, #304]	; (80029dc <HAL_GPIO_Init+0x314>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d013      	beq.n	80028d6 <HAL_GPIO_Init+0x20e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a4b      	ldr	r2, [pc, #300]	; (80029e0 <HAL_GPIO_Init+0x318>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d00d      	beq.n	80028d2 <HAL_GPIO_Init+0x20a>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a4a      	ldr	r2, [pc, #296]	; (80029e4 <HAL_GPIO_Init+0x31c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d007      	beq.n	80028ce <HAL_GPIO_Init+0x206>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a49      	ldr	r2, [pc, #292]	; (80029e8 <HAL_GPIO_Init+0x320>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d101      	bne.n	80028ca <HAL_GPIO_Init+0x202>
 80028c6:	2306      	movs	r3, #6
 80028c8:	e00c      	b.n	80028e4 <HAL_GPIO_Init+0x21c>
 80028ca:	2307      	movs	r3, #7
 80028cc:	e00a      	b.n	80028e4 <HAL_GPIO_Init+0x21c>
 80028ce:	2305      	movs	r3, #5
 80028d0:	e008      	b.n	80028e4 <HAL_GPIO_Init+0x21c>
 80028d2:	2304      	movs	r3, #4
 80028d4:	e006      	b.n	80028e4 <HAL_GPIO_Init+0x21c>
 80028d6:	2303      	movs	r3, #3
 80028d8:	e004      	b.n	80028e4 <HAL_GPIO_Init+0x21c>
 80028da:	2302      	movs	r3, #2
 80028dc:	e002      	b.n	80028e4 <HAL_GPIO_Init+0x21c>
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <HAL_GPIO_Init+0x21c>
 80028e2:	2300      	movs	r3, #0
 80028e4:	69fa      	ldr	r2, [r7, #28]
 80028e6:	f002 0203 	and.w	r2, r2, #3
 80028ea:	0092      	lsls	r2, r2, #2
 80028ec:	4093      	lsls	r3, r2
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028f4:	4935      	ldr	r1, [pc, #212]	; (80029cc <HAL_GPIO_Init+0x304>)
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	089b      	lsrs	r3, r3, #2
 80028fa:	3302      	adds	r3, #2
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002902:	4b3a      	ldr	r3, [pc, #232]	; (80029ec <HAL_GPIO_Init+0x324>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	43db      	mvns	r3, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4013      	ands	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002926:	4a31      	ldr	r2, [pc, #196]	; (80029ec <HAL_GPIO_Init+0x324>)
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800292c:	4b2f      	ldr	r3, [pc, #188]	; (80029ec <HAL_GPIO_Init+0x324>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	43db      	mvns	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002950:	4a26      	ldr	r2, [pc, #152]	; (80029ec <HAL_GPIO_Init+0x324>)
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002956:	4b25      	ldr	r3, [pc, #148]	; (80029ec <HAL_GPIO_Init+0x324>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	43db      	mvns	r3, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4013      	ands	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	4313      	orrs	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800297a:	4a1c      	ldr	r2, [pc, #112]	; (80029ec <HAL_GPIO_Init+0x324>)
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002980:	4b1a      	ldr	r3, [pc, #104]	; (80029ec <HAL_GPIO_Init+0x324>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	43db      	mvns	r3, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4013      	ands	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029a4:	4a11      	ldr	r2, [pc, #68]	; (80029ec <HAL_GPIO_Init+0x324>)
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	3301      	adds	r3, #1
 80029ae:	61fb      	str	r3, [r7, #28]
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	2b0f      	cmp	r3, #15
 80029b4:	f67f ae96 	bls.w	80026e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029b8:	bf00      	nop
 80029ba:	bf00      	nop
 80029bc:	3724      	adds	r7, #36	; 0x24
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40023800 	.word	0x40023800
 80029cc:	40013800 	.word	0x40013800
 80029d0:	40020000 	.word	0x40020000
 80029d4:	40020400 	.word	0x40020400
 80029d8:	40020800 	.word	0x40020800
 80029dc:	40020c00 	.word	0x40020c00
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40021400 	.word	0x40021400
 80029e8:	40021800 	.word	0x40021800
 80029ec:	40013c00 	.word	0x40013c00

080029f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80029fa:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029fc:	695a      	ldr	r2, [r3, #20]
 80029fe:	88fb      	ldrh	r3, [r7, #6]
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d006      	beq.n	8002a14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a06:	4a05      	ldr	r2, [pc, #20]	; (8002a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a08:	88fb      	ldrh	r3, [r7, #6]
 8002a0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a0c:	88fb      	ldrh	r3, [r7, #6]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 f806 	bl	8002a20 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a14:	bf00      	nop
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40013c00 	.word	0x40013c00

08002a20 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
	...

08002a38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e12b      	b.n	8002ca2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d106      	bne.n	8002a64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7fe f99a 	bl	8000d98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2224      	movs	r2, #36	; 0x24
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0201 	bic.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a9c:	f000 fa02 	bl	8002ea4 <HAL_RCC_GetPCLK1Freq>
 8002aa0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	4a81      	ldr	r2, [pc, #516]	; (8002cac <HAL_I2C_Init+0x274>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d807      	bhi.n	8002abc <HAL_I2C_Init+0x84>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4a80      	ldr	r2, [pc, #512]	; (8002cb0 <HAL_I2C_Init+0x278>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	bf94      	ite	ls
 8002ab4:	2301      	movls	r3, #1
 8002ab6:	2300      	movhi	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	e006      	b.n	8002aca <HAL_I2C_Init+0x92>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4a7d      	ldr	r2, [pc, #500]	; (8002cb4 <HAL_I2C_Init+0x27c>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	bf94      	ite	ls
 8002ac4:	2301      	movls	r3, #1
 8002ac6:	2300      	movhi	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e0e7      	b.n	8002ca2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4a78      	ldr	r2, [pc, #480]	; (8002cb8 <HAL_I2C_Init+0x280>)
 8002ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ada:	0c9b      	lsrs	r3, r3, #18
 8002adc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	4a6a      	ldr	r2, [pc, #424]	; (8002cac <HAL_I2C_Init+0x274>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d802      	bhi.n	8002b0c <HAL_I2C_Init+0xd4>
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	e009      	b.n	8002b20 <HAL_I2C_Init+0xe8>
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b12:	fb02 f303 	mul.w	r3, r2, r3
 8002b16:	4a69      	ldr	r2, [pc, #420]	; (8002cbc <HAL_I2C_Init+0x284>)
 8002b18:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1c:	099b      	lsrs	r3, r3, #6
 8002b1e:	3301      	adds	r3, #1
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6812      	ldr	r2, [r2, #0]
 8002b24:	430b      	orrs	r3, r1
 8002b26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	495c      	ldr	r1, [pc, #368]	; (8002cac <HAL_I2C_Init+0x274>)
 8002b3c:	428b      	cmp	r3, r1
 8002b3e:	d819      	bhi.n	8002b74 <HAL_I2C_Init+0x13c>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	1e59      	subs	r1, r3, #1
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b4e:	1c59      	adds	r1, r3, #1
 8002b50:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b54:	400b      	ands	r3, r1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <HAL_I2C_Init+0x138>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	1e59      	subs	r1, r3, #1
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b68:	3301      	adds	r3, #1
 8002b6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b6e:	e051      	b.n	8002c14 <HAL_I2C_Init+0x1dc>
 8002b70:	2304      	movs	r3, #4
 8002b72:	e04f      	b.n	8002c14 <HAL_I2C_Init+0x1dc>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d111      	bne.n	8002ba0 <HAL_I2C_Init+0x168>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	1e58      	subs	r0, r3, #1
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6859      	ldr	r1, [r3, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	440b      	add	r3, r1
 8002b8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b8e:	3301      	adds	r3, #1
 8002b90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	bf0c      	ite	eq
 8002b98:	2301      	moveq	r3, #1
 8002b9a:	2300      	movne	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	e012      	b.n	8002bc6 <HAL_I2C_Init+0x18e>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	1e58      	subs	r0, r3, #1
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6859      	ldr	r1, [r3, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	0099      	lsls	r1, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	bf0c      	ite	eq
 8002bc0:	2301      	moveq	r3, #1
 8002bc2:	2300      	movne	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <HAL_I2C_Init+0x196>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e022      	b.n	8002c14 <HAL_I2C_Init+0x1dc>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10e      	bne.n	8002bf4 <HAL_I2C_Init+0x1bc>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1e58      	subs	r0, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6859      	ldr	r1, [r3, #4]
 8002bde:	460b      	mov	r3, r1
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	440b      	add	r3, r1
 8002be4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002be8:	3301      	adds	r3, #1
 8002bea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bf2:	e00f      	b.n	8002c14 <HAL_I2C_Init+0x1dc>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	1e58      	subs	r0, r3, #1
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6859      	ldr	r1, [r3, #4]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	0099      	lsls	r1, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	6809      	ldr	r1, [r1, #0]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69da      	ldr	r2, [r3, #28]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6911      	ldr	r1, [r2, #16]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68d2      	ldr	r2, [r2, #12]
 8002c4e:	4311      	orrs	r1, r2
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6812      	ldr	r2, [r2, #0]
 8002c54:	430b      	orrs	r3, r1
 8002c56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695a      	ldr	r2, [r3, #20]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f042 0201 	orr.w	r2, r2, #1
 8002c82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	000186a0 	.word	0x000186a0
 8002cb0:	001e847f 	.word	0x001e847f
 8002cb4:	003d08ff 	.word	0x003d08ff
 8002cb8:	431bde83 	.word	0x431bde83
 8002cbc:	10624dd3 	.word	0x10624dd3

08002cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0cc      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd4:	4b68      	ldr	r3, [pc, #416]	; (8002e78 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 030f 	and.w	r3, r3, #15
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d90c      	bls.n	8002cfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce2:	4b65      	ldr	r3, [pc, #404]	; (8002e78 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cea:	4b63      	ldr	r3, [pc, #396]	; (8002e78 <HAL_RCC_ClockConfig+0x1b8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d001      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e0b8      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d020      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d14:	4b59      	ldr	r3, [pc, #356]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	4a58      	ldr	r2, [pc, #352]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d2c:	4b53      	ldr	r3, [pc, #332]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	4a52      	ldr	r2, [pc, #328]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d38:	4b50      	ldr	r3, [pc, #320]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	494d      	ldr	r1, [pc, #308]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d044      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d107      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5e:	4b47      	ldr	r3, [pc, #284]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d119      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e07f      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d003      	beq.n	8002d7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d7a:	2b03      	cmp	r3, #3
 8002d7c:	d107      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d7e:	4b3f      	ldr	r3, [pc, #252]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d109      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e06f      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8e:	4b3b      	ldr	r3, [pc, #236]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e067      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d9e:	4b37      	ldr	r3, [pc, #220]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f023 0203 	bic.w	r2, r3, #3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	4934      	ldr	r1, [pc, #208]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002db0:	f7fe fa2e 	bl	8001210 <HAL_GetTick>
 8002db4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db6:	e00a      	b.n	8002dce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db8:	f7fe fa2a 	bl	8001210 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e04f      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dce:	4b2b      	ldr	r3, [pc, #172]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 020c 	and.w	r2, r3, #12
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d1eb      	bne.n	8002db8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002de0:	4b25      	ldr	r3, [pc, #148]	; (8002e78 <HAL_RCC_ClockConfig+0x1b8>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 030f 	and.w	r3, r3, #15
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d20c      	bcs.n	8002e08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dee:	4b22      	ldr	r3, [pc, #136]	; (8002e78 <HAL_RCC_ClockConfig+0x1b8>)
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df6:	4b20      	ldr	r3, [pc, #128]	; (8002e78 <HAL_RCC_ClockConfig+0x1b8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d001      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e032      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d008      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e14:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	4916      	ldr	r1, [pc, #88]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d009      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e32:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	490e      	ldr	r1, [pc, #56]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e46:	f000 f855 	bl	8002ef4 <HAL_RCC_GetSysClockFreq>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	091b      	lsrs	r3, r3, #4
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	490a      	ldr	r1, [pc, #40]	; (8002e80 <HAL_RCC_ClockConfig+0x1c0>)
 8002e58:	5ccb      	ldrb	r3, [r1, r3]
 8002e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e5e:	4a09      	ldr	r2, [pc, #36]	; (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002e60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e62:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <HAL_RCC_ClockConfig+0x1c8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fe f98e 	bl	8001188 <HAL_InitTick>

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40023c00 	.word	0x40023c00
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	080050bc 	.word	0x080050bc
 8002e84:	20000004 	.word	0x20000004
 8002e88:	20000008 	.word	0x20000008

08002e8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e90:	4b03      	ldr	r3, [pc, #12]	; (8002ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e92:	681b      	ldr	r3, [r3, #0]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	20000004 	.word	0x20000004

08002ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ea8:	f7ff fff0 	bl	8002e8c <HAL_RCC_GetHCLKFreq>
 8002eac:	4602      	mov	r2, r0
 8002eae:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	0a9b      	lsrs	r3, r3, #10
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	4903      	ldr	r1, [pc, #12]	; (8002ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eba:	5ccb      	ldrb	r3, [r1, r3]
 8002ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	080050cc 	.word	0x080050cc

08002ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ed0:	f7ff ffdc 	bl	8002e8c <HAL_RCC_GetHCLKFreq>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	4b05      	ldr	r3, [pc, #20]	; (8002eec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	0b5b      	lsrs	r3, r3, #13
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	4903      	ldr	r1, [pc, #12]	; (8002ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ee2:	5ccb      	ldrb	r3, [r1, r3]
 8002ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	080050cc 	.word	0x080050cc

08002ef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ef8:	b0ae      	sub	sp, #184	; 0xb8
 8002efa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f1a:	4bcb      	ldr	r3, [pc, #812]	; (8003248 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
 8002f22:	2b0c      	cmp	r3, #12
 8002f24:	f200 8206 	bhi.w	8003334 <HAL_RCC_GetSysClockFreq+0x440>
 8002f28:	a201      	add	r2, pc, #4	; (adr r2, 8002f30 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2e:	bf00      	nop
 8002f30:	08002f65 	.word	0x08002f65
 8002f34:	08003335 	.word	0x08003335
 8002f38:	08003335 	.word	0x08003335
 8002f3c:	08003335 	.word	0x08003335
 8002f40:	08002f6d 	.word	0x08002f6d
 8002f44:	08003335 	.word	0x08003335
 8002f48:	08003335 	.word	0x08003335
 8002f4c:	08003335 	.word	0x08003335
 8002f50:	08002f75 	.word	0x08002f75
 8002f54:	08003335 	.word	0x08003335
 8002f58:	08003335 	.word	0x08003335
 8002f5c:	08003335 	.word	0x08003335
 8002f60:	08003165 	.word	0x08003165
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f64:	4bb9      	ldr	r3, [pc, #740]	; (800324c <HAL_RCC_GetSysClockFreq+0x358>)
 8002f66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002f6a:	e1e7      	b.n	800333c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f6c:	4bb8      	ldr	r3, [pc, #736]	; (8003250 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002f6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f72:	e1e3      	b.n	800333c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f74:	4bb4      	ldr	r3, [pc, #720]	; (8003248 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f80:	4bb1      	ldr	r3, [pc, #708]	; (8003248 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d071      	beq.n	8003070 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f8c:	4bae      	ldr	r3, [pc, #696]	; (8003248 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	099b      	lsrs	r3, r3, #6
 8002f92:	2200      	movs	r2, #0
 8002f94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f98:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002f9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fa4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002fae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002fb2:	4622      	mov	r2, r4
 8002fb4:	462b      	mov	r3, r5
 8002fb6:	f04f 0000 	mov.w	r0, #0
 8002fba:	f04f 0100 	mov.w	r1, #0
 8002fbe:	0159      	lsls	r1, r3, #5
 8002fc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fc4:	0150      	lsls	r0, r2, #5
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4621      	mov	r1, r4
 8002fcc:	1a51      	subs	r1, r2, r1
 8002fce:	6439      	str	r1, [r7, #64]	; 0x40
 8002fd0:	4629      	mov	r1, r5
 8002fd2:	eb63 0301 	sbc.w	r3, r3, r1
 8002fd6:	647b      	str	r3, [r7, #68]	; 0x44
 8002fd8:	f04f 0200 	mov.w	r2, #0
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002fe4:	4649      	mov	r1, r9
 8002fe6:	018b      	lsls	r3, r1, #6
 8002fe8:	4641      	mov	r1, r8
 8002fea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fee:	4641      	mov	r1, r8
 8002ff0:	018a      	lsls	r2, r1, #6
 8002ff2:	4641      	mov	r1, r8
 8002ff4:	1a51      	subs	r1, r2, r1
 8002ff6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ff8:	4649      	mov	r1, r9
 8002ffa:	eb63 0301 	sbc.w	r3, r3, r1
 8002ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003000:	f04f 0200 	mov.w	r2, #0
 8003004:	f04f 0300 	mov.w	r3, #0
 8003008:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800300c:	4649      	mov	r1, r9
 800300e:	00cb      	lsls	r3, r1, #3
 8003010:	4641      	mov	r1, r8
 8003012:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003016:	4641      	mov	r1, r8
 8003018:	00ca      	lsls	r2, r1, #3
 800301a:	4610      	mov	r0, r2
 800301c:	4619      	mov	r1, r3
 800301e:	4603      	mov	r3, r0
 8003020:	4622      	mov	r2, r4
 8003022:	189b      	adds	r3, r3, r2
 8003024:	633b      	str	r3, [r7, #48]	; 0x30
 8003026:	462b      	mov	r3, r5
 8003028:	460a      	mov	r2, r1
 800302a:	eb42 0303 	adc.w	r3, r2, r3
 800302e:	637b      	str	r3, [r7, #52]	; 0x34
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	f04f 0300 	mov.w	r3, #0
 8003038:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800303c:	4629      	mov	r1, r5
 800303e:	024b      	lsls	r3, r1, #9
 8003040:	4621      	mov	r1, r4
 8003042:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003046:	4621      	mov	r1, r4
 8003048:	024a      	lsls	r2, r1, #9
 800304a:	4610      	mov	r0, r2
 800304c:	4619      	mov	r1, r3
 800304e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003052:	2200      	movs	r2, #0
 8003054:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003058:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800305c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003060:	f7fd f8d0 	bl	8000204 <__aeabi_uldivmod>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4613      	mov	r3, r2
 800306a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800306e:	e067      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003070:	4b75      	ldr	r3, [pc, #468]	; (8003248 <HAL_RCC_GetSysClockFreq+0x354>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	099b      	lsrs	r3, r3, #6
 8003076:	2200      	movs	r2, #0
 8003078:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800307c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003080:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003088:	67bb      	str	r3, [r7, #120]	; 0x78
 800308a:	2300      	movs	r3, #0
 800308c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800308e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003092:	4622      	mov	r2, r4
 8003094:	462b      	mov	r3, r5
 8003096:	f04f 0000 	mov.w	r0, #0
 800309a:	f04f 0100 	mov.w	r1, #0
 800309e:	0159      	lsls	r1, r3, #5
 80030a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030a4:	0150      	lsls	r0, r2, #5
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	4621      	mov	r1, r4
 80030ac:	1a51      	subs	r1, r2, r1
 80030ae:	62b9      	str	r1, [r7, #40]	; 0x28
 80030b0:	4629      	mov	r1, r5
 80030b2:	eb63 0301 	sbc.w	r3, r3, r1
 80030b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	f04f 0300 	mov.w	r3, #0
 80030c0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80030c4:	4649      	mov	r1, r9
 80030c6:	018b      	lsls	r3, r1, #6
 80030c8:	4641      	mov	r1, r8
 80030ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030ce:	4641      	mov	r1, r8
 80030d0:	018a      	lsls	r2, r1, #6
 80030d2:	4641      	mov	r1, r8
 80030d4:	ebb2 0a01 	subs.w	sl, r2, r1
 80030d8:	4649      	mov	r1, r9
 80030da:	eb63 0b01 	sbc.w	fp, r3, r1
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	f04f 0300 	mov.w	r3, #0
 80030e6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030ea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030f2:	4692      	mov	sl, r2
 80030f4:	469b      	mov	fp, r3
 80030f6:	4623      	mov	r3, r4
 80030f8:	eb1a 0303 	adds.w	r3, sl, r3
 80030fc:	623b      	str	r3, [r7, #32]
 80030fe:	462b      	mov	r3, r5
 8003100:	eb4b 0303 	adc.w	r3, fp, r3
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
 8003106:	f04f 0200 	mov.w	r2, #0
 800310a:	f04f 0300 	mov.w	r3, #0
 800310e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003112:	4629      	mov	r1, r5
 8003114:	028b      	lsls	r3, r1, #10
 8003116:	4621      	mov	r1, r4
 8003118:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800311c:	4621      	mov	r1, r4
 800311e:	028a      	lsls	r2, r1, #10
 8003120:	4610      	mov	r0, r2
 8003122:	4619      	mov	r1, r3
 8003124:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003128:	2200      	movs	r2, #0
 800312a:	673b      	str	r3, [r7, #112]	; 0x70
 800312c:	677a      	str	r2, [r7, #116]	; 0x74
 800312e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003132:	f7fd f867 	bl	8000204 <__aeabi_uldivmod>
 8003136:	4602      	mov	r2, r0
 8003138:	460b      	mov	r3, r1
 800313a:	4613      	mov	r3, r2
 800313c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003140:	4b41      	ldr	r3, [pc, #260]	; (8003248 <HAL_RCC_GetSysClockFreq+0x354>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	0c1b      	lsrs	r3, r3, #16
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	3301      	adds	r3, #1
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003152:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003156:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800315a:	fbb2 f3f3 	udiv	r3, r2, r3
 800315e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003162:	e0eb      	b.n	800333c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003164:	4b38      	ldr	r3, [pc, #224]	; (8003248 <HAL_RCC_GetSysClockFreq+0x354>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800316c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003170:	4b35      	ldr	r3, [pc, #212]	; (8003248 <HAL_RCC_GetSysClockFreq+0x354>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d06b      	beq.n	8003254 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800317c:	4b32      	ldr	r3, [pc, #200]	; (8003248 <HAL_RCC_GetSysClockFreq+0x354>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	099b      	lsrs	r3, r3, #6
 8003182:	2200      	movs	r2, #0
 8003184:	66bb      	str	r3, [r7, #104]	; 0x68
 8003186:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003188:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800318a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800318e:	663b      	str	r3, [r7, #96]	; 0x60
 8003190:	2300      	movs	r3, #0
 8003192:	667b      	str	r3, [r7, #100]	; 0x64
 8003194:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003198:	4622      	mov	r2, r4
 800319a:	462b      	mov	r3, r5
 800319c:	f04f 0000 	mov.w	r0, #0
 80031a0:	f04f 0100 	mov.w	r1, #0
 80031a4:	0159      	lsls	r1, r3, #5
 80031a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031aa:	0150      	lsls	r0, r2, #5
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	4621      	mov	r1, r4
 80031b2:	1a51      	subs	r1, r2, r1
 80031b4:	61b9      	str	r1, [r7, #24]
 80031b6:	4629      	mov	r1, r5
 80031b8:	eb63 0301 	sbc.w	r3, r3, r1
 80031bc:	61fb      	str	r3, [r7, #28]
 80031be:	f04f 0200 	mov.w	r2, #0
 80031c2:	f04f 0300 	mov.w	r3, #0
 80031c6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80031ca:	4659      	mov	r1, fp
 80031cc:	018b      	lsls	r3, r1, #6
 80031ce:	4651      	mov	r1, sl
 80031d0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031d4:	4651      	mov	r1, sl
 80031d6:	018a      	lsls	r2, r1, #6
 80031d8:	4651      	mov	r1, sl
 80031da:	ebb2 0801 	subs.w	r8, r2, r1
 80031de:	4659      	mov	r1, fp
 80031e0:	eb63 0901 	sbc.w	r9, r3, r1
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	f04f 0300 	mov.w	r3, #0
 80031ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031f8:	4690      	mov	r8, r2
 80031fa:	4699      	mov	r9, r3
 80031fc:	4623      	mov	r3, r4
 80031fe:	eb18 0303 	adds.w	r3, r8, r3
 8003202:	613b      	str	r3, [r7, #16]
 8003204:	462b      	mov	r3, r5
 8003206:	eb49 0303 	adc.w	r3, r9, r3
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	f04f 0200 	mov.w	r2, #0
 8003210:	f04f 0300 	mov.w	r3, #0
 8003214:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003218:	4629      	mov	r1, r5
 800321a:	024b      	lsls	r3, r1, #9
 800321c:	4621      	mov	r1, r4
 800321e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003222:	4621      	mov	r1, r4
 8003224:	024a      	lsls	r2, r1, #9
 8003226:	4610      	mov	r0, r2
 8003228:	4619      	mov	r1, r3
 800322a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800322e:	2200      	movs	r2, #0
 8003230:	65bb      	str	r3, [r7, #88]	; 0x58
 8003232:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003234:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003238:	f7fc ffe4 	bl	8000204 <__aeabi_uldivmod>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4613      	mov	r3, r2
 8003242:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003246:	e065      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0x420>
 8003248:	40023800 	.word	0x40023800
 800324c:	00f42400 	.word	0x00f42400
 8003250:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003254:	4b3d      	ldr	r3, [pc, #244]	; (800334c <HAL_RCC_GetSysClockFreq+0x458>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	099b      	lsrs	r3, r3, #6
 800325a:	2200      	movs	r2, #0
 800325c:	4618      	mov	r0, r3
 800325e:	4611      	mov	r1, r2
 8003260:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003264:	653b      	str	r3, [r7, #80]	; 0x50
 8003266:	2300      	movs	r3, #0
 8003268:	657b      	str	r3, [r7, #84]	; 0x54
 800326a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800326e:	4642      	mov	r2, r8
 8003270:	464b      	mov	r3, r9
 8003272:	f04f 0000 	mov.w	r0, #0
 8003276:	f04f 0100 	mov.w	r1, #0
 800327a:	0159      	lsls	r1, r3, #5
 800327c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003280:	0150      	lsls	r0, r2, #5
 8003282:	4602      	mov	r2, r0
 8003284:	460b      	mov	r3, r1
 8003286:	4641      	mov	r1, r8
 8003288:	1a51      	subs	r1, r2, r1
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	4649      	mov	r1, r9
 800328e:	eb63 0301 	sbc.w	r3, r3, r1
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80032a0:	4659      	mov	r1, fp
 80032a2:	018b      	lsls	r3, r1, #6
 80032a4:	4651      	mov	r1, sl
 80032a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032aa:	4651      	mov	r1, sl
 80032ac:	018a      	lsls	r2, r1, #6
 80032ae:	4651      	mov	r1, sl
 80032b0:	1a54      	subs	r4, r2, r1
 80032b2:	4659      	mov	r1, fp
 80032b4:	eb63 0501 	sbc.w	r5, r3, r1
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	f04f 0300 	mov.w	r3, #0
 80032c0:	00eb      	lsls	r3, r5, #3
 80032c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032c6:	00e2      	lsls	r2, r4, #3
 80032c8:	4614      	mov	r4, r2
 80032ca:	461d      	mov	r5, r3
 80032cc:	4643      	mov	r3, r8
 80032ce:	18e3      	adds	r3, r4, r3
 80032d0:	603b      	str	r3, [r7, #0]
 80032d2:	464b      	mov	r3, r9
 80032d4:	eb45 0303 	adc.w	r3, r5, r3
 80032d8:	607b      	str	r3, [r7, #4]
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032e6:	4629      	mov	r1, r5
 80032e8:	028b      	lsls	r3, r1, #10
 80032ea:	4621      	mov	r1, r4
 80032ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032f0:	4621      	mov	r1, r4
 80032f2:	028a      	lsls	r2, r1, #10
 80032f4:	4610      	mov	r0, r2
 80032f6:	4619      	mov	r1, r3
 80032f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032fc:	2200      	movs	r2, #0
 80032fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003300:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003302:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003306:	f7fc ff7d 	bl	8000204 <__aeabi_uldivmod>
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	4613      	mov	r3, r2
 8003310:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003314:	4b0d      	ldr	r3, [pc, #52]	; (800334c <HAL_RCC_GetSysClockFreq+0x458>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	0f1b      	lsrs	r3, r3, #28
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003322:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003326:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800332a:	fbb2 f3f3 	udiv	r3, r2, r3
 800332e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003332:	e003      	b.n	800333c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003334:	4b06      	ldr	r3, [pc, #24]	; (8003350 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003336:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800333a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800333c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003340:	4618      	mov	r0, r3
 8003342:	37b8      	adds	r7, #184	; 0xb8
 8003344:	46bd      	mov	sp, r7
 8003346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800334a:	bf00      	nop
 800334c:	40023800 	.word	0x40023800
 8003350:	00f42400 	.word	0x00f42400

08003354 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e28d      	b.n	8003882 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 8083 	beq.w	800347a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003374:	4b94      	ldr	r3, [pc, #592]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 030c 	and.w	r3, r3, #12
 800337c:	2b04      	cmp	r3, #4
 800337e:	d019      	beq.n	80033b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003380:	4b91      	ldr	r3, [pc, #580]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003388:	2b08      	cmp	r3, #8
 800338a:	d106      	bne.n	800339a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800338c:	4b8e      	ldr	r3, [pc, #568]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003394:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003398:	d00c      	beq.n	80033b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800339a:	4b8b      	ldr	r3, [pc, #556]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80033a2:	2b0c      	cmp	r3, #12
 80033a4:	d112      	bne.n	80033cc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033a6:	4b88      	ldr	r3, [pc, #544]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033b2:	d10b      	bne.n	80033cc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b4:	4b84      	ldr	r3, [pc, #528]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d05b      	beq.n	8003478 <HAL_RCC_OscConfig+0x124>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d157      	bne.n	8003478 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e25a      	b.n	8003882 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d4:	d106      	bne.n	80033e4 <HAL_RCC_OscConfig+0x90>
 80033d6:	4b7c      	ldr	r3, [pc, #496]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a7b      	ldr	r2, [pc, #492]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	e01d      	b.n	8003420 <HAL_RCC_OscConfig+0xcc>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033ec:	d10c      	bne.n	8003408 <HAL_RCC_OscConfig+0xb4>
 80033ee:	4b76      	ldr	r3, [pc, #472]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a75      	ldr	r2, [pc, #468]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 80033f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	4b73      	ldr	r3, [pc, #460]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a72      	ldr	r2, [pc, #456]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 8003400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	e00b      	b.n	8003420 <HAL_RCC_OscConfig+0xcc>
 8003408:	4b6f      	ldr	r3, [pc, #444]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a6e      	ldr	r2, [pc, #440]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 800340e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003412:	6013      	str	r3, [r2, #0]
 8003414:	4b6c      	ldr	r3, [pc, #432]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a6b      	ldr	r2, [pc, #428]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 800341a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800341e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d013      	beq.n	8003450 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003428:	f7fd fef2 	bl	8001210 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003430:	f7fd feee 	bl	8001210 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b64      	cmp	r3, #100	; 0x64
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e21f      	b.n	8003882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003442:	4b61      	ldr	r3, [pc, #388]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0xdc>
 800344e:	e014      	b.n	800347a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003450:	f7fd fede 	bl	8001210 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003458:	f7fd feda 	bl	8001210 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b64      	cmp	r3, #100	; 0x64
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e20b      	b.n	8003882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346a:	4b57      	ldr	r3, [pc, #348]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f0      	bne.n	8003458 <HAL_RCC_OscConfig+0x104>
 8003476:	e000      	b.n	800347a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d06f      	beq.n	8003566 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003486:	4b50      	ldr	r3, [pc, #320]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 030c 	and.w	r3, r3, #12
 800348e:	2b00      	cmp	r3, #0
 8003490:	d017      	beq.n	80034c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003492:	4b4d      	ldr	r3, [pc, #308]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800349a:	2b08      	cmp	r3, #8
 800349c:	d105      	bne.n	80034aa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800349e:	4b4a      	ldr	r3, [pc, #296]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00b      	beq.n	80034c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034aa:	4b47      	ldr	r3, [pc, #284]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80034b2:	2b0c      	cmp	r3, #12
 80034b4:	d11c      	bne.n	80034f0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034b6:	4b44      	ldr	r3, [pc, #272]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d116      	bne.n	80034f0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034c2:	4b41      	ldr	r3, [pc, #260]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d005      	beq.n	80034da <HAL_RCC_OscConfig+0x186>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d001      	beq.n	80034da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e1d3      	b.n	8003882 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034da:	4b3b      	ldr	r3, [pc, #236]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	4937      	ldr	r1, [pc, #220]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ee:	e03a      	b.n	8003566 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d020      	beq.n	800353a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034f8:	4b34      	ldr	r3, [pc, #208]	; (80035cc <HAL_RCC_OscConfig+0x278>)
 80034fa:	2201      	movs	r2, #1
 80034fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fe:	f7fd fe87 	bl	8001210 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003506:	f7fd fe83 	bl	8001210 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e1b4      	b.n	8003882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003518:	4b2b      	ldr	r3, [pc, #172]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0f0      	beq.n	8003506 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003524:	4b28      	ldr	r3, [pc, #160]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	4925      	ldr	r1, [pc, #148]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 8003534:	4313      	orrs	r3, r2
 8003536:	600b      	str	r3, [r1, #0]
 8003538:	e015      	b.n	8003566 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800353a:	4b24      	ldr	r3, [pc, #144]	; (80035cc <HAL_RCC_OscConfig+0x278>)
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003540:	f7fd fe66 	bl	8001210 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003548:	f7fd fe62 	bl	8001210 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e193      	b.n	8003882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800355a:	4b1b      	ldr	r3, [pc, #108]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f0      	bne.n	8003548 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0308 	and.w	r3, r3, #8
 800356e:	2b00      	cmp	r3, #0
 8003570:	d036      	beq.n	80035e0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d016      	beq.n	80035a8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800357a:	4b15      	ldr	r3, [pc, #84]	; (80035d0 <HAL_RCC_OscConfig+0x27c>)
 800357c:	2201      	movs	r2, #1
 800357e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003580:	f7fd fe46 	bl	8001210 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003588:	f7fd fe42 	bl	8001210 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e173      	b.n	8003882 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800359a:	4b0b      	ldr	r3, [pc, #44]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 800359c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0f0      	beq.n	8003588 <HAL_RCC_OscConfig+0x234>
 80035a6:	e01b      	b.n	80035e0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035a8:	4b09      	ldr	r3, [pc, #36]	; (80035d0 <HAL_RCC_OscConfig+0x27c>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ae:	f7fd fe2f 	bl	8001210 <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b4:	e00e      	b.n	80035d4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035b6:	f7fd fe2b 	bl	8001210 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d907      	bls.n	80035d4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e15c      	b.n	8003882 <HAL_RCC_OscConfig+0x52e>
 80035c8:	40023800 	.word	0x40023800
 80035cc:	42470000 	.word	0x42470000
 80035d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d4:	4b8a      	ldr	r3, [pc, #552]	; (8003800 <HAL_RCC_OscConfig+0x4ac>)
 80035d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1ea      	bne.n	80035b6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 8097 	beq.w	800371c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ee:	2300      	movs	r3, #0
 80035f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035f2:	4b83      	ldr	r3, [pc, #524]	; (8003800 <HAL_RCC_OscConfig+0x4ac>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10f      	bne.n	800361e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	60bb      	str	r3, [r7, #8]
 8003602:	4b7f      	ldr	r3, [pc, #508]	; (8003800 <HAL_RCC_OscConfig+0x4ac>)
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	4a7e      	ldr	r2, [pc, #504]	; (8003800 <HAL_RCC_OscConfig+0x4ac>)
 8003608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800360c:	6413      	str	r3, [r2, #64]	; 0x40
 800360e:	4b7c      	ldr	r3, [pc, #496]	; (8003800 <HAL_RCC_OscConfig+0x4ac>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003616:	60bb      	str	r3, [r7, #8]
 8003618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800361a:	2301      	movs	r3, #1
 800361c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361e:	4b79      	ldr	r3, [pc, #484]	; (8003804 <HAL_RCC_OscConfig+0x4b0>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003626:	2b00      	cmp	r3, #0
 8003628:	d118      	bne.n	800365c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800362a:	4b76      	ldr	r3, [pc, #472]	; (8003804 <HAL_RCC_OscConfig+0x4b0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a75      	ldr	r2, [pc, #468]	; (8003804 <HAL_RCC_OscConfig+0x4b0>)
 8003630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003636:	f7fd fdeb 	bl	8001210 <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363c:	e008      	b.n	8003650 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800363e:	f7fd fde7 	bl	8001210 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e118      	b.n	8003882 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003650:	4b6c      	ldr	r3, [pc, #432]	; (8003804 <HAL_RCC_OscConfig+0x4b0>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0f0      	beq.n	800363e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d106      	bne.n	8003672 <HAL_RCC_OscConfig+0x31e>
 8003664:	4b66      	ldr	r3, [pc, #408]	; (8003800 <HAL_RCC_OscConfig+0x4ac>)
 8003666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003668:	4a65      	ldr	r2, [pc, #404]	; (8003800 <HAL_RCC_OscConfig+0x4ac>)
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	6713      	str	r3, [r2, #112]	; 0x70
 8003670:	e01c      	b.n	80036ac <HAL_RCC_OscConfig+0x358>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	2b05      	cmp	r3, #5
 8003678:	d10c      	bne.n	8003694 <HAL_RCC_OscConfig+0x340>
 800367a:	4b61      	ldr	r3, [pc, #388]	; (8003800 <HAL_RCC_OscConfig+0x4ac>)
 800367c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367e:	4a60      	ldr	r2, [pc, #384]	; (8003800 <HAL_RCC_OscConfig+0x4ac>)
 8003680:	f043 0304 	orr.w	r3, r3, #4
 8003684:	6713      	str	r3, [r2, #112]	; 0x70
 8003686:	4b5e      	ldr	r3, [pc, #376]	; (8003800 <HAL_RCC_OscConfig+0x4ac>)
 8003688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368a:	4a5d      	ldr	r2, [pc, #372]	; (8003800 <HAL_RCC_OscConfig+0x4ac>)
 800368c:	f043 0301 	orr.w	r3, r3, #1
 8003690:	6713      	str	r3, [r2, #112]	; 0x70
 8003692:	e00b      	b.n	80036ac <HAL_RCC_OscConfig+0x358>
 8003694:	4b5a      	ldr	r3, [pc, #360]	; (8003800 <HAL_RCC_OscConfig+0x4ac>)
 8003696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003698:	4a59      	ldr	r2, [pc, #356]	; (8003800 <HAL_RCC_OscConfig+0x4ac>)
 800369a:	f023 0301 	bic.w	r3, r3, #1
 800369e:	6713      	str	r3, [r2, #112]	; 0x70
 80036a0:	4b57      	ldr	r3, [pc, #348]	; (8003800 <HAL_RCC_OscConfig+0x4ac>)
 80036a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a4:	4a56      	ldr	r2, [pc, #344]	; (8003800 <HAL_RCC_OscConfig+0x4ac>)
 80036a6:	f023 0304 	bic.w	r3, r3, #4
 80036aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d015      	beq.n	80036e0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b4:	f7fd fdac 	bl	8001210 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ba:	e00a      	b.n	80036d2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036bc:	f7fd fda8 	bl	8001210 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e0d7      	b.n	8003882 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d2:	4b4b      	ldr	r3, [pc, #300]	; (8003800 <HAL_RCC_OscConfig+0x4ac>)
 80036d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0ee      	beq.n	80036bc <HAL_RCC_OscConfig+0x368>
 80036de:	e014      	b.n	800370a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e0:	f7fd fd96 	bl	8001210 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036e6:	e00a      	b.n	80036fe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036e8:	f7fd fd92 	bl	8001210 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e0c1      	b.n	8003882 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036fe:	4b40      	ldr	r3, [pc, #256]	; (8003800 <HAL_RCC_OscConfig+0x4ac>)
 8003700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1ee      	bne.n	80036e8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800370a:	7dfb      	ldrb	r3, [r7, #23]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d105      	bne.n	800371c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003710:	4b3b      	ldr	r3, [pc, #236]	; (8003800 <HAL_RCC_OscConfig+0x4ac>)
 8003712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003714:	4a3a      	ldr	r2, [pc, #232]	; (8003800 <HAL_RCC_OscConfig+0x4ac>)
 8003716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800371a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 80ad 	beq.w	8003880 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003726:	4b36      	ldr	r3, [pc, #216]	; (8003800 <HAL_RCC_OscConfig+0x4ac>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 030c 	and.w	r3, r3, #12
 800372e:	2b08      	cmp	r3, #8
 8003730:	d060      	beq.n	80037f4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	2b02      	cmp	r3, #2
 8003738:	d145      	bne.n	80037c6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373a:	4b33      	ldr	r3, [pc, #204]	; (8003808 <HAL_RCC_OscConfig+0x4b4>)
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003740:	f7fd fd66 	bl	8001210 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003748:	f7fd fd62 	bl	8001210 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e093      	b.n	8003882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375a:	4b29      	ldr	r3, [pc, #164]	; (8003800 <HAL_RCC_OscConfig+0x4ac>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f0      	bne.n	8003748 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69da      	ldr	r2, [r3, #28]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	019b      	lsls	r3, r3, #6
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377c:	085b      	lsrs	r3, r3, #1
 800377e:	3b01      	subs	r3, #1
 8003780:	041b      	lsls	r3, r3, #16
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	061b      	lsls	r3, r3, #24
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003790:	071b      	lsls	r3, r3, #28
 8003792:	491b      	ldr	r1, [pc, #108]	; (8003800 <HAL_RCC_OscConfig+0x4ac>)
 8003794:	4313      	orrs	r3, r2
 8003796:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003798:	4b1b      	ldr	r3, [pc, #108]	; (8003808 <HAL_RCC_OscConfig+0x4b4>)
 800379a:	2201      	movs	r2, #1
 800379c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379e:	f7fd fd37 	bl	8001210 <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a6:	f7fd fd33 	bl	8001210 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e064      	b.n	8003882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b8:	4b11      	ldr	r3, [pc, #68]	; (8003800 <HAL_RCC_OscConfig+0x4ac>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0f0      	beq.n	80037a6 <HAL_RCC_OscConfig+0x452>
 80037c4:	e05c      	b.n	8003880 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c6:	4b10      	ldr	r3, [pc, #64]	; (8003808 <HAL_RCC_OscConfig+0x4b4>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037cc:	f7fd fd20 	bl	8001210 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d4:	f7fd fd1c 	bl	8001210 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e04d      	b.n	8003882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e6:	4b06      	ldr	r3, [pc, #24]	; (8003800 <HAL_RCC_OscConfig+0x4ac>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1f0      	bne.n	80037d4 <HAL_RCC_OscConfig+0x480>
 80037f2:	e045      	b.n	8003880 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d107      	bne.n	800380c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e040      	b.n	8003882 <HAL_RCC_OscConfig+0x52e>
 8003800:	40023800 	.word	0x40023800
 8003804:	40007000 	.word	0x40007000
 8003808:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800380c:	4b1f      	ldr	r3, [pc, #124]	; (800388c <HAL_RCC_OscConfig+0x538>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d030      	beq.n	800387c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003824:	429a      	cmp	r2, r3
 8003826:	d129      	bne.n	800387c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003832:	429a      	cmp	r2, r3
 8003834:	d122      	bne.n	800387c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800383c:	4013      	ands	r3, r2
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003842:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003844:	4293      	cmp	r3, r2
 8003846:	d119      	bne.n	800387c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003852:	085b      	lsrs	r3, r3, #1
 8003854:	3b01      	subs	r3, #1
 8003856:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003858:	429a      	cmp	r2, r3
 800385a:	d10f      	bne.n	800387c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003866:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003868:	429a      	cmp	r2, r3
 800386a:	d107      	bne.n	800387c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003878:	429a      	cmp	r2, r3
 800387a:	d001      	beq.n	8003880 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e000      	b.n	8003882 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	40023800 	.word	0x40023800

08003890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e041      	b.n	8003926 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d106      	bne.n	80038bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7fd fafc 	bl	8000eb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3304      	adds	r3, #4
 80038cc:	4619      	mov	r1, r3
 80038ce:	4610      	mov	r0, r2
 80038d0:	f000 fb18 	bl	8003f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b01      	cmp	r3, #1
 8003942:	d001      	beq.n	8003948 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e04e      	b.n	80039e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2202      	movs	r2, #2
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0201 	orr.w	r2, r2, #1
 800395e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a23      	ldr	r2, [pc, #140]	; (80039f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d022      	beq.n	80039b0 <HAL_TIM_Base_Start_IT+0x80>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003972:	d01d      	beq.n	80039b0 <HAL_TIM_Base_Start_IT+0x80>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a1f      	ldr	r2, [pc, #124]	; (80039f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d018      	beq.n	80039b0 <HAL_TIM_Base_Start_IT+0x80>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a1e      	ldr	r2, [pc, #120]	; (80039fc <HAL_TIM_Base_Start_IT+0xcc>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d013      	beq.n	80039b0 <HAL_TIM_Base_Start_IT+0x80>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a1c      	ldr	r2, [pc, #112]	; (8003a00 <HAL_TIM_Base_Start_IT+0xd0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d00e      	beq.n	80039b0 <HAL_TIM_Base_Start_IT+0x80>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a1b      	ldr	r2, [pc, #108]	; (8003a04 <HAL_TIM_Base_Start_IT+0xd4>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d009      	beq.n	80039b0 <HAL_TIM_Base_Start_IT+0x80>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a19      	ldr	r2, [pc, #100]	; (8003a08 <HAL_TIM_Base_Start_IT+0xd8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d004      	beq.n	80039b0 <HAL_TIM_Base_Start_IT+0x80>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a18      	ldr	r2, [pc, #96]	; (8003a0c <HAL_TIM_Base_Start_IT+0xdc>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d111      	bne.n	80039d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2b06      	cmp	r3, #6
 80039c0:	d010      	beq.n	80039e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f042 0201 	orr.w	r2, r2, #1
 80039d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039d2:	e007      	b.n	80039e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0201 	orr.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	40010000 	.word	0x40010000
 80039f8:	40000400 	.word	0x40000400
 80039fc:	40000800 	.word	0x40000800
 8003a00:	40000c00 	.word	0x40000c00
 8003a04:	40010400 	.word	0x40010400
 8003a08:	40014000 	.word	0x40014000
 8003a0c:	40001800 	.word	0x40001800

08003a10 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e097      	b.n	8003b54 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d106      	bne.n	8003a3e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7fd f9f5 	bl	8000e28 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2202      	movs	r2, #2
 8003a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6812      	ldr	r2, [r2, #0]
 8003a50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a54:	f023 0307 	bic.w	r3, r3, #7
 8003a58:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3304      	adds	r3, #4
 8003a62:	4619      	mov	r1, r3
 8003a64:	4610      	mov	r0, r2
 8003a66:	f000 fa4d 	bl	8003f04 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a92:	f023 0303 	bic.w	r3, r3, #3
 8003a96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	021b      	lsls	r3, r3, #8
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003ab0:	f023 030c 	bic.w	r3, r3, #12
 8003ab4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003abc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ac0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	021b      	lsls	r3, r3, #8
 8003acc:	4313      	orrs	r3, r2
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	011a      	lsls	r2, r3, #4
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	031b      	lsls	r3, r3, #12
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003aee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003af6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	4313      	orrs	r3, r2
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b6c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b74:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b7c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b84:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d110      	bne.n	8003bae <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b8c:	7bfb      	ldrb	r3, [r7, #15]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d102      	bne.n	8003b98 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b92:	7b7b      	ldrb	r3, [r7, #13]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d001      	beq.n	8003b9c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e089      	b.n	8003cb0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bac:	e031      	b.n	8003c12 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d110      	bne.n	8003bd6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bb4:	7bbb      	ldrb	r3, [r7, #14]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d102      	bne.n	8003bc0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003bba:	7b3b      	ldrb	r3, [r7, #12]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d001      	beq.n	8003bc4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e075      	b.n	8003cb0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bd4:	e01d      	b.n	8003c12 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d108      	bne.n	8003bee <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bdc:	7bbb      	ldrb	r3, [r7, #14]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d105      	bne.n	8003bee <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003be2:	7b7b      	ldrb	r3, [r7, #13]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d102      	bne.n	8003bee <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003be8:	7b3b      	ldrb	r3, [r7, #12]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d001      	beq.n	8003bf2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e05e      	b.n	8003cb0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2202      	movs	r2, #2
 8003c06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_TIM_Encoder_Start_IT+0xc4>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d010      	beq.n	8003c40 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003c1e:	e01f      	b.n	8003c60 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2201      	movs	r2, #1
 8003c26:	2100      	movs	r1, #0
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 fa0b 	bl	8004044 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68da      	ldr	r2, [r3, #12]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f042 0202 	orr.w	r2, r2, #2
 8003c3c:	60da      	str	r2, [r3, #12]
      break;
 8003c3e:	e02e      	b.n	8003c9e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2201      	movs	r2, #1
 8003c46:	2104      	movs	r1, #4
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 f9fb 	bl	8004044 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68da      	ldr	r2, [r3, #12]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f042 0204 	orr.w	r2, r2, #4
 8003c5c:	60da      	str	r2, [r3, #12]
      break;
 8003c5e:	e01e      	b.n	8003c9e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2201      	movs	r2, #1
 8003c66:	2100      	movs	r1, #0
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f000 f9eb 	bl	8004044 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2201      	movs	r2, #1
 8003c74:	2104      	movs	r1, #4
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 f9e4 	bl	8004044 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0202 	orr.w	r2, r2, #2
 8003c8a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68da      	ldr	r2, [r3, #12]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0204 	orr.w	r2, r2, #4
 8003c9a:	60da      	str	r2, [r3, #12]
      break;
 8003c9c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0201 	orr.w	r2, r2, #1
 8003cac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d122      	bne.n	8003d14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d11b      	bne.n	8003d14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f06f 0202 	mvn.w	r2, #2
 8003ce4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	f003 0303 	and.w	r3, r3, #3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7fc fcfa 	bl	80006f4 <HAL_TIM_IC_CaptureCallback>
 8003d00:	e005      	b.n	8003d0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f8e0 	bl	8003ec8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f8e7 	bl	8003edc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	f003 0304 	and.w	r3, r3, #4
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d122      	bne.n	8003d68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d11b      	bne.n	8003d68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f06f 0204 	mvn.w	r2, #4
 8003d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7fc fcd0 	bl	80006f4 <HAL_TIM_IC_CaptureCallback>
 8003d54:	e005      	b.n	8003d62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f8b6 	bl	8003ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f8bd 	bl	8003edc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f003 0308 	and.w	r3, r3, #8
 8003d72:	2b08      	cmp	r3, #8
 8003d74:	d122      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f003 0308 	and.w	r3, r3, #8
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d11b      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f06f 0208 	mvn.w	r2, #8
 8003d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2204      	movs	r2, #4
 8003d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7fc fca6 	bl	80006f4 <HAL_TIM_IC_CaptureCallback>
 8003da8:	e005      	b.n	8003db6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f88c 	bl	8003ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f893 	bl	8003edc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f003 0310 	and.w	r3, r3, #16
 8003dc6:	2b10      	cmp	r3, #16
 8003dc8:	d122      	bne.n	8003e10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f003 0310 	and.w	r3, r3, #16
 8003dd4:	2b10      	cmp	r3, #16
 8003dd6:	d11b      	bne.n	8003e10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f06f 0210 	mvn.w	r2, #16
 8003de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2208      	movs	r2, #8
 8003de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7fc fc7c 	bl	80006f4 <HAL_TIM_IC_CaptureCallback>
 8003dfc:	e005      	b.n	8003e0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f862 	bl	8003ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f869 	bl	8003edc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d10e      	bne.n	8003e3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d107      	bne.n	8003e3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f06f 0201 	mvn.w	r2, #1
 8003e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7fc fb6c 	bl	8000514 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e46:	2b80      	cmp	r3, #128	; 0x80
 8003e48:	d10e      	bne.n	8003e68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e54:	2b80      	cmp	r3, #128	; 0x80
 8003e56:	d107      	bne.n	8003e68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f99a 	bl	800419c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e72:	2b40      	cmp	r3, #64	; 0x40
 8003e74:	d10e      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e80:	2b40      	cmp	r3, #64	; 0x40
 8003e82:	d107      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f82e 	bl	8003ef0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f003 0320 	and.w	r3, r3, #32
 8003e9e:	2b20      	cmp	r3, #32
 8003ea0:	d10e      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	d107      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0220 	mvn.w	r2, #32
 8003eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f964 	bl	8004188 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ec0:	bf00      	nop
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a40      	ldr	r2, [pc, #256]	; (8004018 <TIM_Base_SetConfig+0x114>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d013      	beq.n	8003f44 <TIM_Base_SetConfig+0x40>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f22:	d00f      	beq.n	8003f44 <TIM_Base_SetConfig+0x40>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a3d      	ldr	r2, [pc, #244]	; (800401c <TIM_Base_SetConfig+0x118>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d00b      	beq.n	8003f44 <TIM_Base_SetConfig+0x40>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a3c      	ldr	r2, [pc, #240]	; (8004020 <TIM_Base_SetConfig+0x11c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d007      	beq.n	8003f44 <TIM_Base_SetConfig+0x40>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a3b      	ldr	r2, [pc, #236]	; (8004024 <TIM_Base_SetConfig+0x120>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d003      	beq.n	8003f44 <TIM_Base_SetConfig+0x40>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a3a      	ldr	r2, [pc, #232]	; (8004028 <TIM_Base_SetConfig+0x124>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d108      	bne.n	8003f56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a2f      	ldr	r2, [pc, #188]	; (8004018 <TIM_Base_SetConfig+0x114>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d02b      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f64:	d027      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a2c      	ldr	r2, [pc, #176]	; (800401c <TIM_Base_SetConfig+0x118>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d023      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a2b      	ldr	r2, [pc, #172]	; (8004020 <TIM_Base_SetConfig+0x11c>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d01f      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a2a      	ldr	r2, [pc, #168]	; (8004024 <TIM_Base_SetConfig+0x120>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d01b      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a29      	ldr	r2, [pc, #164]	; (8004028 <TIM_Base_SetConfig+0x124>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d017      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a28      	ldr	r2, [pc, #160]	; (800402c <TIM_Base_SetConfig+0x128>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d013      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a27      	ldr	r2, [pc, #156]	; (8004030 <TIM_Base_SetConfig+0x12c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d00f      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a26      	ldr	r2, [pc, #152]	; (8004034 <TIM_Base_SetConfig+0x130>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00b      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a25      	ldr	r2, [pc, #148]	; (8004038 <TIM_Base_SetConfig+0x134>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d007      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a24      	ldr	r2, [pc, #144]	; (800403c <TIM_Base_SetConfig+0x138>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d003      	beq.n	8003fb6 <TIM_Base_SetConfig+0xb2>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a23      	ldr	r2, [pc, #140]	; (8004040 <TIM_Base_SetConfig+0x13c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d108      	bne.n	8003fc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a0a      	ldr	r2, [pc, #40]	; (8004018 <TIM_Base_SetConfig+0x114>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d003      	beq.n	8003ffc <TIM_Base_SetConfig+0xf8>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a0c      	ldr	r2, [pc, #48]	; (8004028 <TIM_Base_SetConfig+0x124>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d103      	bne.n	8004004 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	615a      	str	r2, [r3, #20]
}
 800400a:	bf00      	nop
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40010000 	.word	0x40010000
 800401c:	40000400 	.word	0x40000400
 8004020:	40000800 	.word	0x40000800
 8004024:	40000c00 	.word	0x40000c00
 8004028:	40010400 	.word	0x40010400
 800402c:	40014000 	.word	0x40014000
 8004030:	40014400 	.word	0x40014400
 8004034:	40014800 	.word	0x40014800
 8004038:	40001800 	.word	0x40001800
 800403c:	40001c00 	.word	0x40001c00
 8004040:	40002000 	.word	0x40002000

08004044 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f003 031f 	and.w	r3, r3, #31
 8004056:	2201      	movs	r2, #1
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6a1a      	ldr	r2, [r3, #32]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	43db      	mvns	r3, r3
 8004066:	401a      	ands	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a1a      	ldr	r2, [r3, #32]
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	f003 031f 	and.w	r3, r3, #31
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	fa01 f303 	lsl.w	r3, r1, r3
 800407c:	431a      	orrs	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	621a      	str	r2, [r3, #32]
}
 8004082:	bf00      	nop
 8004084:	371c      	adds	r7, #28
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
	...

08004090 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040a4:	2302      	movs	r3, #2
 80040a6:	e05a      	b.n	800415e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a21      	ldr	r2, [pc, #132]	; (800416c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d022      	beq.n	8004132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f4:	d01d      	beq.n	8004132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a1d      	ldr	r2, [pc, #116]	; (8004170 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d018      	beq.n	8004132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a1b      	ldr	r2, [pc, #108]	; (8004174 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d013      	beq.n	8004132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a1a      	ldr	r2, [pc, #104]	; (8004178 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d00e      	beq.n	8004132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a18      	ldr	r2, [pc, #96]	; (800417c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d009      	beq.n	8004132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a17      	ldr	r2, [pc, #92]	; (8004180 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d004      	beq.n	8004132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a15      	ldr	r2, [pc, #84]	; (8004184 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d10c      	bne.n	800414c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004138:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	4313      	orrs	r3, r2
 8004142:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	40010000 	.word	0x40010000
 8004170:	40000400 	.word	0x40000400
 8004174:	40000800 	.word	0x40000800
 8004178:	40000c00 	.word	0x40000c00
 800417c:	40010400 	.word	0x40010400
 8004180:	40014000 	.word	0x40014000
 8004184:	40001800 	.word	0x40001800

08004188 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e03f      	b.n	8004242 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d106      	bne.n	80041dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7fc fe94 	bl	8000f04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2224      	movs	r2, #36	; 0x24
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 fcb5 	bl	8004b64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004208:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	695a      	ldr	r2, [r3, #20]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004218:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004228:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2220      	movs	r2, #32
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800424a:	b480      	push	{r7}
 800424c:	b085      	sub	sp, #20
 800424e:	af00      	add	r7, sp, #0
 8004250:	60f8      	str	r0, [r7, #12]
 8004252:	60b9      	str	r1, [r7, #8]
 8004254:	4613      	mov	r3, r2
 8004256:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b20      	cmp	r3, #32
 8004262:	d130      	bne.n	80042c6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d002      	beq.n	8004270 <HAL_UART_Transmit_IT+0x26>
 800426a:	88fb      	ldrh	r3, [r7, #6]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e029      	b.n	80042c8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800427a:	2b01      	cmp	r3, #1
 800427c:	d101      	bne.n	8004282 <HAL_UART_Transmit_IT+0x38>
 800427e:	2302      	movs	r3, #2
 8004280:	e022      	b.n	80042c8 <HAL_UART_Transmit_IT+0x7e>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	88fa      	ldrh	r2, [r7, #6]
 8004294:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	88fa      	ldrh	r2, [r7, #6]
 800429a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2221      	movs	r2, #33	; 0x21
 80042a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68da      	ldr	r2, [r3, #12]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042c0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	e000      	b.n	80042c8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80042c6:	2302      	movs	r3, #2
  }
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b0ba      	sub	sp, #232	; 0xe8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004300:	2300      	movs	r3, #0
 8004302:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004312:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10f      	bne.n	800433a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800431a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800431e:	f003 0320 	and.w	r3, r3, #32
 8004322:	2b00      	cmp	r3, #0
 8004324:	d009      	beq.n	800433a <HAL_UART_IRQHandler+0x66>
 8004326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800432a:	f003 0320 	and.w	r3, r3, #32
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fb5b 	bl	80049ee <UART_Receive_IT>
      return;
 8004338:	e256      	b.n	80047e8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800433a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800433e:	2b00      	cmp	r3, #0
 8004340:	f000 80de 	beq.w	8004500 <HAL_UART_IRQHandler+0x22c>
 8004344:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b00      	cmp	r3, #0
 800434e:	d106      	bne.n	800435e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004354:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 80d1 	beq.w	8004500 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800435e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00b      	beq.n	8004382 <HAL_UART_IRQHandler+0xae>
 800436a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800436e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004372:	2b00      	cmp	r3, #0
 8004374:	d005      	beq.n	8004382 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	f043 0201 	orr.w	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00b      	beq.n	80043a6 <HAL_UART_IRQHandler+0xd2>
 800438e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d005      	beq.n	80043a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	f043 0202 	orr.w	r2, r3, #2
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00b      	beq.n	80043ca <HAL_UART_IRQHandler+0xf6>
 80043b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d005      	beq.n	80043ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	f043 0204 	orr.w	r2, r3, #4
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80043ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d011      	beq.n	80043fa <HAL_UART_IRQHandler+0x126>
 80043d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043da:	f003 0320 	and.w	r3, r3, #32
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d105      	bne.n	80043ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d005      	beq.n	80043fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	f043 0208 	orr.w	r2, r3, #8
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f000 81ed 	beq.w	80047de <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b00      	cmp	r3, #0
 800440e:	d008      	beq.n	8004422 <HAL_UART_IRQHandler+0x14e>
 8004410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004414:	f003 0320 	and.w	r3, r3, #32
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 fae6 	bl	80049ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442c:	2b40      	cmp	r3, #64	; 0x40
 800442e:	bf0c      	ite	eq
 8004430:	2301      	moveq	r3, #1
 8004432:	2300      	movne	r3, #0
 8004434:	b2db      	uxtb	r3, r3
 8004436:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	2b00      	cmp	r3, #0
 8004444:	d103      	bne.n	800444e <HAL_UART_IRQHandler+0x17a>
 8004446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800444a:	2b00      	cmp	r3, #0
 800444c:	d04f      	beq.n	80044ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f9ee 	bl	8004830 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445e:	2b40      	cmp	r3, #64	; 0x40
 8004460:	d141      	bne.n	80044e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3314      	adds	r3, #20
 8004468:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004470:	e853 3f00 	ldrex	r3, [r3]
 8004474:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004478:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800447c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004480:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	3314      	adds	r3, #20
 800448a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800448e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004492:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004496:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800449a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800449e:	e841 2300 	strex	r3, r2, [r1]
 80044a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80044a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1d9      	bne.n	8004462 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d013      	beq.n	80044de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ba:	4a7d      	ldr	r2, [pc, #500]	; (80046b0 <HAL_UART_IRQHandler+0x3dc>)
 80044bc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fd fe74 	bl	80021b0 <HAL_DMA_Abort_IT>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d016      	beq.n	80044fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044d8:	4610      	mov	r0, r2
 80044da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044dc:	e00e      	b.n	80044fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f990 	bl	8004804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044e4:	e00a      	b.n	80044fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f98c 	bl	8004804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ec:	e006      	b.n	80044fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f988 	bl	8004804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80044fa:	e170      	b.n	80047de <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044fc:	bf00      	nop
    return;
 80044fe:	e16e      	b.n	80047de <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004504:	2b01      	cmp	r3, #1
 8004506:	f040 814a 	bne.w	800479e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800450a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800450e:	f003 0310 	and.w	r3, r3, #16
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 8143 	beq.w	800479e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800451c:	f003 0310 	and.w	r3, r3, #16
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 813c 	beq.w	800479e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004526:	2300      	movs	r3, #0
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	60bb      	str	r3, [r7, #8]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	60bb      	str	r3, [r7, #8]
 800453a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004546:	2b40      	cmp	r3, #64	; 0x40
 8004548:	f040 80b4 	bne.w	80046b4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004558:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 8140 	beq.w	80047e2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004566:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800456a:	429a      	cmp	r2, r3
 800456c:	f080 8139 	bcs.w	80047e2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004576:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004582:	f000 8088 	beq.w	8004696 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	330c      	adds	r3, #12
 800458c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004590:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800459c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	330c      	adds	r3, #12
 80045ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80045b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80045be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80045c2:	e841 2300 	strex	r3, r2, [r1]
 80045c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80045ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1d9      	bne.n	8004586 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3314      	adds	r3, #20
 80045d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045dc:	e853 3f00 	ldrex	r3, [r3]
 80045e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80045e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045e4:	f023 0301 	bic.w	r3, r3, #1
 80045e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	3314      	adds	r3, #20
 80045f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80045fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004602:	e841 2300 	strex	r3, r2, [r1]
 8004606:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004608:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1e1      	bne.n	80045d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3314      	adds	r3, #20
 8004614:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004616:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004618:	e853 3f00 	ldrex	r3, [r3]
 800461c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800461e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004620:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004624:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	3314      	adds	r3, #20
 800462e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004632:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004634:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004636:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004638:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800463a:	e841 2300 	strex	r3, r2, [r1]
 800463e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004640:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1e3      	bne.n	800460e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2220      	movs	r2, #32
 800464a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	330c      	adds	r3, #12
 800465a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800465e:	e853 3f00 	ldrex	r3, [r3]
 8004662:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004666:	f023 0310 	bic.w	r3, r3, #16
 800466a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	330c      	adds	r3, #12
 8004674:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004678:	65ba      	str	r2, [r7, #88]	; 0x58
 800467a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800467e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004680:	e841 2300 	strex	r3, r2, [r1]
 8004684:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1e3      	bne.n	8004654 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004690:	4618      	mov	r0, r3
 8004692:	f7fd fd1d 	bl	80020d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800469e:	b29b      	uxth	r3, r3
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	4619      	mov	r1, r3
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f8b6 	bl	8004818 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046ac:	e099      	b.n	80047e2 <HAL_UART_IRQHandler+0x50e>
 80046ae:	bf00      	nop
 80046b0:	080048f7 	.word	0x080048f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046bc:	b29b      	uxth	r3, r3
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 808b 	beq.w	80047e6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80046d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 8086 	beq.w	80047e6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	330c      	adds	r3, #12
 80046e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e4:	e853 3f00 	ldrex	r3, [r3]
 80046e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	330c      	adds	r3, #12
 80046fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80046fe:	647a      	str	r2, [r7, #68]	; 0x44
 8004700:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004702:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004704:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004706:	e841 2300 	strex	r3, r2, [r1]
 800470a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800470c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1e3      	bne.n	80046da <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	3314      	adds	r3, #20
 8004718:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	e853 3f00 	ldrex	r3, [r3]
 8004720:	623b      	str	r3, [r7, #32]
   return(result);
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	f023 0301 	bic.w	r3, r3, #1
 8004728:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3314      	adds	r3, #20
 8004732:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004736:	633a      	str	r2, [r7, #48]	; 0x30
 8004738:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800473c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800473e:	e841 2300 	strex	r3, r2, [r1]
 8004742:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1e3      	bne.n	8004712 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2220      	movs	r2, #32
 800474e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	330c      	adds	r3, #12
 800475e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	e853 3f00 	ldrex	r3, [r3]
 8004766:	60fb      	str	r3, [r7, #12]
   return(result);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 0310 	bic.w	r3, r3, #16
 800476e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	330c      	adds	r3, #12
 8004778:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800477c:	61fa      	str	r2, [r7, #28]
 800477e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004780:	69b9      	ldr	r1, [r7, #24]
 8004782:	69fa      	ldr	r2, [r7, #28]
 8004784:	e841 2300 	strex	r3, r2, [r1]
 8004788:	617b      	str	r3, [r7, #20]
   return(result);
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1e3      	bne.n	8004758 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004790:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004794:	4619      	mov	r1, r3
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f83e 	bl	8004818 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800479c:	e023      	b.n	80047e6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800479e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d009      	beq.n	80047be <HAL_UART_IRQHandler+0x4ea>
 80047aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f8b1 	bl	800491e <UART_Transmit_IT>
    return;
 80047bc:	e014      	b.n	80047e8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00e      	beq.n	80047e8 <HAL_UART_IRQHandler+0x514>
 80047ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d008      	beq.n	80047e8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f8f1 	bl	80049be <UART_EndTransmit_IT>
    return;
 80047dc:	e004      	b.n	80047e8 <HAL_UART_IRQHandler+0x514>
    return;
 80047de:	bf00      	nop
 80047e0:	e002      	b.n	80047e8 <HAL_UART_IRQHandler+0x514>
      return;
 80047e2:	bf00      	nop
 80047e4:	e000      	b.n	80047e8 <HAL_UART_IRQHandler+0x514>
      return;
 80047e6:	bf00      	nop
  }
}
 80047e8:	37e8      	adds	r7, #232	; 0xe8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop

080047f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	460b      	mov	r3, r1
 8004822:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004830:	b480      	push	{r7}
 8004832:	b095      	sub	sp, #84	; 0x54
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	330c      	adds	r3, #12
 800483e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004842:	e853 3f00 	ldrex	r3, [r3]
 8004846:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800484e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	330c      	adds	r3, #12
 8004856:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004858:	643a      	str	r2, [r7, #64]	; 0x40
 800485a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800485e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004860:	e841 2300 	strex	r3, r2, [r1]
 8004864:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1e5      	bne.n	8004838 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	3314      	adds	r3, #20
 8004872:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	e853 3f00 	ldrex	r3, [r3]
 800487a:	61fb      	str	r3, [r7, #28]
   return(result);
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	f023 0301 	bic.w	r3, r3, #1
 8004882:	64bb      	str	r3, [r7, #72]	; 0x48
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3314      	adds	r3, #20
 800488a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800488c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800488e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004890:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004894:	e841 2300 	strex	r3, r2, [r1]
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1e5      	bne.n	800486c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d119      	bne.n	80048dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	330c      	adds	r3, #12
 80048ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	e853 3f00 	ldrex	r3, [r3]
 80048b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	f023 0310 	bic.w	r3, r3, #16
 80048be:	647b      	str	r3, [r7, #68]	; 0x44
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	330c      	adds	r3, #12
 80048c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048c8:	61ba      	str	r2, [r7, #24]
 80048ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048cc:	6979      	ldr	r1, [r7, #20]
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	e841 2300 	strex	r3, r2, [r1]
 80048d4:	613b      	str	r3, [r7, #16]
   return(result);
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1e5      	bne.n	80048a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2220      	movs	r2, #32
 80048e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80048ea:	bf00      	nop
 80048ec:	3754      	adds	r7, #84	; 0x54
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b084      	sub	sp, #16
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004902:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f7ff ff77 	bl	8004804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004916:	bf00      	nop
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800491e:	b480      	push	{r7}
 8004920:	b085      	sub	sp, #20
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b21      	cmp	r3, #33	; 0x21
 8004930:	d13e      	bne.n	80049b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800493a:	d114      	bne.n	8004966 <UART_Transmit_IT+0x48>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d110      	bne.n	8004966 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	881b      	ldrh	r3, [r3, #0]
 800494e:	461a      	mov	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004958:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	1c9a      	adds	r2, r3, #2
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	621a      	str	r2, [r3, #32]
 8004964:	e008      	b.n	8004978 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	1c59      	adds	r1, r3, #1
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6211      	str	r1, [r2, #32]
 8004970:	781a      	ldrb	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800497c:	b29b      	uxth	r3, r3
 800497e:	3b01      	subs	r3, #1
 8004980:	b29b      	uxth	r3, r3
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	4619      	mov	r1, r3
 8004986:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10f      	bne.n	80049ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68da      	ldr	r2, [r3, #12]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800499a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68da      	ldr	r2, [r3, #12]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049ac:	2300      	movs	r3, #0
 80049ae:	e000      	b.n	80049b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049b0:	2302      	movs	r3, #2
  }
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b082      	sub	sp, #8
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68da      	ldr	r2, [r3, #12]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2220      	movs	r2, #32
 80049da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7fb fe78 	bl	80006d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b08c      	sub	sp, #48	; 0x30
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b22      	cmp	r3, #34	; 0x22
 8004a00:	f040 80ab 	bne.w	8004b5a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a0c:	d117      	bne.n	8004a3e <UART_Receive_IT+0x50>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d113      	bne.n	8004a3e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a16:	2300      	movs	r3, #0
 8004a18:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a30:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a36:	1c9a      	adds	r2, r3, #2
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	629a      	str	r2, [r3, #40]	; 0x28
 8004a3c:	e026      	b.n	8004a8c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a42:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004a44:	2300      	movs	r3, #0
 8004a46:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a50:	d007      	beq.n	8004a62 <UART_Receive_IT+0x74>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10a      	bne.n	8004a70 <UART_Receive_IT+0x82>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d106      	bne.n	8004a70 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6c:	701a      	strb	r2, [r3, #0]
 8004a6e:	e008      	b.n	8004a82 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a80:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	3b01      	subs	r3, #1
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	4619      	mov	r1, r3
 8004a9a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d15a      	bne.n	8004b56 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 0220 	bic.w	r2, r2, #32
 8004aae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004abe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695a      	ldr	r2, [r3, #20]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0201 	bic.w	r2, r2, #1
 8004ace:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d135      	bne.n	8004b4c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	330c      	adds	r3, #12
 8004aec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	e853 3f00 	ldrex	r3, [r3]
 8004af4:	613b      	str	r3, [r7, #16]
   return(result);
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	f023 0310 	bic.w	r3, r3, #16
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	330c      	adds	r3, #12
 8004b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b06:	623a      	str	r2, [r7, #32]
 8004b08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0a:	69f9      	ldr	r1, [r7, #28]
 8004b0c:	6a3a      	ldr	r2, [r7, #32]
 8004b0e:	e841 2300 	strex	r3, r2, [r1]
 8004b12:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1e5      	bne.n	8004ae6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0310 	and.w	r3, r3, #16
 8004b24:	2b10      	cmp	r3, #16
 8004b26:	d10a      	bne.n	8004b3e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b28:	2300      	movs	r3, #0
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b42:	4619      	mov	r1, r3
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f7ff fe67 	bl	8004818 <HAL_UARTEx_RxEventCallback>
 8004b4a:	e002      	b.n	8004b52 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7ff fe4f 	bl	80047f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b52:	2300      	movs	r3, #0
 8004b54:	e002      	b.n	8004b5c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004b56:	2300      	movs	r3, #0
 8004b58:	e000      	b.n	8004b5c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004b5a:	2302      	movs	r3, #2
  }
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3730      	adds	r7, #48	; 0x30
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b68:	b0c0      	sub	sp, #256	; 0x100
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b80:	68d9      	ldr	r1, [r3, #12]
 8004b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	ea40 0301 	orr.w	r3, r0, r1
 8004b8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004bbc:	f021 010c 	bic.w	r1, r1, #12
 8004bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004bca:	430b      	orrs	r3, r1
 8004bcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bde:	6999      	ldr	r1, [r3, #24]
 8004be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	ea40 0301 	orr.w	r3, r0, r1
 8004bea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	4b8f      	ldr	r3, [pc, #572]	; (8004e30 <UART_SetConfig+0x2cc>)
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d005      	beq.n	8004c04 <UART_SetConfig+0xa0>
 8004bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	4b8d      	ldr	r3, [pc, #564]	; (8004e34 <UART_SetConfig+0x2d0>)
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d104      	bne.n	8004c0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c04:	f7fe f962 	bl	8002ecc <HAL_RCC_GetPCLK2Freq>
 8004c08:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c0c:	e003      	b.n	8004c16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c0e:	f7fe f949 	bl	8002ea4 <HAL_RCC_GetPCLK1Freq>
 8004c12:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c20:	f040 810c 	bne.w	8004e3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c2e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004c32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c36:	4622      	mov	r2, r4
 8004c38:	462b      	mov	r3, r5
 8004c3a:	1891      	adds	r1, r2, r2
 8004c3c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c3e:	415b      	adcs	r3, r3
 8004c40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c46:	4621      	mov	r1, r4
 8004c48:	eb12 0801 	adds.w	r8, r2, r1
 8004c4c:	4629      	mov	r1, r5
 8004c4e:	eb43 0901 	adc.w	r9, r3, r1
 8004c52:	f04f 0200 	mov.w	r2, #0
 8004c56:	f04f 0300 	mov.w	r3, #0
 8004c5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c66:	4690      	mov	r8, r2
 8004c68:	4699      	mov	r9, r3
 8004c6a:	4623      	mov	r3, r4
 8004c6c:	eb18 0303 	adds.w	r3, r8, r3
 8004c70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c74:	462b      	mov	r3, r5
 8004c76:	eb49 0303 	adc.w	r3, r9, r3
 8004c7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c8a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c92:	460b      	mov	r3, r1
 8004c94:	18db      	adds	r3, r3, r3
 8004c96:	653b      	str	r3, [r7, #80]	; 0x50
 8004c98:	4613      	mov	r3, r2
 8004c9a:	eb42 0303 	adc.w	r3, r2, r3
 8004c9e:	657b      	str	r3, [r7, #84]	; 0x54
 8004ca0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ca4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ca8:	f7fb faac 	bl	8000204 <__aeabi_uldivmod>
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4b61      	ldr	r3, [pc, #388]	; (8004e38 <UART_SetConfig+0x2d4>)
 8004cb2:	fba3 2302 	umull	r2, r3, r3, r2
 8004cb6:	095b      	lsrs	r3, r3, #5
 8004cb8:	011c      	lsls	r4, r3, #4
 8004cba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cc4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004cc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ccc:	4642      	mov	r2, r8
 8004cce:	464b      	mov	r3, r9
 8004cd0:	1891      	adds	r1, r2, r2
 8004cd2:	64b9      	str	r1, [r7, #72]	; 0x48
 8004cd4:	415b      	adcs	r3, r3
 8004cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004cdc:	4641      	mov	r1, r8
 8004cde:	eb12 0a01 	adds.w	sl, r2, r1
 8004ce2:	4649      	mov	r1, r9
 8004ce4:	eb43 0b01 	adc.w	fp, r3, r1
 8004ce8:	f04f 0200 	mov.w	r2, #0
 8004cec:	f04f 0300 	mov.w	r3, #0
 8004cf0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cf4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cf8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cfc:	4692      	mov	sl, r2
 8004cfe:	469b      	mov	fp, r3
 8004d00:	4643      	mov	r3, r8
 8004d02:	eb1a 0303 	adds.w	r3, sl, r3
 8004d06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d0a:	464b      	mov	r3, r9
 8004d0c:	eb4b 0303 	adc.w	r3, fp, r3
 8004d10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d20:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004d24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d28:	460b      	mov	r3, r1
 8004d2a:	18db      	adds	r3, r3, r3
 8004d2c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d2e:	4613      	mov	r3, r2
 8004d30:	eb42 0303 	adc.w	r3, r2, r3
 8004d34:	647b      	str	r3, [r7, #68]	; 0x44
 8004d36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d3e:	f7fb fa61 	bl	8000204 <__aeabi_uldivmod>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	4611      	mov	r1, r2
 8004d48:	4b3b      	ldr	r3, [pc, #236]	; (8004e38 <UART_SetConfig+0x2d4>)
 8004d4a:	fba3 2301 	umull	r2, r3, r3, r1
 8004d4e:	095b      	lsrs	r3, r3, #5
 8004d50:	2264      	movs	r2, #100	; 0x64
 8004d52:	fb02 f303 	mul.w	r3, r2, r3
 8004d56:	1acb      	subs	r3, r1, r3
 8004d58:	00db      	lsls	r3, r3, #3
 8004d5a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d5e:	4b36      	ldr	r3, [pc, #216]	; (8004e38 <UART_SetConfig+0x2d4>)
 8004d60:	fba3 2302 	umull	r2, r3, r3, r2
 8004d64:	095b      	lsrs	r3, r3, #5
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d6c:	441c      	add	r4, r3
 8004d6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d72:	2200      	movs	r2, #0
 8004d74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d78:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004d7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004d80:	4642      	mov	r2, r8
 8004d82:	464b      	mov	r3, r9
 8004d84:	1891      	adds	r1, r2, r2
 8004d86:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d88:	415b      	adcs	r3, r3
 8004d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d90:	4641      	mov	r1, r8
 8004d92:	1851      	adds	r1, r2, r1
 8004d94:	6339      	str	r1, [r7, #48]	; 0x30
 8004d96:	4649      	mov	r1, r9
 8004d98:	414b      	adcs	r3, r1
 8004d9a:	637b      	str	r3, [r7, #52]	; 0x34
 8004d9c:	f04f 0200 	mov.w	r2, #0
 8004da0:	f04f 0300 	mov.w	r3, #0
 8004da4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004da8:	4659      	mov	r1, fp
 8004daa:	00cb      	lsls	r3, r1, #3
 8004dac:	4651      	mov	r1, sl
 8004dae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004db2:	4651      	mov	r1, sl
 8004db4:	00ca      	lsls	r2, r1, #3
 8004db6:	4610      	mov	r0, r2
 8004db8:	4619      	mov	r1, r3
 8004dba:	4603      	mov	r3, r0
 8004dbc:	4642      	mov	r2, r8
 8004dbe:	189b      	adds	r3, r3, r2
 8004dc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004dc4:	464b      	mov	r3, r9
 8004dc6:	460a      	mov	r2, r1
 8004dc8:	eb42 0303 	adc.w	r3, r2, r3
 8004dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ddc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004de0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004de4:	460b      	mov	r3, r1
 8004de6:	18db      	adds	r3, r3, r3
 8004de8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dea:	4613      	mov	r3, r2
 8004dec:	eb42 0303 	adc.w	r3, r2, r3
 8004df0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004df2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004df6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004dfa:	f7fb fa03 	bl	8000204 <__aeabi_uldivmod>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	460b      	mov	r3, r1
 8004e02:	4b0d      	ldr	r3, [pc, #52]	; (8004e38 <UART_SetConfig+0x2d4>)
 8004e04:	fba3 1302 	umull	r1, r3, r3, r2
 8004e08:	095b      	lsrs	r3, r3, #5
 8004e0a:	2164      	movs	r1, #100	; 0x64
 8004e0c:	fb01 f303 	mul.w	r3, r1, r3
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	3332      	adds	r3, #50	; 0x32
 8004e16:	4a08      	ldr	r2, [pc, #32]	; (8004e38 <UART_SetConfig+0x2d4>)
 8004e18:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1c:	095b      	lsrs	r3, r3, #5
 8004e1e:	f003 0207 	and.w	r2, r3, #7
 8004e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4422      	add	r2, r4
 8004e2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e2c:	e106      	b.n	800503c <UART_SetConfig+0x4d8>
 8004e2e:	bf00      	nop
 8004e30:	40011000 	.word	0x40011000
 8004e34:	40011400 	.word	0x40011400
 8004e38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e40:	2200      	movs	r2, #0
 8004e42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e46:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e4e:	4642      	mov	r2, r8
 8004e50:	464b      	mov	r3, r9
 8004e52:	1891      	adds	r1, r2, r2
 8004e54:	6239      	str	r1, [r7, #32]
 8004e56:	415b      	adcs	r3, r3
 8004e58:	627b      	str	r3, [r7, #36]	; 0x24
 8004e5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e5e:	4641      	mov	r1, r8
 8004e60:	1854      	adds	r4, r2, r1
 8004e62:	4649      	mov	r1, r9
 8004e64:	eb43 0501 	adc.w	r5, r3, r1
 8004e68:	f04f 0200 	mov.w	r2, #0
 8004e6c:	f04f 0300 	mov.w	r3, #0
 8004e70:	00eb      	lsls	r3, r5, #3
 8004e72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e76:	00e2      	lsls	r2, r4, #3
 8004e78:	4614      	mov	r4, r2
 8004e7a:	461d      	mov	r5, r3
 8004e7c:	4643      	mov	r3, r8
 8004e7e:	18e3      	adds	r3, r4, r3
 8004e80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e84:	464b      	mov	r3, r9
 8004e86:	eb45 0303 	adc.w	r3, r5, r3
 8004e8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e9e:	f04f 0200 	mov.w	r2, #0
 8004ea2:	f04f 0300 	mov.w	r3, #0
 8004ea6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004eaa:	4629      	mov	r1, r5
 8004eac:	008b      	lsls	r3, r1, #2
 8004eae:	4621      	mov	r1, r4
 8004eb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eb4:	4621      	mov	r1, r4
 8004eb6:	008a      	lsls	r2, r1, #2
 8004eb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ebc:	f7fb f9a2 	bl	8000204 <__aeabi_uldivmod>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	4b60      	ldr	r3, [pc, #384]	; (8005048 <UART_SetConfig+0x4e4>)
 8004ec6:	fba3 2302 	umull	r2, r3, r3, r2
 8004eca:	095b      	lsrs	r3, r3, #5
 8004ecc:	011c      	lsls	r4, r3, #4
 8004ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ed8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004edc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ee0:	4642      	mov	r2, r8
 8004ee2:	464b      	mov	r3, r9
 8004ee4:	1891      	adds	r1, r2, r2
 8004ee6:	61b9      	str	r1, [r7, #24]
 8004ee8:	415b      	adcs	r3, r3
 8004eea:	61fb      	str	r3, [r7, #28]
 8004eec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ef0:	4641      	mov	r1, r8
 8004ef2:	1851      	adds	r1, r2, r1
 8004ef4:	6139      	str	r1, [r7, #16]
 8004ef6:	4649      	mov	r1, r9
 8004ef8:	414b      	adcs	r3, r1
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	f04f 0300 	mov.w	r3, #0
 8004f04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f08:	4659      	mov	r1, fp
 8004f0a:	00cb      	lsls	r3, r1, #3
 8004f0c:	4651      	mov	r1, sl
 8004f0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f12:	4651      	mov	r1, sl
 8004f14:	00ca      	lsls	r2, r1, #3
 8004f16:	4610      	mov	r0, r2
 8004f18:	4619      	mov	r1, r3
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	4642      	mov	r2, r8
 8004f1e:	189b      	adds	r3, r3, r2
 8004f20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f24:	464b      	mov	r3, r9
 8004f26:	460a      	mov	r2, r1
 8004f28:	eb42 0303 	adc.w	r3, r2, r3
 8004f2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f3a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f3c:	f04f 0200 	mov.w	r2, #0
 8004f40:	f04f 0300 	mov.w	r3, #0
 8004f44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f48:	4649      	mov	r1, r9
 8004f4a:	008b      	lsls	r3, r1, #2
 8004f4c:	4641      	mov	r1, r8
 8004f4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f52:	4641      	mov	r1, r8
 8004f54:	008a      	lsls	r2, r1, #2
 8004f56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f5a:	f7fb f953 	bl	8000204 <__aeabi_uldivmod>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	460b      	mov	r3, r1
 8004f62:	4611      	mov	r1, r2
 8004f64:	4b38      	ldr	r3, [pc, #224]	; (8005048 <UART_SetConfig+0x4e4>)
 8004f66:	fba3 2301 	umull	r2, r3, r3, r1
 8004f6a:	095b      	lsrs	r3, r3, #5
 8004f6c:	2264      	movs	r2, #100	; 0x64
 8004f6e:	fb02 f303 	mul.w	r3, r2, r3
 8004f72:	1acb      	subs	r3, r1, r3
 8004f74:	011b      	lsls	r3, r3, #4
 8004f76:	3332      	adds	r3, #50	; 0x32
 8004f78:	4a33      	ldr	r2, [pc, #204]	; (8005048 <UART_SetConfig+0x4e4>)
 8004f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7e:	095b      	lsrs	r3, r3, #5
 8004f80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f84:	441c      	add	r4, r3
 8004f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	673b      	str	r3, [r7, #112]	; 0x70
 8004f8e:	677a      	str	r2, [r7, #116]	; 0x74
 8004f90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f94:	4642      	mov	r2, r8
 8004f96:	464b      	mov	r3, r9
 8004f98:	1891      	adds	r1, r2, r2
 8004f9a:	60b9      	str	r1, [r7, #8]
 8004f9c:	415b      	adcs	r3, r3
 8004f9e:	60fb      	str	r3, [r7, #12]
 8004fa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fa4:	4641      	mov	r1, r8
 8004fa6:	1851      	adds	r1, r2, r1
 8004fa8:	6039      	str	r1, [r7, #0]
 8004faa:	4649      	mov	r1, r9
 8004fac:	414b      	adcs	r3, r1
 8004fae:	607b      	str	r3, [r7, #4]
 8004fb0:	f04f 0200 	mov.w	r2, #0
 8004fb4:	f04f 0300 	mov.w	r3, #0
 8004fb8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fbc:	4659      	mov	r1, fp
 8004fbe:	00cb      	lsls	r3, r1, #3
 8004fc0:	4651      	mov	r1, sl
 8004fc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fc6:	4651      	mov	r1, sl
 8004fc8:	00ca      	lsls	r2, r1, #3
 8004fca:	4610      	mov	r0, r2
 8004fcc:	4619      	mov	r1, r3
 8004fce:	4603      	mov	r3, r0
 8004fd0:	4642      	mov	r2, r8
 8004fd2:	189b      	adds	r3, r3, r2
 8004fd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fd6:	464b      	mov	r3, r9
 8004fd8:	460a      	mov	r2, r1
 8004fda:	eb42 0303 	adc.w	r3, r2, r3
 8004fde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	663b      	str	r3, [r7, #96]	; 0x60
 8004fea:	667a      	str	r2, [r7, #100]	; 0x64
 8004fec:	f04f 0200 	mov.w	r2, #0
 8004ff0:	f04f 0300 	mov.w	r3, #0
 8004ff4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ff8:	4649      	mov	r1, r9
 8004ffa:	008b      	lsls	r3, r1, #2
 8004ffc:	4641      	mov	r1, r8
 8004ffe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005002:	4641      	mov	r1, r8
 8005004:	008a      	lsls	r2, r1, #2
 8005006:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800500a:	f7fb f8fb 	bl	8000204 <__aeabi_uldivmod>
 800500e:	4602      	mov	r2, r0
 8005010:	460b      	mov	r3, r1
 8005012:	4b0d      	ldr	r3, [pc, #52]	; (8005048 <UART_SetConfig+0x4e4>)
 8005014:	fba3 1302 	umull	r1, r3, r3, r2
 8005018:	095b      	lsrs	r3, r3, #5
 800501a:	2164      	movs	r1, #100	; 0x64
 800501c:	fb01 f303 	mul.w	r3, r1, r3
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	011b      	lsls	r3, r3, #4
 8005024:	3332      	adds	r3, #50	; 0x32
 8005026:	4a08      	ldr	r2, [pc, #32]	; (8005048 <UART_SetConfig+0x4e4>)
 8005028:	fba2 2303 	umull	r2, r3, r2, r3
 800502c:	095b      	lsrs	r3, r3, #5
 800502e:	f003 020f 	and.w	r2, r3, #15
 8005032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4422      	add	r2, r4
 800503a:	609a      	str	r2, [r3, #8]
}
 800503c:	bf00      	nop
 800503e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005042:	46bd      	mov	sp, r7
 8005044:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005048:	51eb851f 	.word	0x51eb851f

0800504c <memset>:
 800504c:	4402      	add	r2, r0
 800504e:	4603      	mov	r3, r0
 8005050:	4293      	cmp	r3, r2
 8005052:	d100      	bne.n	8005056 <memset+0xa>
 8005054:	4770      	bx	lr
 8005056:	f803 1b01 	strb.w	r1, [r3], #1
 800505a:	e7f9      	b.n	8005050 <memset+0x4>

0800505c <__libc_init_array>:
 800505c:	b570      	push	{r4, r5, r6, lr}
 800505e:	4d0d      	ldr	r5, [pc, #52]	; (8005094 <__libc_init_array+0x38>)
 8005060:	4c0d      	ldr	r4, [pc, #52]	; (8005098 <__libc_init_array+0x3c>)
 8005062:	1b64      	subs	r4, r4, r5
 8005064:	10a4      	asrs	r4, r4, #2
 8005066:	2600      	movs	r6, #0
 8005068:	42a6      	cmp	r6, r4
 800506a:	d109      	bne.n	8005080 <__libc_init_array+0x24>
 800506c:	4d0b      	ldr	r5, [pc, #44]	; (800509c <__libc_init_array+0x40>)
 800506e:	4c0c      	ldr	r4, [pc, #48]	; (80050a0 <__libc_init_array+0x44>)
 8005070:	f000 f818 	bl	80050a4 <_init>
 8005074:	1b64      	subs	r4, r4, r5
 8005076:	10a4      	asrs	r4, r4, #2
 8005078:	2600      	movs	r6, #0
 800507a:	42a6      	cmp	r6, r4
 800507c:	d105      	bne.n	800508a <__libc_init_array+0x2e>
 800507e:	bd70      	pop	{r4, r5, r6, pc}
 8005080:	f855 3b04 	ldr.w	r3, [r5], #4
 8005084:	4798      	blx	r3
 8005086:	3601      	adds	r6, #1
 8005088:	e7ee      	b.n	8005068 <__libc_init_array+0xc>
 800508a:	f855 3b04 	ldr.w	r3, [r5], #4
 800508e:	4798      	blx	r3
 8005090:	3601      	adds	r6, #1
 8005092:	e7f2      	b.n	800507a <__libc_init_array+0x1e>
 8005094:	080050e4 	.word	0x080050e4
 8005098:	080050e4 	.word	0x080050e4
 800509c:	080050e4 	.word	0x080050e4
 80050a0:	080050e8 	.word	0x080050e8

080050a4 <_init>:
 80050a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a6:	bf00      	nop
 80050a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050aa:	bc08      	pop	{r3}
 80050ac:	469e      	mov	lr, r3
 80050ae:	4770      	bx	lr

080050b0 <_fini>:
 80050b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b2:	bf00      	nop
 80050b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050b6:	bc08      	pop	{r3}
 80050b8:	469e      	mov	lr, r3
 80050ba:	4770      	bx	lr
