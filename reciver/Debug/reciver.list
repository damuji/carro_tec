
reciver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f9c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005160  08005160  00015160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005178  08005178  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005178  08005178  00015178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005180  08005180  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005180  08005180  00015180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005184  08005184  00015184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000010  08005198  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08005198  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012fa5  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027f4  00000000  00000000  00033028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001198  00000000  00000000  00035820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dec  00000000  00000000  000369b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022633  00000000  00000000  000377a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000161d8  00000000  00000000  00059dd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc1e7  00000000  00000000  0006ffaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b24  00000000  00000000  0014c198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00150cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005148 	.word	0x08005148

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08005148 	.word	0x08005148

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_TIM_PeriodElapsedCallback>:

extern uint32_t valores[2];
char selecionado =0;
extern uint8_t datos[5];
extern char flag;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ // completar
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	if (htim == &htim10){
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4a3b      	ldr	r2, [pc, #236]	; (80005f8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d16e      	bne.n	80005ee <HAL_TIM_PeriodElapsedCallback+0xee>
		setPedal(valores[1]);
 8000510:	4b3a      	ldr	r3, [pc, #232]	; (80005fc <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	4618      	mov	r0, r3
 8000516:	f000 f87d 	bl	8000614 <setPedal>
		setVolante(valores[0]);
 800051a:	4b38      	ldr	r3, [pc, #224]	; (80005fc <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4618      	mov	r0, r3
 8000520:	f000 f8b6 	bl	8000690 <setVolante>




		if (flag){
 8000524:	4b36      	ldr	r3, [pc, #216]	; (8000600 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d057      	beq.n	80005dc <HAL_TIM_PeriodElapsedCallback+0xdc>
		switch(selecionado){
 800052c:	4b35      	ldr	r3, [pc, #212]	; (8000604 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b02      	cmp	r3, #2
 8000532:	d036      	beq.n	80005a2 <HAL_TIM_PeriodElapsedCallback+0xa2>
 8000534:	2b02      	cmp	r3, #2
 8000536:	dc4e      	bgt.n	80005d6 <HAL_TIM_PeriodElapsedCallback+0xd6>
 8000538:	2b00      	cmp	r3, #0
 800053a:	d002      	beq.n	8000542 <HAL_TIM_PeriodElapsedCallback+0x42>
 800053c:	2b01      	cmp	r3, #1
 800053e:	d01a      	beq.n	8000576 <HAL_TIM_PeriodElapsedCallback+0x76>
 8000540:	e049      	b.n	80005d6 <HAL_TIM_PeriodElapsedCallback+0xd6>
		case 0:
			datos[0] = 0;
 8000542:	4b31      	ldr	r3, [pc, #196]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000544:	2200      	movs	r2, #0
 8000546:	701a      	strb	r2, [r3, #0]
			datos[1] = (getPedal() >> 8) ;
 8000548:	f000 f874 	bl	8000634 <getPedal>
 800054c:	4603      	mov	r3, r0
 800054e:	121b      	asrs	r3, r3, #8
 8000550:	b2da      	uxtb	r2, r3
 8000552:	4b2d      	ldr	r3, [pc, #180]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000554:	705a      	strb	r2, [r3, #1]
			datos[2] = getPedal() ;
 8000556:	f000 f86d 	bl	8000634 <getPedal>
 800055a:	4603      	mov	r3, r0
 800055c:	b2da      	uxtb	r2, r3
 800055e:	4b2a      	ldr	r3, [pc, #168]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000560:	709a      	strb	r2, [r3, #2]
			datos[3] = 'o';
 8000562:	4b29      	ldr	r3, [pc, #164]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000564:	226f      	movs	r2, #111	; 0x6f
 8000566:	70da      	strb	r2, [r3, #3]
			datos[4] = 'k';
 8000568:	4b27      	ldr	r3, [pc, #156]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800056a:	226b      	movs	r2, #107	; 0x6b
 800056c:	711a      	strb	r2, [r3, #4]
			selecionado = 1;
 800056e:	4b25      	ldr	r3, [pc, #148]	; (8000604 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000570:	2201      	movs	r2, #1
 8000572:	701a      	strb	r2, [r3, #0]
			break;
 8000574:	e02f      	b.n	80005d6 <HAL_TIM_PeriodElapsedCallback+0xd6>
		case 1:
			datos[0] = 1;
 8000576:	4b24      	ldr	r3, [pc, #144]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000578:	2201      	movs	r2, #1
 800057a:	701a      	strb	r2, [r3, #0]
			datos[1] = 0;
 800057c:	4b22      	ldr	r3, [pc, #136]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800057e:	2200      	movs	r2, #0
 8000580:	705a      	strb	r2, [r3, #1]
			datos[2] =  getCambio();
 8000582:	f000 f895 	bl	80006b0 <getCambio>
 8000586:	4603      	mov	r3, r0
 8000588:	461a      	mov	r2, r3
 800058a:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800058c:	709a      	strb	r2, [r3, #2]
			datos[3] = 'o';
 800058e:	4b1e      	ldr	r3, [pc, #120]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000590:	226f      	movs	r2, #111	; 0x6f
 8000592:	70da      	strb	r2, [r3, #3]
			datos[4] = 'k';
 8000594:	4b1c      	ldr	r3, [pc, #112]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000596:	226b      	movs	r2, #107	; 0x6b
 8000598:	711a      	strb	r2, [r3, #4]
			selecionado = 2;
 800059a:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800059c:	2202      	movs	r2, #2
 800059e:	701a      	strb	r2, [r3, #0]
			break;
 80005a0:	e019      	b.n	80005d6 <HAL_TIM_PeriodElapsedCallback+0xd6>
		case 2:
			datos[0] = 2;
 80005a2:	4b19      	ldr	r3, [pc, #100]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80005a4:	2202      	movs	r2, #2
 80005a6:	701a      	strb	r2, [r3, #0]
			datos[1] = (getAngulo() >> 8);
 80005a8:	f000 f866 	bl	8000678 <getAngulo>
 80005ac:	4603      	mov	r3, r0
 80005ae:	121b      	asrs	r3, r3, #8
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	4b15      	ldr	r3, [pc, #84]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80005b4:	705a      	strb	r2, [r3, #1]
			datos[2] =  getAngulo();
 80005b6:	f000 f85f 	bl	8000678 <getAngulo>
 80005ba:	4603      	mov	r3, r0
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	4b12      	ldr	r3, [pc, #72]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80005c0:	709a      	strb	r2, [r3, #2]
			datos[3] = 'o';
 80005c2:	4b11      	ldr	r3, [pc, #68]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80005c4:	226f      	movs	r2, #111	; 0x6f
 80005c6:	70da      	strb	r2, [r3, #3]
			datos[4] = 'k';
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80005ca:	226b      	movs	r2, #107	; 0x6b
 80005cc:	711a      	strb	r2, [r3, #4]
			selecionado = 0;
 80005ce:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
			break;
 80005d4:	bf00      	nop
		}
		flag =0;
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
		//HAL_UART_Transmit_IT(&huart4, datos,5);

		}

		HAL_TIM_Base_Start_IT(&htim10);
 80005dc:	4806      	ldr	r0, [pc, #24]	; (80005f8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80005de:	f002 fe75 	bl	80032cc <HAL_TIM_Base_Start_IT>
		HAL_ADC_Start_IT(&hadc1);
 80005e2:	480a      	ldr	r0, [pc, #40]	; (800060c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80005e4:	f000 ff76 	bl	80014d4 <HAL_ADC_Start_IT>
		HAL_ADC_Start_IT(&hadc2);
 80005e8:	4809      	ldr	r0, [pc, #36]	; (8000610 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80005ea:	f000 ff73 	bl	80014d4 <HAL_ADC_Start_IT>


	}


}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	200001b4 	.word	0x200001b4
 80005fc:	2000028c 	.word	0x2000028c
 8000600:	20000000 	.word	0x20000000
 8000604:	2000002c 	.word	0x2000002c
 8000608:	20000284 	.word	0x20000284
 800060c:	20000040 	.word	0x20000040
 8000610:	20000088 	.word	0x20000088

08000614 <setPedal>:
int pedal =0;
int angulo =0;
int volante =0;
char cambio =0;

void setPedal(int valor){
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	pedal = valor;
 800061c:	4a04      	ldr	r2, [pc, #16]	; (8000630 <setPedal+0x1c>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6013      	str	r3, [r2, #0]
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	20000030 	.word	0x20000030

08000634 <getPedal>:
int getPedal(){
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
	return pedal;
 8000638:	4b03      	ldr	r3, [pc, #12]	; (8000648 <getPedal+0x14>)
 800063a:	681b      	ldr	r3, [r3, #0]
}
 800063c:	4618      	mov	r0, r3
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20000030 	.word	0x20000030

0800064c <setAngulo>:



void setAngulo(int valor){
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	angulo = 239*valor + 796;
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	4613      	mov	r3, r2
 8000658:	011b      	lsls	r3, r3, #4
 800065a:	1a9b      	subs	r3, r3, r2
 800065c:	011b      	lsls	r3, r3, #4
 800065e:	1a9b      	subs	r3, r3, r2
 8000660:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8000664:	4a03      	ldr	r2, [pc, #12]	; (8000674 <setAngulo+0x28>)
 8000666:	6013      	str	r3, [r2, #0]
}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	20000034 	.word	0x20000034

08000678 <getAngulo>:
int getAngulo(){
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
	return angulo;
 800067c:	4b03      	ldr	r3, [pc, #12]	; (800068c <getAngulo+0x14>)
 800067e:	681b      	ldr	r3, [r3, #0]
}
 8000680:	4618      	mov	r0, r3
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	20000034 	.word	0x20000034

08000690 <setVolante>:



void setVolante(int valor){
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	volante = valor;
 8000698:	4a04      	ldr	r2, [pc, #16]	; (80006ac <setVolante+0x1c>)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	6013      	str	r3, [r2, #0]
}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	20000038 	.word	0x20000038

080006b0 <getCambio>:


void setCambio(int valor){
	cambio = valor;
}
char getCambio(){
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
	return cambio;
 80006b4:	4b03      	ldr	r3, [pc, #12]	; (80006c4 <getCambio+0x14>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	2000003c 	.word	0x2000003c

080006c8 <HAL_UART_TxCpltCallback>:
/* USER CODE BEGIN 0 */
int adc_val ;
uint8_t datos[5] ;
uint32_t valores[2] = {0,0};
char flag =1;
void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart){
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	flag =1;
 80006d0:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <HAL_UART_TxCpltCallback+0x1c>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	701a      	strb	r2, [r3, #0]
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	20000000 	.word	0x20000000

080006e8 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	 setAngulo(__HAL_TIM_GET_COUNTER(htim));
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff ffa8 	bl	800064c <setAngulo>
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  if (hadc==&hadc1){
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4a0b      	ldr	r2, [pc, #44]	; (800073c <HAL_ADC_ConvCpltCallback+0x38>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d105      	bne.n	8000720 <HAL_ADC_ConvCpltCallback+0x1c>
	  valores[0] = HAL_ADC_GetValue(&hadc1);
 8000714:	4809      	ldr	r0, [pc, #36]	; (800073c <HAL_ADC_ConvCpltCallback+0x38>)
 8000716:	f001 f8cb 	bl	80018b0 <HAL_ADC_GetValue>
 800071a:	4603      	mov	r3, r0
 800071c:	4a08      	ldr	r2, [pc, #32]	; (8000740 <HAL_ADC_ConvCpltCallback+0x3c>)
 800071e:	6013      	str	r3, [r2, #0]

  }
  if (hadc==&hadc1){
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4a06      	ldr	r2, [pc, #24]	; (800073c <HAL_ADC_ConvCpltCallback+0x38>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d105      	bne.n	8000734 <HAL_ADC_ConvCpltCallback+0x30>
	  valores[1] = HAL_ADC_GetValue(&hadc2);
 8000728:	4806      	ldr	r0, [pc, #24]	; (8000744 <HAL_ADC_ConvCpltCallback+0x40>)
 800072a:	f001 f8c1 	bl	80018b0 <HAL_ADC_GetValue>
 800072e:	4603      	mov	r3, r0
 8000730:	4a03      	ldr	r2, [pc, #12]	; (8000740 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000732:	6053      	str	r3, [r2, #4]

  }
  /*If continuousconversion mode is DISABLED uncomment below*/
  //HAL_ADC_Start_IT (&hadc1);
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000040 	.word	0x20000040
 8000740:	2000028c 	.word	0x2000028c
 8000744:	20000088 	.word	0x20000088

08000748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074c:	f000 fe0c 	bl	8001368 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000750:	f000 f828 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000754:	f000 fae8 	bl	8000d28 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000758:	f000 fabc 	bl	8000cd4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800075c:	f000 fa18 	bl	8000b90 <MX_TIM2_Init>
  MX_UART4_Init();
 8000760:	f000 fa8e 	bl	8000c80 <MX_UART4_Init>
  MX_ADC1_Init();
 8000764:	f000 f88c 	bl	8000880 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000768:	f000 f92e 	bl	80009c8 <MX_I2C1_Init>
  MX_TIM1_Init();
 800076c:	f000 f95a 	bl	8000a24 <MX_TIM1_Init>
  MX_TIM10_Init();
 8000770:	f000 fa62 	bl	8000c38 <MX_TIM10_Init>
  MX_ADC2_Init();
 8000774:	f000 f8d6 	bl	8000924 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */


  HAL_ADC_Start_IT(&hadc1);
 8000778:	4806      	ldr	r0, [pc, #24]	; (8000794 <main+0x4c>)
 800077a:	f000 feab 	bl	80014d4 <HAL_ADC_Start_IT>
  HAL_ADC_Start_IT (&hadc2);
 800077e:	4806      	ldr	r0, [pc, #24]	; (8000798 <main+0x50>)
 8000780:	f000 fea8 	bl	80014d4 <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10); //timer para mandar datos
 8000784:	4805      	ldr	r0, [pc, #20]	; (800079c <main+0x54>)
 8000786:	f002 fda1 	bl	80032cc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 800078a:	213c      	movs	r1, #60	; 0x3c
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <main+0x58>)
 800078e:	f002 ff5b 	bl	8003648 <HAL_TIM_Encoder_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000792:	e7fe      	b.n	8000792 <main+0x4a>
 8000794:	20000040 	.word	0x20000040
 8000798:	20000088 	.word	0x20000088
 800079c:	200001b4 	.word	0x200001b4
 80007a0:	2000016c 	.word	0x2000016c

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b094      	sub	sp, #80	; 0x50
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	2234      	movs	r2, #52	; 0x34
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f004 fc9c 	bl	80050f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	f107 0308 	add.w	r3, r7, #8
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c8:	2300      	movs	r3, #0
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	4b2a      	ldr	r3, [pc, #168]	; (8000878 <SystemClock_Config+0xd4>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	4a29      	ldr	r2, [pc, #164]	; (8000878 <SystemClock_Config+0xd4>)
 80007d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d6:	6413      	str	r3, [r2, #64]	; 0x40
 80007d8:	4b27      	ldr	r3, [pc, #156]	; (8000878 <SystemClock_Config+0xd4>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007e4:	2300      	movs	r3, #0
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	4b24      	ldr	r3, [pc, #144]	; (800087c <SystemClock_Config+0xd8>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007f0:	4a22      	ldr	r2, [pc, #136]	; (800087c <SystemClock_Config+0xd8>)
 80007f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f6:	6013      	str	r3, [r2, #0]
 80007f8:	4b20      	ldr	r3, [pc, #128]	; (800087c <SystemClock_Config+0xd8>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000804:	2302      	movs	r3, #2
 8000806:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000808:	2301      	movs	r3, #1
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800080c:	2310      	movs	r3, #16
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000810:	2302      	movs	r3, #2
 8000812:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000814:	2300      	movs	r3, #0
 8000816:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000818:	2310      	movs	r3, #16
 800081a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800081c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000820:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000822:	2304      	movs	r3, #4
 8000824:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000826:	2302      	movs	r3, #2
 8000828:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800082a:	2302      	movs	r3, #2
 800082c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4618      	mov	r0, r3
 8000834:	f002 fa5c 	bl	8002cf0 <HAL_RCC_OscConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800083e:	f000 fab7 	bl	8000db0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000842:	230f      	movs	r3, #15
 8000844:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000846:	2302      	movs	r3, #2
 8000848:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800084e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000852:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000858:	f107 0308 	add.w	r3, r7, #8
 800085c:	2102      	movs	r1, #2
 800085e:	4618      	mov	r0, r3
 8000860:	f001 fefc 	bl	800265c <HAL_RCC_ClockConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800086a:	f000 faa1 	bl	8000db0 <Error_Handler>
  }
}
 800086e:	bf00      	nop
 8000870:	3750      	adds	r7, #80	; 0x50
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800
 800087c:	40007000 	.word	0x40007000

08000880 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000886:	463b      	mov	r3, r7
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000892:	4b21      	ldr	r3, [pc, #132]	; (8000918 <MX_ADC1_Init+0x98>)
 8000894:	4a21      	ldr	r2, [pc, #132]	; (800091c <MX_ADC1_Init+0x9c>)
 8000896:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000898:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <MX_ADC1_Init+0x98>)
 800089a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800089e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008a0:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <MX_ADC1_Init+0x98>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <MX_ADC1_Init+0x98>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <MX_ADC1_Init+0x98>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008b2:	4b19      	ldr	r3, [pc, #100]	; (8000918 <MX_ADC1_Init+0x98>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <MX_ADC1_Init+0x98>)
 80008bc:	2200      	movs	r2, #0
 80008be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <MX_ADC1_Init+0x98>)
 80008c2:	4a17      	ldr	r2, [pc, #92]	; (8000920 <MX_ADC1_Init+0xa0>)
 80008c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_ADC1_Init+0x98>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_ADC1_Init+0x98>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_ADC1_Init+0x98>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_ADC1_Init+0x98>)
 80008dc:	2201      	movs	r2, #1
 80008de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008e0:	480d      	ldr	r0, [pc, #52]	; (8000918 <MX_ADC1_Init+0x98>)
 80008e2:	f000 fdb3 	bl	800144c <HAL_ADC_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008ec:	f000 fa60 	bl	8000db0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80008f0:	2305      	movs	r3, #5
 80008f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008f4:	2301      	movs	r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008fc:	463b      	mov	r3, r7
 80008fe:	4619      	mov	r1, r3
 8000900:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_ADC1_Init+0x98>)
 8000902:	f000 fff7 	bl	80018f4 <HAL_ADC_ConfigChannel>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800090c:	f000 fa50 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000040 	.word	0x20000040
 800091c:	40012000 	.word	0x40012000
 8000920:	0f000001 	.word	0x0f000001

08000924 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800092a:	463b      	mov	r3, r7
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000936:	4b21      	ldr	r3, [pc, #132]	; (80009bc <MX_ADC2_Init+0x98>)
 8000938:	4a21      	ldr	r2, [pc, #132]	; (80009c0 <MX_ADC2_Init+0x9c>)
 800093a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800093c:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <MX_ADC2_Init+0x98>)
 800093e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000942:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000944:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <MX_ADC2_Init+0x98>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800094a:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <MX_ADC2_Init+0x98>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000950:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <MX_ADC2_Init+0x98>)
 8000952:	2200      	movs	r2, #0
 8000954:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <MX_ADC2_Init+0x98>)
 8000958:	2200      	movs	r2, #0
 800095a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <MX_ADC2_Init+0x98>)
 8000960:	2200      	movs	r2, #0
 8000962:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000964:	4b15      	ldr	r3, [pc, #84]	; (80009bc <MX_ADC2_Init+0x98>)
 8000966:	4a17      	ldr	r2, [pc, #92]	; (80009c4 <MX_ADC2_Init+0xa0>)
 8000968:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_ADC2_Init+0x98>)
 800096c:	2200      	movs	r2, #0
 800096e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MX_ADC2_Init+0x98>)
 8000972:	2201      	movs	r2, #1
 8000974:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_ADC2_Init+0x98>)
 8000978:	2200      	movs	r2, #0
 800097a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_ADC2_Init+0x98>)
 8000980:	2201      	movs	r2, #1
 8000982:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000984:	480d      	ldr	r0, [pc, #52]	; (80009bc <MX_ADC2_Init+0x98>)
 8000986:	f000 fd61 	bl	800144c <HAL_ADC_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000990:	f000 fa0e 	bl	8000db0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000994:	2304      	movs	r3, #4
 8000996:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000998:	2301      	movs	r3, #1
 800099a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009a0:	463b      	mov	r3, r7
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_ADC2_Init+0x98>)
 80009a6:	f000 ffa5 	bl	80018f4 <HAL_ADC_ConfigChannel>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80009b0:	f000 f9fe 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	3710      	adds	r7, #16
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000088 	.word	0x20000088
 80009c0:	40012100 	.word	0x40012100
 80009c4:	0f000001 	.word	0x0f000001

080009c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <MX_I2C1_Init+0x50>)
 80009ce:	4a13      	ldr	r2, [pc, #76]	; (8000a1c <MX_I2C1_Init+0x54>)
 80009d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <MX_I2C1_Init+0x50>)
 80009d4:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <MX_I2C1_Init+0x58>)
 80009d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_I2C1_Init+0x50>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_I2C1_Init+0x50>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <MX_I2C1_Init+0x50>)
 80009e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009ec:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <MX_I2C1_Init+0x50>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_I2C1_Init+0x50>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009f8:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <MX_I2C1_Init+0x50>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_I2C1_Init+0x50>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a04:	4804      	ldr	r0, [pc, #16]	; (8000a18 <MX_I2C1_Init+0x50>)
 8000a06:	f001 fce5 	bl	80023d4 <HAL_I2C_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a10:	f000 f9ce 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	200000d0 	.word	0x200000d0
 8000a1c:	40005400 	.word	0x40005400
 8000a20:	000186a0 	.word	0x000186a0

08000a24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b092      	sub	sp, #72	; 0x48
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
 8000a44:	615a      	str	r2, [r3, #20]
 8000a46:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	2220      	movs	r2, #32
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f004 fb4e 	bl	80050f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a54:	4b4c      	ldr	r3, [pc, #304]	; (8000b88 <MX_TIM1_Init+0x164>)
 8000a56:	4a4d      	ldr	r2, [pc, #308]	; (8000b8c <MX_TIM1_Init+0x168>)
 8000a58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8399;
 8000a5a:	4b4b      	ldr	r3, [pc, #300]	; (8000b88 <MX_TIM1_Init+0x164>)
 8000a5c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000a60:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a62:	4b49      	ldr	r3, [pc, #292]	; (8000b88 <MX_TIM1_Init+0x164>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a68:	4b47      	ldr	r3, [pc, #284]	; (8000b88 <MX_TIM1_Init+0x164>)
 8000a6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a6e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a70:	4b45      	ldr	r3, [pc, #276]	; (8000b88 <MX_TIM1_Init+0x164>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a76:	4b44      	ldr	r3, [pc, #272]	; (8000b88 <MX_TIM1_Init+0x164>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7c:	4b42      	ldr	r3, [pc, #264]	; (8000b88 <MX_TIM1_Init+0x164>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a82:	4841      	ldr	r0, [pc, #260]	; (8000b88 <MX_TIM1_Init+0x164>)
 8000a84:	f002 fceb 	bl	800345e <HAL_TIM_PWM_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000a8e:	f000 f98f 	bl	8000db0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000a92:	483d      	ldr	r0, [pc, #244]	; (8000b88 <MX_TIM1_Init+0x164>)
 8000a94:	f002 fc8a 	bl	80033ac <HAL_TIM_OC_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000a9e:	f000 f987 	bl	8000db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aaa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4835      	ldr	r0, [pc, #212]	; (8000b88 <MX_TIM1_Init+0x164>)
 8000ab2:	f003 fb31 	bl	8004118 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000abc:	f000 f978 	bl	8000db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac0:	2360      	movs	r3, #96	; 0x60
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000acc:	2300      	movs	r3, #0
 8000ace:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4828      	ldr	r0, [pc, #160]	; (8000b88 <MX_TIM1_Init+0x164>)
 8000ae6:	f002 ffc1 	bl	8003a6c <HAL_TIM_PWM_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000af0:	f000 f95e 	bl	8000db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afc:	2204      	movs	r2, #4
 8000afe:	4619      	mov	r1, r3
 8000b00:	4821      	ldr	r0, [pc, #132]	; (8000b88 <MX_TIM1_Init+0x164>)
 8000b02:	f002 ff57 	bl	80039b4 <HAL_TIM_OC_ConfigChannel>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000b0c:	f000 f950 	bl	8000db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b10:	2360      	movs	r3, #96	; 0x60
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b18:	2208      	movs	r2, #8
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	481a      	ldr	r0, [pc, #104]	; (8000b88 <MX_TIM1_Init+0x164>)
 8000b1e:	f002 ffa5 	bl	8003a6c <HAL_TIM_PWM_ConfigChannel>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000b28:	f000 f942 	bl	8000db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b34:	220c      	movs	r2, #12
 8000b36:	4619      	mov	r1, r3
 8000b38:	4813      	ldr	r0, [pc, #76]	; (8000b88 <MX_TIM1_Init+0x164>)
 8000b3a:	f002 ff3b 	bl	80039b4 <HAL_TIM_OC_ConfigChannel>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8000b44:	f000 f934 	bl	8000db0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b60:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4807      	ldr	r0, [pc, #28]	; (8000b88 <MX_TIM1_Init+0x164>)
 8000b6c:	f003 fb50 	bl	8004210 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 8000b76:	f000 f91b 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b7a:	4803      	ldr	r0, [pc, #12]	; (8000b88 <MX_TIM1_Init+0x164>)
 8000b7c:	f000 faa8 	bl	80010d0 <HAL_TIM_MspPostInit>

}
 8000b80:	bf00      	nop
 8000b82:	3748      	adds	r7, #72	; 0x48
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000124 	.word	0x20000124
 8000b8c:	40010000 	.word	0x40010000

08000b90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08c      	sub	sp, #48	; 0x30
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b96:	f107 030c 	add.w	r3, r7, #12
 8000b9a:	2224      	movs	r2, #36	; 0x24
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f004 faa6 	bl	80050f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bac:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <MX_TIM2_Init+0xa4>)
 8000bae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bb2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <MX_TIM2_Init+0xa4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bba:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <MX_TIM2_Init+0xa4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <MX_TIM2_Init+0xa4>)
 8000bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <MX_TIM2_Init+0xa4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bce:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <MX_TIM2_Init+0xa4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000be8:	2300      	movs	r3, #0
 8000bea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bec:	2301      	movs	r3, #1
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000bf8:	f107 030c 	add.w	r3, r7, #12
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	480d      	ldr	r0, [pc, #52]	; (8000c34 <MX_TIM2_Init+0xa4>)
 8000c00:	f002 fc7c 	bl	80034fc <HAL_TIM_Encoder_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000c0a:	f000 f8d1 	bl	8000db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4806      	ldr	r0, [pc, #24]	; (8000c34 <MX_TIM2_Init+0xa4>)
 8000c1c:	f003 fa7c 	bl	8004118 <HAL_TIMEx_MasterConfigSynchronization>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000c26:	f000 f8c3 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	3730      	adds	r7, #48	; 0x30
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	2000016c 	.word	0x2000016c

08000c38 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000c3c:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <MX_TIM10_Init+0x40>)
 8000c3e:	4a0f      	ldr	r2, [pc, #60]	; (8000c7c <MX_TIM10_Init+0x44>)
 8000c40:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8399;
 8000c42:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <MX_TIM10_Init+0x40>)
 8000c44:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000c48:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <MX_TIM10_Init+0x40>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 250;
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <MX_TIM10_Init+0x40>)
 8000c52:	22fa      	movs	r2, #250	; 0xfa
 8000c54:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <MX_TIM10_Init+0x40>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <MX_TIM10_Init+0x40>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_TIM10_Init+0x40>)
 8000c64:	f002 fae2 	bl	800322c <HAL_TIM_Base_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000c6e:	f000 f89f 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200001b4 	.word	0x200001b4
 8000c7c:	40014400 	.word	0x40014400

08000c80 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <MX_UART4_Init+0x4c>)
 8000c86:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <MX_UART4_Init+0x50>)
 8000c88:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <MX_UART4_Init+0x4c>)
 8000c8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c90:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <MX_UART4_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <MX_UART4_Init+0x4c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <MX_UART4_Init+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ca4:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_UART4_Init+0x4c>)
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <MX_UART4_Init+0x4c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <MX_UART4_Init+0x4c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000cb6:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_UART4_Init+0x4c>)
 8000cb8:	f003 fb10 	bl	80042dc <HAL_UART_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000cc2:	f000 f875 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200001fc 	.word	0x200001fc
 8000cd0:	40004c00 	.word	0x40004c00

08000cd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000cda:	4a12      	ldr	r2, [pc, #72]	; (8000d24 <MX_USART2_UART_Init+0x50>)
 8000cdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000ce0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ce4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cf8:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfe:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d0a:	4805      	ldr	r0, [pc, #20]	; (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000d0c:	f003 fae6 	bl	80042dc <HAL_UART_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d16:	f000 f84b 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000240 	.word	0x20000240
 8000d24:	40004400 	.word	0x40004400

08000d28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <MX_GPIO_Init+0x84>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a1d      	ldr	r2, [pc, #116]	; (8000dac <MX_GPIO_Init+0x84>)
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <MX_GPIO_Init+0x84>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	4b17      	ldr	r3, [pc, #92]	; (8000dac <MX_GPIO_Init+0x84>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a16      	ldr	r2, [pc, #88]	; (8000dac <MX_GPIO_Init+0x84>)
 8000d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <MX_GPIO_Init+0x84>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <MX_GPIO_Init+0x84>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a0f      	ldr	r2, [pc, #60]	; (8000dac <MX_GPIO_Init+0x84>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <MX_GPIO_Init+0x84>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	603b      	str	r3, [r7, #0]
 8000d86:	4b09      	ldr	r3, [pc, #36]	; (8000dac <MX_GPIO_Init+0x84>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a08      	ldr	r2, [pc, #32]	; (8000dac <MX_GPIO_Init+0x84>)
 8000d8c:	f043 0302 	orr.w	r3, r3, #2
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <MX_GPIO_Init+0x84>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	603b      	str	r3, [r7, #0]
 8000d9c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d9e:	bf00      	nop
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	40023800 	.word	0x40023800

08000db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db4:	b672      	cpsid	i
}
 8000db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <Error_Handler+0x8>
	...

08000dbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <HAL_MspInit+0x4c>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	4a0f      	ldr	r2, [pc, #60]	; (8000e08 <HAL_MspInit+0x4c>)
 8000dcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <HAL_MspInit+0x4c>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	603b      	str	r3, [r7, #0]
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <HAL_MspInit+0x4c>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	4a08      	ldr	r2, [pc, #32]	; (8000e08 <HAL_MspInit+0x4c>)
 8000de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dec:	6413      	str	r3, [r2, #64]	; 0x40
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_MspInit+0x4c>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dfa:	2007      	movs	r0, #7
 8000dfc:	f001 f882 	bl	8001f04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40023800 	.word	0x40023800

08000e0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08c      	sub	sp, #48	; 0x30
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a36      	ldr	r2, [pc, #216]	; (8000f04 <HAL_ADC_MspInit+0xf8>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d130      	bne.n	8000e90 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
 8000e32:	4b35      	ldr	r3, [pc, #212]	; (8000f08 <HAL_ADC_MspInit+0xfc>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	4a34      	ldr	r2, [pc, #208]	; (8000f08 <HAL_ADC_MspInit+0xfc>)
 8000e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3e:	4b32      	ldr	r3, [pc, #200]	; (8000f08 <HAL_ADC_MspInit+0xfc>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e46:	61bb      	str	r3, [r7, #24]
 8000e48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	4b2e      	ldr	r3, [pc, #184]	; (8000f08 <HAL_ADC_MspInit+0xfc>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a2d      	ldr	r2, [pc, #180]	; (8000f08 <HAL_ADC_MspInit+0xfc>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b2b      	ldr	r3, [pc, #172]	; (8000f08 <HAL_ADC_MspInit+0xfc>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e66:	2330      	movs	r3, #48	; 0x30
 8000e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e72:	f107 031c 	add.w	r3, r7, #28
 8000e76:	4619      	mov	r1, r3
 8000e78:	4824      	ldr	r0, [pc, #144]	; (8000f0c <HAL_ADC_MspInit+0x100>)
 8000e7a:	f001 f917 	bl	80020ac <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 1);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2100      	movs	r1, #0
 8000e82:	2012      	movs	r0, #18
 8000e84:	f001 f849 	bl	8001f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000e88:	2012      	movs	r0, #18
 8000e8a:	f001 f862 	bl	8001f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000e8e:	e034      	b.n	8000efa <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC2)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a1e      	ldr	r2, [pc, #120]	; (8000f10 <HAL_ADC_MspInit+0x104>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d12f      	bne.n	8000efa <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	4b1a      	ldr	r3, [pc, #104]	; (8000f08 <HAL_ADC_MspInit+0xfc>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	4a19      	ldr	r2, [pc, #100]	; (8000f08 <HAL_ADC_MspInit+0xfc>)
 8000ea4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eaa:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <HAL_ADC_MspInit+0xfc>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <HAL_ADC_MspInit+0xfc>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <HAL_ADC_MspInit+0xfc>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <HAL_ADC_MspInit+0xfc>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ed2:	2310      	movs	r3, #16
 8000ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4809      	ldr	r0, [pc, #36]	; (8000f0c <HAL_ADC_MspInit+0x100>)
 8000ee6:	f001 f8e1 	bl	80020ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 1);
 8000eea:	2201      	movs	r2, #1
 8000eec:	2100      	movs	r1, #0
 8000eee:	2012      	movs	r0, #18
 8000ef0:	f001 f813 	bl	8001f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000ef4:	2012      	movs	r0, #18
 8000ef6:	f001 f82c 	bl	8001f52 <HAL_NVIC_EnableIRQ>
}
 8000efa:	bf00      	nop
 8000efc:	3730      	adds	r7, #48	; 0x30
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40012000 	.word	0x40012000
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	40012100 	.word	0x40012100

08000f14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a19      	ldr	r2, [pc, #100]	; (8000f98 <HAL_I2C_MspInit+0x84>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d12b      	bne.n	8000f8e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <HAL_I2C_MspInit+0x88>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a17      	ldr	r2, [pc, #92]	; (8000f9c <HAL_I2C_MspInit+0x88>)
 8000f40:	f043 0302 	orr.w	r3, r3, #2
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <HAL_I2C_MspInit+0x88>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f52:	23c0      	movs	r3, #192	; 0xc0
 8000f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f56:	2312      	movs	r3, #18
 8000f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f62:	2304      	movs	r3, #4
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	480c      	ldr	r0, [pc, #48]	; (8000fa0 <HAL_I2C_MspInit+0x8c>)
 8000f6e:	f001 f89d 	bl	80020ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <HAL_I2C_MspInit+0x88>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	4a08      	ldr	r2, [pc, #32]	; (8000f9c <HAL_I2C_MspInit+0x88>)
 8000f7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f80:	6413      	str	r3, [r2, #64]	; 0x40
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_I2C_MspInit+0x88>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f8e:	bf00      	nop
 8000f90:	3728      	adds	r7, #40	; 0x28
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40005400 	.word	0x40005400
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020400 	.word	0x40020400

08000fa4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <HAL_TIM_PWM_MspInit+0x48>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d115      	bne.n	8000fe2 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <HAL_TIM_PWM_MspInit+0x4c>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	4a0c      	ldr	r2, [pc, #48]	; (8000ff0 <HAL_TIM_PWM_MspInit+0x4c>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_TIM_PWM_MspInit+0x4c>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2019      	movs	r0, #25
 8000fd8:	f000 ff9f 	bl	8001f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000fdc:	2019      	movs	r0, #25
 8000fde:	f000 ffb8 	bl	8001f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40010000 	.word	0x40010000
 8000ff0:	40023800 	.word	0x40023800

08000ff4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001014:	d12b      	bne.n	800106e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	4b17      	ldr	r3, [pc, #92]	; (8001078 <HAL_TIM_Encoder_MspInit+0x84>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	4a16      	ldr	r2, [pc, #88]	; (8001078 <HAL_TIM_Encoder_MspInit+0x84>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6413      	str	r3, [r2, #64]	; 0x40
 8001026:	4b14      	ldr	r3, [pc, #80]	; (8001078 <HAL_TIM_Encoder_MspInit+0x84>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <HAL_TIM_Encoder_MspInit+0x84>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a0f      	ldr	r2, [pc, #60]	; (8001078 <HAL_TIM_Encoder_MspInit+0x84>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <HAL_TIM_Encoder_MspInit+0x84>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800104e:	2303      	movs	r3, #3
 8001050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800105e:	2301      	movs	r3, #1
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4619      	mov	r1, r3
 8001068:	4804      	ldr	r0, [pc, #16]	; (800107c <HAL_TIM_Encoder_MspInit+0x88>)
 800106a:	f001 f81f 	bl	80020ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800106e:	bf00      	nop
 8001070:	3728      	adds	r7, #40	; 0x28
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800
 800107c:	40020000 	.word	0x40020000

08001080 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <HAL_TIM_Base_MspInit+0x48>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d115      	bne.n	80010be <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <HAL_TIM_Base_MspInit+0x4c>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	4a0c      	ldr	r2, [pc, #48]	; (80010cc <HAL_TIM_Base_MspInit+0x4c>)
 800109c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a0:	6453      	str	r3, [r2, #68]	; 0x44
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_TIM_Base_MspInit+0x4c>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	2019      	movs	r0, #25
 80010b4:	f000 ff31 	bl	8001f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80010b8:	2019      	movs	r0, #25
 80010ba:	f000 ff4a 	bl	8001f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40014400 	.word	0x40014400
 80010cc:	40023800 	.word	0x40023800

080010d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a12      	ldr	r2, [pc, #72]	; (8001138 <HAL_TIM_MspPostInit+0x68>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d11e      	bne.n	8001130 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <HAL_TIM_MspPostInit+0x6c>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a10      	ldr	r2, [pc, #64]	; (800113c <HAL_TIM_MspPostInit+0x6c>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <HAL_TIM_MspPostInit+0x6c>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800110e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001112:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001120:	2301      	movs	r3, #1
 8001122:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001124:	f107 030c 	add.w	r3, r7, #12
 8001128:	4619      	mov	r1, r3
 800112a:	4805      	ldr	r0, [pc, #20]	; (8001140 <HAL_TIM_MspPostInit+0x70>)
 800112c:	f000 ffbe 	bl	80020ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001130:	bf00      	nop
 8001132:	3720      	adds	r7, #32
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40010000 	.word	0x40010000
 800113c:	40023800 	.word	0x40023800
 8001140:	40020000 	.word	0x40020000

08001144 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08c      	sub	sp, #48	; 0x30
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 031c 	add.w	r3, r7, #28
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a36      	ldr	r2, [pc, #216]	; (800123c <HAL_UART_MspInit+0xf8>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d135      	bne.n	80011d2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	61bb      	str	r3, [r7, #24]
 800116a:	4b35      	ldr	r3, [pc, #212]	; (8001240 <HAL_UART_MspInit+0xfc>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	4a34      	ldr	r2, [pc, #208]	; (8001240 <HAL_UART_MspInit+0xfc>)
 8001170:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001174:	6413      	str	r3, [r2, #64]	; 0x40
 8001176:	4b32      	ldr	r3, [pc, #200]	; (8001240 <HAL_UART_MspInit+0xfc>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800117e:	61bb      	str	r3, [r7, #24]
 8001180:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
 8001186:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <HAL_UART_MspInit+0xfc>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a2d      	ldr	r2, [pc, #180]	; (8001240 <HAL_UART_MspInit+0xfc>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <HAL_UART_MspInit+0xfc>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800119e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80011b0:	2308      	movs	r3, #8
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	4619      	mov	r1, r3
 80011ba:	4822      	ldr	r0, [pc, #136]	; (8001244 <HAL_UART_MspInit+0x100>)
 80011bc:	f000 ff76 	bl	80020ac <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2100      	movs	r1, #0
 80011c4:	2034      	movs	r0, #52	; 0x34
 80011c6:	f000 fea8 	bl	8001f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80011ca:	2034      	movs	r0, #52	; 0x34
 80011cc:	f000 fec1 	bl	8001f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011d0:	e030      	b.n	8001234 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a1c      	ldr	r2, [pc, #112]	; (8001248 <HAL_UART_MspInit+0x104>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d12b      	bne.n	8001234 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	4b17      	ldr	r3, [pc, #92]	; (8001240 <HAL_UART_MspInit+0xfc>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	4a16      	ldr	r2, [pc, #88]	; (8001240 <HAL_UART_MspInit+0xfc>)
 80011e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ea:	6413      	str	r3, [r2, #64]	; 0x40
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <HAL_UART_MspInit+0xfc>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	4b10      	ldr	r3, [pc, #64]	; (8001240 <HAL_UART_MspInit+0xfc>)
 80011fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001200:	4a0f      	ldr	r2, [pc, #60]	; (8001240 <HAL_UART_MspInit+0xfc>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6313      	str	r3, [r2, #48]	; 0x30
 8001208:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <HAL_UART_MspInit+0xfc>)
 800120a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001214:	230c      	movs	r3, #12
 8001216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001220:	2303      	movs	r3, #3
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001224:	2307      	movs	r3, #7
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001228:	f107 031c 	add.w	r3, r7, #28
 800122c:	4619      	mov	r1, r3
 800122e:	4807      	ldr	r0, [pc, #28]	; (800124c <HAL_UART_MspInit+0x108>)
 8001230:	f000 ff3c 	bl	80020ac <HAL_GPIO_Init>
}
 8001234:	bf00      	nop
 8001236:	3730      	adds	r7, #48	; 0x30
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40004c00 	.word	0x40004c00
 8001240:	40023800 	.word	0x40023800
 8001244:	40020800 	.word	0x40020800
 8001248:	40004400 	.word	0x40004400
 800124c:	40020000 	.word	0x40020000

08001250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <NMI_Handler+0x4>

08001256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125a:	e7fe      	b.n	800125a <HardFault_Handler+0x4>

0800125c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <MemManage_Handler+0x4>

08001262 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <BusFault_Handler+0x4>

08001268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <UsageFault_Handler+0x4>

0800126e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800129c:	f000 f8b6 	bl	800140c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80012a8:	4803      	ldr	r0, [pc, #12]	; (80012b8 <ADC_IRQHandler+0x14>)
 80012aa:	f000 f9f1 	bl	8001690 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80012ae:	4803      	ldr	r0, [pc, #12]	; (80012bc <ADC_IRQHandler+0x18>)
 80012b0:	f000 f9ee 	bl	8001690 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000040 	.word	0x20000040
 80012bc:	20000088 	.word	0x20000088

080012c0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012c4:	4803      	ldr	r0, [pc, #12]	; (80012d4 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80012c6:	f002 fa6d 	bl	80037a4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80012ca:	4803      	ldr	r0, [pc, #12]	; (80012d8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80012cc:	f002 fa6a 	bl	80037a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000124 	.word	0x20000124
 80012d8:	200001b4 	.word	0x200001b4

080012dc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80012e0:	4802      	ldr	r0, [pc, #8]	; (80012ec <UART4_IRQHandler+0x10>)
 80012e2:	f003 f849 	bl	8004378 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200001fc 	.word	0x200001fc

080012f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <SystemInit+0x20>)
 80012f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012fa:	4a05      	ldr	r2, [pc, #20]	; (8001310 <SystemInit+0x20>)
 80012fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001300:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001314:	f8df d034 	ldr.w	sp, [pc, #52]	; 800134c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001318:	480d      	ldr	r0, [pc, #52]	; (8001350 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800131a:	490e      	ldr	r1, [pc, #56]	; (8001354 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800131c:	4a0e      	ldr	r2, [pc, #56]	; (8001358 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001320:	e002      	b.n	8001328 <LoopCopyDataInit>

08001322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001326:	3304      	adds	r3, #4

08001328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800132a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800132c:	d3f9      	bcc.n	8001322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800132e:	4a0b      	ldr	r2, [pc, #44]	; (800135c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001330:	4c0b      	ldr	r4, [pc, #44]	; (8001360 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001334:	e001      	b.n	800133a <LoopFillZerobss>

08001336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001338:	3204      	adds	r2, #4

0800133a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800133a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800133c:	d3fb      	bcc.n	8001336 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800133e:	f7ff ffd7 	bl	80012f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001342:	f003 fedd 	bl	8005100 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001346:	f7ff f9ff 	bl	8000748 <main>
  bx  lr    
 800134a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800134c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001354:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001358:	08005188 	.word	0x08005188
  ldr r2, =_sbss
 800135c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001360:	20000298 	.word	0x20000298

08001364 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001364:	e7fe      	b.n	8001364 <CAN1_RX0_IRQHandler>
	...

08001368 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800136c:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <HAL_Init+0x40>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a0d      	ldr	r2, [pc, #52]	; (80013a8 <HAL_Init+0x40>)
 8001372:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001376:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <HAL_Init+0x40>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <HAL_Init+0x40>)
 800137e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001382:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <HAL_Init+0x40>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a07      	ldr	r2, [pc, #28]	; (80013a8 <HAL_Init+0x40>)
 800138a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800138e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001390:	2003      	movs	r0, #3
 8001392:	f000 fdb7 	bl	8001f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001396:	2000      	movs	r0, #0
 8001398:	f000 f808 	bl	80013ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800139c:	f7ff fd0e 	bl	8000dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40023c00 	.word	0x40023c00

080013ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_InitTick+0x54>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <HAL_InitTick+0x58>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4619      	mov	r1, r3
 80013be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 fdcf 	bl	8001f6e <HAL_SYSTICK_Config>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e00e      	b.n	80013f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b0f      	cmp	r3, #15
 80013de:	d80a      	bhi.n	80013f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e0:	2200      	movs	r2, #0
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295
 80013e8:	f000 fd97 	bl	8001f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013ec:	4a06      	ldr	r2, [pc, #24]	; (8001408 <HAL_InitTick+0x5c>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
 80013f4:	e000      	b.n	80013f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000004 	.word	0x20000004
 8001404:	2000000c 	.word	0x2000000c
 8001408:	20000008 	.word	0x20000008

0800140c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_IncTick+0x20>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	461a      	mov	r2, r3
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_IncTick+0x24>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4413      	add	r3, r2
 800141c:	4a04      	ldr	r2, [pc, #16]	; (8001430 <HAL_IncTick+0x24>)
 800141e:	6013      	str	r3, [r2, #0]
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	2000000c 	.word	0x2000000c
 8001430:	20000294 	.word	0x20000294

08001434 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return uwTick;
 8001438:	4b03      	ldr	r3, [pc, #12]	; (8001448 <HAL_GetTick+0x14>)
 800143a:	681b      	ldr	r3, [r3, #0]
}
 800143c:	4618      	mov	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20000294 	.word	0x20000294

0800144c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001454:	2300      	movs	r3, #0
 8001456:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e033      	b.n	80014ca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	2b00      	cmp	r3, #0
 8001468:	d109      	bne.n	800147e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff fcce 	bl	8000e0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	f003 0310 	and.w	r3, r3, #16
 8001486:	2b00      	cmp	r3, #0
 8001488:	d118      	bne.n	80014bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001492:	f023 0302 	bic.w	r3, r3, #2
 8001496:	f043 0202 	orr.w	r2, r3, #2
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f000 fb5a 	bl	8001b58 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f023 0303 	bic.w	r3, r3, #3
 80014b2:	f043 0201 	orr.w	r2, r3, #1
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	641a      	str	r2, [r3, #64]	; 0x40
 80014ba:	e001      	b.n	80014c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80014dc:	2300      	movs	r3, #0
 80014de:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d101      	bne.n	80014ee <HAL_ADC_Start_IT+0x1a>
 80014ea:	2302      	movs	r3, #2
 80014ec:	e0bd      	b.n	800166a <HAL_ADC_Start_IT+0x196>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2201      	movs	r2, #1
 80014f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	2b01      	cmp	r3, #1
 8001502:	d018      	beq.n	8001536 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f042 0201 	orr.w	r2, r2, #1
 8001512:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001514:	4b58      	ldr	r3, [pc, #352]	; (8001678 <HAL_ADC_Start_IT+0x1a4>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a58      	ldr	r2, [pc, #352]	; (800167c <HAL_ADC_Start_IT+0x1a8>)
 800151a:	fba2 2303 	umull	r2, r3, r2, r3
 800151e:	0c9a      	lsrs	r2, r3, #18
 8001520:	4613      	mov	r3, r2
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	4413      	add	r3, r2
 8001526:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001528:	e002      	b.n	8001530 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	3b01      	subs	r3, #1
 800152e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f9      	bne.n	800152a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	2b01      	cmp	r3, #1
 8001542:	f040 8085 	bne.w	8001650 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800154e:	f023 0301 	bic.w	r3, r3, #1
 8001552:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001564:	2b00      	cmp	r3, #0
 8001566:	d007      	beq.n	8001578 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001570:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001584:	d106      	bne.n	8001594 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	f023 0206 	bic.w	r2, r3, #6
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	645a      	str	r2, [r3, #68]	; 0x44
 8001592:	e002      	b.n	800159a <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015a2:	4b37      	ldr	r3, [pc, #220]	; (8001680 <HAL_ADC_Start_IT+0x1ac>)
 80015a4:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80015ae:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6812      	ldr	r2, [r2, #0]
 80015ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80015be:	f043 0320 	orr.w	r3, r3, #32
 80015c2:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 031f 	and.w	r3, r3, #31
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d12a      	bne.n	8001626 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a2b      	ldr	r2, [pc, #172]	; (8001684 <HAL_ADC_Start_IT+0x1b0>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d015      	beq.n	8001606 <HAL_ADC_Start_IT+0x132>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a2a      	ldr	r2, [pc, #168]	; (8001688 <HAL_ADC_Start_IT+0x1b4>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d105      	bne.n	80015f0 <HAL_ADC_Start_IT+0x11c>
 80015e4:	4b26      	ldr	r3, [pc, #152]	; (8001680 <HAL_ADC_Start_IT+0x1ac>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 031f 	and.w	r3, r3, #31
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d00a      	beq.n	8001606 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a25      	ldr	r2, [pc, #148]	; (800168c <HAL_ADC_Start_IT+0x1b8>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d136      	bne.n	8001668 <HAL_ADC_Start_IT+0x194>
 80015fa:	4b21      	ldr	r3, [pc, #132]	; (8001680 <HAL_ADC_Start_IT+0x1ac>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 0310 	and.w	r3, r3, #16
 8001602:	2b00      	cmp	r3, #0
 8001604:	d130      	bne.n	8001668 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d129      	bne.n	8001668 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	e020      	b.n	8001668 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a16      	ldr	r2, [pc, #88]	; (8001684 <HAL_ADC_Start_IT+0x1b0>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d11b      	bne.n	8001668 <HAL_ADC_Start_IT+0x194>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d114      	bne.n	8001668 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	e00b      	b.n	8001668 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	f043 0210 	orr.w	r2, r3, #16
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001660:	f043 0201 	orr.w	r2, r3, #1
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20000004 	.word	0x20000004
 800167c:	431bde83 	.word	0x431bde83
 8001680:	40012300 	.word	0x40012300
 8001684:	40012000 	.word	0x40012000
 8001688:	40012100 	.word	0x40012100
 800168c:	40012200 	.word	0x40012200

08001690 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	2300      	movs	r3, #0
 800169e:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	f003 0320 	and.w	r3, r3, #32
 80016be:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d049      	beq.n	800175a <HAL_ADC_IRQHandler+0xca>
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d046      	beq.n	800175a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	f003 0310 	and.w	r3, r3, #16
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d105      	bne.n	80016e4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d12b      	bne.n	800174a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d127      	bne.n	800174a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001704:	2b00      	cmp	r3, #0
 8001706:	d006      	beq.n	8001716 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001712:	2b00      	cmp	r3, #0
 8001714:	d119      	bne.n	800174a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0220 	bic.w	r2, r2, #32
 8001724:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d105      	bne.n	800174a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f043 0201 	orr.w	r2, r3, #1
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7fe ffda 	bl	8000704 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f06f 0212 	mvn.w	r2, #18
 8001758:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001768:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d057      	beq.n	8001820 <HAL_ADC_IRQHandler+0x190>
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d054      	beq.n	8001820 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f003 0310 	and.w	r3, r3, #16
 800177e:	2b00      	cmp	r3, #0
 8001780:	d105      	bne.n	800178e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d139      	bne.n	8001810 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d006      	beq.n	80017b8 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d12b      	bne.n	8001810 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d124      	bne.n	8001810 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d11d      	bne.n	8001810 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d119      	bne.n	8001810 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017ea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001800:	2b00      	cmp	r3, #0
 8001802:	d105      	bne.n	8001810 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	f043 0201 	orr.w	r2, r3, #1
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 fa9d 	bl	8001d50 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f06f 020c 	mvn.w	r2, #12
 800181e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800182e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d017      	beq.n	8001866 <HAL_ADC_IRQHandler+0x1d6>
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d014      	beq.n	8001866 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b01      	cmp	r3, #1
 8001848:	d10d      	bne.n	8001866 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 f837 	bl	80018ca <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f06f 0201 	mvn.w	r2, #1
 8001864:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f003 0320 	and.w	r3, r3, #32
 800186c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001874:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d015      	beq.n	80018a8 <HAL_ADC_IRQHandler+0x218>
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d012      	beq.n	80018a8 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	f043 0202 	orr.w	r2, r3, #2
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f06f 0220 	mvn.w	r2, #32
 8001896:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 f820 	bl	80018de <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f06f 0220 	mvn.w	r2, #32
 80018a6:	601a      	str	r2, [r3, #0]
  }
}
 80018a8:	bf00      	nop
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80018fe:	2300      	movs	r3, #0
 8001900:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001908:	2b01      	cmp	r3, #1
 800190a:	d101      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x1c>
 800190c:	2302      	movs	r3, #2
 800190e:	e113      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x244>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b09      	cmp	r3, #9
 800191e:	d925      	bls.n	800196c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68d9      	ldr	r1, [r3, #12]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	b29b      	uxth	r3, r3
 800192c:	461a      	mov	r2, r3
 800192e:	4613      	mov	r3, r2
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	4413      	add	r3, r2
 8001934:	3b1e      	subs	r3, #30
 8001936:	2207      	movs	r2, #7
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43da      	mvns	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	400a      	ands	r2, r1
 8001944:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68d9      	ldr	r1, [r3, #12]
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	b29b      	uxth	r3, r3
 8001956:	4618      	mov	r0, r3
 8001958:	4603      	mov	r3, r0
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4403      	add	r3, r0
 800195e:	3b1e      	subs	r3, #30
 8001960:	409a      	lsls	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	e022      	b.n	80019b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6919      	ldr	r1, [r3, #16]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	b29b      	uxth	r3, r3
 8001978:	461a      	mov	r2, r3
 800197a:	4613      	mov	r3, r2
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	4413      	add	r3, r2
 8001980:	2207      	movs	r2, #7
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43da      	mvns	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	400a      	ands	r2, r1
 800198e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6919      	ldr	r1, [r3, #16]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	4618      	mov	r0, r3
 80019a2:	4603      	mov	r3, r0
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4403      	add	r3, r0
 80019a8:	409a      	lsls	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b06      	cmp	r3, #6
 80019b8:	d824      	bhi.n	8001a04 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	3b05      	subs	r3, #5
 80019cc:	221f      	movs	r2, #31
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43da      	mvns	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	400a      	ands	r2, r1
 80019da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	4618      	mov	r0, r3
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	3b05      	subs	r3, #5
 80019f6:	fa00 f203 	lsl.w	r2, r0, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	635a      	str	r2, [r3, #52]	; 0x34
 8001a02:	e04c      	b.n	8001a9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b0c      	cmp	r3, #12
 8001a0a:	d824      	bhi.n	8001a56 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	3b23      	subs	r3, #35	; 0x23
 8001a1e:	221f      	movs	r2, #31
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43da      	mvns	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	400a      	ands	r2, r1
 8001a2c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	3b23      	subs	r3, #35	; 0x23
 8001a48:	fa00 f203 	lsl.w	r2, r0, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	631a      	str	r2, [r3, #48]	; 0x30
 8001a54:	e023      	b.n	8001a9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	3b41      	subs	r3, #65	; 0x41
 8001a68:	221f      	movs	r2, #31
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	400a      	ands	r2, r1
 8001a76:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	4618      	mov	r0, r3
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	3b41      	subs	r3, #65	; 0x41
 8001a92:	fa00 f203 	lsl.w	r2, r0, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a9e:	4b29      	ldr	r3, [pc, #164]	; (8001b44 <HAL_ADC_ConfigChannel+0x250>)
 8001aa0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a28      	ldr	r2, [pc, #160]	; (8001b48 <HAL_ADC_ConfigChannel+0x254>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d10f      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x1d8>
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b12      	cmp	r3, #18
 8001ab2:	d10b      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a1d      	ldr	r2, [pc, #116]	; (8001b48 <HAL_ADC_ConfigChannel+0x254>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d12b      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x23a>
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a1c      	ldr	r2, [pc, #112]	; (8001b4c <HAL_ADC_ConfigChannel+0x258>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d003      	beq.n	8001ae8 <HAL_ADC_ConfigChannel+0x1f4>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b11      	cmp	r3, #17
 8001ae6:	d122      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a11      	ldr	r2, [pc, #68]	; (8001b4c <HAL_ADC_ConfigChannel+0x258>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d111      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b0a:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <HAL_ADC_ConfigChannel+0x25c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a11      	ldr	r2, [pc, #68]	; (8001b54 <HAL_ADC_ConfigChannel+0x260>)
 8001b10:	fba2 2303 	umull	r2, r3, r2, r3
 8001b14:	0c9a      	lsrs	r2, r3, #18
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b20:	e002      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	3b01      	subs	r3, #1
 8001b26:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f9      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	40012300 	.word	0x40012300
 8001b48:	40012000 	.word	0x40012000
 8001b4c:	10000012 	.word	0x10000012
 8001b50:	20000004 	.word	0x20000004
 8001b54:	431bde83 	.word	0x431bde83

08001b58 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b60:	4b79      	ldr	r3, [pc, #484]	; (8001d48 <ADC_Init+0x1f0>)
 8001b62:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6859      	ldr	r1, [r3, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	021a      	lsls	r2, r3, #8
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001bb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6859      	ldr	r1, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6899      	ldr	r1, [r3, #8]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bea:	4a58      	ldr	r2, [pc, #352]	; (8001d4c <ADC_Init+0x1f4>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d022      	beq.n	8001c36 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bfe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6899      	ldr	r1, [r3, #8]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6899      	ldr	r1, [r3, #8]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	e00f      	b.n	8001c56 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c54:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 0202 	bic.w	r2, r2, #2
 8001c64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6899      	ldr	r1, [r3, #8]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	7e1b      	ldrb	r3, [r3, #24]
 8001c70:	005a      	lsls	r2, r3, #1
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d01b      	beq.n	8001cbc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c92:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ca2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6859      	ldr	r1, [r3, #4]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	035a      	lsls	r2, r3, #13
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	e007      	b.n	8001ccc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001cda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	051a      	lsls	r2, r3, #20
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6899      	ldr	r1, [r3, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d0e:	025a      	lsls	r2, r3, #9
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689a      	ldr	r2, [r3, #8]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6899      	ldr	r1, [r3, #8]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	029a      	lsls	r2, r3, #10
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	609a      	str	r2, [r3, #8]
}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	40012300 	.word	0x40012300
 8001d4c:	0f000001 	.word	0x0f000001

08001d50 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d80:	4013      	ands	r3, r2
 8001d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d96:	4a04      	ldr	r2, [pc, #16]	; (8001da8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	60d3      	str	r3, [r2, #12]
}
 8001d9c:	bf00      	nop
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db0:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	0a1b      	lsrs	r3, r3, #8
 8001db6:	f003 0307 	and.w	r3, r3, #7
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	db0b      	blt.n	8001df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	f003 021f 	and.w	r2, r3, #31
 8001de0:	4907      	ldr	r1, [pc, #28]	; (8001e00 <__NVIC_EnableIRQ+0x38>)
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	2001      	movs	r0, #1
 8001dea:	fa00 f202 	lsl.w	r2, r0, r2
 8001dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000e100 	.word	0xe000e100

08001e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	6039      	str	r1, [r7, #0]
 8001e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	db0a      	blt.n	8001e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	490c      	ldr	r1, [pc, #48]	; (8001e50 <__NVIC_SetPriority+0x4c>)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	440b      	add	r3, r1
 8001e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e2c:	e00a      	b.n	8001e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4908      	ldr	r1, [pc, #32]	; (8001e54 <__NVIC_SetPriority+0x50>)
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	3b04      	subs	r3, #4
 8001e3c:	0112      	lsls	r2, r2, #4
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	440b      	add	r3, r1
 8001e42:	761a      	strb	r2, [r3, #24]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000e100 	.word	0xe000e100
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	; 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f1c3 0307 	rsb	r3, r3, #7
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	bf28      	it	cs
 8001e76:	2304      	movcs	r3, #4
 8001e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	2b06      	cmp	r3, #6
 8001e80:	d902      	bls.n	8001e88 <NVIC_EncodePriority+0x30>
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3b03      	subs	r3, #3
 8001e86:	e000      	b.n	8001e8a <NVIC_EncodePriority+0x32>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43da      	mvns	r2, r3
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	43d9      	mvns	r1, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	4313      	orrs	r3, r2
         );
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3724      	adds	r7, #36	; 0x24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ed0:	d301      	bcc.n	8001ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e00f      	b.n	8001ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <SysTick_Config+0x40>)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ede:	210f      	movs	r1, #15
 8001ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee4:	f7ff ff8e 	bl	8001e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <SysTick_Config+0x40>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eee:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <SysTick_Config+0x40>)
 8001ef0:	2207      	movs	r2, #7
 8001ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	e000e010 	.word	0xe000e010

08001f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff ff29 	bl	8001d64 <__NVIC_SetPriorityGrouping>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b086      	sub	sp, #24
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	4603      	mov	r3, r0
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f2c:	f7ff ff3e 	bl	8001dac <__NVIC_GetPriorityGrouping>
 8001f30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	68b9      	ldr	r1, [r7, #8]
 8001f36:	6978      	ldr	r0, [r7, #20]
 8001f38:	f7ff ff8e 	bl	8001e58 <NVIC_EncodePriority>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f42:	4611      	mov	r1, r2
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff5d 	bl	8001e04 <__NVIC_SetPriority>
}
 8001f4a:	bf00      	nop
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	4603      	mov	r3, r0
 8001f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ff31 	bl	8001dc8 <__NVIC_EnableIRQ>
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff ffa2 	bl	8001ec0 <SysTick_Config>
 8001f7c:	4603      	mov	r3, r0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b084      	sub	sp, #16
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f92:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f94:	f7ff fa4e 	bl	8001434 <HAL_GetTick>
 8001f98:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d008      	beq.n	8001fb8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2280      	movs	r2, #128	; 0x80
 8001faa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e052      	b.n	800205e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0216 	bic.w	r2, r2, #22
 8001fc6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	695a      	ldr	r2, [r3, #20]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fd6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d103      	bne.n	8001fe8 <HAL_DMA_Abort+0x62>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d007      	beq.n	8001ff8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0208 	bic.w	r2, r2, #8
 8001ff6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0201 	bic.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002008:	e013      	b.n	8002032 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800200a:	f7ff fa13 	bl	8001434 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b05      	cmp	r3, #5
 8002016:	d90c      	bls.n	8002032 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2220      	movs	r2, #32
 800201c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2203      	movs	r2, #3
 8002022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e015      	b.n	800205e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1e4      	bne.n	800200a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002044:	223f      	movs	r2, #63	; 0x3f
 8002046:	409a      	lsls	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d004      	beq.n	8002084 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2280      	movs	r2, #128	; 0x80
 800207e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e00c      	b.n	800209e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2205      	movs	r2, #5
 8002088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0201 	bic.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b089      	sub	sp, #36	; 0x24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020be:	2300      	movs	r3, #0
 80020c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
 80020c6:	e165      	b.n	8002394 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020c8:	2201      	movs	r2, #1
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	4013      	ands	r3, r2
 80020da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	f040 8154 	bne.w	800238e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d005      	beq.n	80020fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d130      	bne.n	8002160 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	2203      	movs	r2, #3
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4013      	ands	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002134:	2201      	movs	r2, #1
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	091b      	lsrs	r3, r3, #4
 800214a:	f003 0201 	and.w	r2, r3, #1
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 0303 	and.w	r3, r3, #3
 8002168:	2b03      	cmp	r3, #3
 800216a:	d017      	beq.n	800219c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	2203      	movs	r2, #3
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d123      	bne.n	80021f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	08da      	lsrs	r2, r3, #3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3208      	adds	r2, #8
 80021b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	220f      	movs	r2, #15
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	08da      	lsrs	r2, r3, #3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3208      	adds	r2, #8
 80021ea:	69b9      	ldr	r1, [r7, #24]
 80021ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	2203      	movs	r2, #3
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 0203 	and.w	r2, r3, #3
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 80ae 	beq.w	800238e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	4b5d      	ldr	r3, [pc, #372]	; (80023ac <HAL_GPIO_Init+0x300>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	4a5c      	ldr	r2, [pc, #368]	; (80023ac <HAL_GPIO_Init+0x300>)
 800223c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002240:	6453      	str	r3, [r2, #68]	; 0x44
 8002242:	4b5a      	ldr	r3, [pc, #360]	; (80023ac <HAL_GPIO_Init+0x300>)
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800224e:	4a58      	ldr	r2, [pc, #352]	; (80023b0 <HAL_GPIO_Init+0x304>)
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	089b      	lsrs	r3, r3, #2
 8002254:	3302      	adds	r3, #2
 8002256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	220f      	movs	r2, #15
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4013      	ands	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a4f      	ldr	r2, [pc, #316]	; (80023b4 <HAL_GPIO_Init+0x308>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d025      	beq.n	80022c6 <HAL_GPIO_Init+0x21a>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a4e      	ldr	r2, [pc, #312]	; (80023b8 <HAL_GPIO_Init+0x30c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d01f      	beq.n	80022c2 <HAL_GPIO_Init+0x216>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a4d      	ldr	r2, [pc, #308]	; (80023bc <HAL_GPIO_Init+0x310>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d019      	beq.n	80022be <HAL_GPIO_Init+0x212>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a4c      	ldr	r2, [pc, #304]	; (80023c0 <HAL_GPIO_Init+0x314>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d013      	beq.n	80022ba <HAL_GPIO_Init+0x20e>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a4b      	ldr	r2, [pc, #300]	; (80023c4 <HAL_GPIO_Init+0x318>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d00d      	beq.n	80022b6 <HAL_GPIO_Init+0x20a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a4a      	ldr	r2, [pc, #296]	; (80023c8 <HAL_GPIO_Init+0x31c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d007      	beq.n	80022b2 <HAL_GPIO_Init+0x206>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a49      	ldr	r2, [pc, #292]	; (80023cc <HAL_GPIO_Init+0x320>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d101      	bne.n	80022ae <HAL_GPIO_Init+0x202>
 80022aa:	2306      	movs	r3, #6
 80022ac:	e00c      	b.n	80022c8 <HAL_GPIO_Init+0x21c>
 80022ae:	2307      	movs	r3, #7
 80022b0:	e00a      	b.n	80022c8 <HAL_GPIO_Init+0x21c>
 80022b2:	2305      	movs	r3, #5
 80022b4:	e008      	b.n	80022c8 <HAL_GPIO_Init+0x21c>
 80022b6:	2304      	movs	r3, #4
 80022b8:	e006      	b.n	80022c8 <HAL_GPIO_Init+0x21c>
 80022ba:	2303      	movs	r3, #3
 80022bc:	e004      	b.n	80022c8 <HAL_GPIO_Init+0x21c>
 80022be:	2302      	movs	r3, #2
 80022c0:	e002      	b.n	80022c8 <HAL_GPIO_Init+0x21c>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <HAL_GPIO_Init+0x21c>
 80022c6:	2300      	movs	r3, #0
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	f002 0203 	and.w	r2, r2, #3
 80022ce:	0092      	lsls	r2, r2, #2
 80022d0:	4093      	lsls	r3, r2
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022d8:	4935      	ldr	r1, [pc, #212]	; (80023b0 <HAL_GPIO_Init+0x304>)
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	089b      	lsrs	r3, r3, #2
 80022de:	3302      	adds	r3, #2
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022e6:	4b3a      	ldr	r3, [pc, #232]	; (80023d0 <HAL_GPIO_Init+0x324>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800230a:	4a31      	ldr	r2, [pc, #196]	; (80023d0 <HAL_GPIO_Init+0x324>)
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002310:	4b2f      	ldr	r3, [pc, #188]	; (80023d0 <HAL_GPIO_Init+0x324>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002334:	4a26      	ldr	r2, [pc, #152]	; (80023d0 <HAL_GPIO_Init+0x324>)
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800233a:	4b25      	ldr	r3, [pc, #148]	; (80023d0 <HAL_GPIO_Init+0x324>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	43db      	mvns	r3, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4013      	ands	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800235e:	4a1c      	ldr	r2, [pc, #112]	; (80023d0 <HAL_GPIO_Init+0x324>)
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002364:	4b1a      	ldr	r3, [pc, #104]	; (80023d0 <HAL_GPIO_Init+0x324>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002388:	4a11      	ldr	r2, [pc, #68]	; (80023d0 <HAL_GPIO_Init+0x324>)
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3301      	adds	r3, #1
 8002392:	61fb      	str	r3, [r7, #28]
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	2b0f      	cmp	r3, #15
 8002398:	f67f ae96 	bls.w	80020c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800239c:	bf00      	nop
 800239e:	bf00      	nop
 80023a0:	3724      	adds	r7, #36	; 0x24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40013800 	.word	0x40013800
 80023b4:	40020000 	.word	0x40020000
 80023b8:	40020400 	.word	0x40020400
 80023bc:	40020800 	.word	0x40020800
 80023c0:	40020c00 	.word	0x40020c00
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40021400 	.word	0x40021400
 80023cc:	40021800 	.word	0x40021800
 80023d0:	40013c00 	.word	0x40013c00

080023d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e12b      	b.n	800263e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d106      	bne.n	8002400 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7fe fd8a 	bl	8000f14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2224      	movs	r2, #36	; 0x24
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0201 	bic.w	r2, r2, #1
 8002416:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002426:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002436:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002438:	f000 fa02 	bl	8002840 <HAL_RCC_GetPCLK1Freq>
 800243c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	4a81      	ldr	r2, [pc, #516]	; (8002648 <HAL_I2C_Init+0x274>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d807      	bhi.n	8002458 <HAL_I2C_Init+0x84>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4a80      	ldr	r2, [pc, #512]	; (800264c <HAL_I2C_Init+0x278>)
 800244c:	4293      	cmp	r3, r2
 800244e:	bf94      	ite	ls
 8002450:	2301      	movls	r3, #1
 8002452:	2300      	movhi	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	e006      	b.n	8002466 <HAL_I2C_Init+0x92>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4a7d      	ldr	r2, [pc, #500]	; (8002650 <HAL_I2C_Init+0x27c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	bf94      	ite	ls
 8002460:	2301      	movls	r3, #1
 8002462:	2300      	movhi	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e0e7      	b.n	800263e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	4a78      	ldr	r2, [pc, #480]	; (8002654 <HAL_I2C_Init+0x280>)
 8002472:	fba2 2303 	umull	r2, r3, r2, r3
 8002476:	0c9b      	lsrs	r3, r3, #18
 8002478:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	430a      	orrs	r2, r1
 800248c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	4a6a      	ldr	r2, [pc, #424]	; (8002648 <HAL_I2C_Init+0x274>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d802      	bhi.n	80024a8 <HAL_I2C_Init+0xd4>
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	3301      	adds	r3, #1
 80024a6:	e009      	b.n	80024bc <HAL_I2C_Init+0xe8>
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024ae:	fb02 f303 	mul.w	r3, r2, r3
 80024b2:	4a69      	ldr	r2, [pc, #420]	; (8002658 <HAL_I2C_Init+0x284>)
 80024b4:	fba2 2303 	umull	r2, r3, r2, r3
 80024b8:	099b      	lsrs	r3, r3, #6
 80024ba:	3301      	adds	r3, #1
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6812      	ldr	r2, [r2, #0]
 80024c0:	430b      	orrs	r3, r1
 80024c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	495c      	ldr	r1, [pc, #368]	; (8002648 <HAL_I2C_Init+0x274>)
 80024d8:	428b      	cmp	r3, r1
 80024da:	d819      	bhi.n	8002510 <HAL_I2C_Init+0x13c>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	1e59      	subs	r1, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80024ea:	1c59      	adds	r1, r3, #1
 80024ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024f0:	400b      	ands	r3, r1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_I2C_Init+0x138>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1e59      	subs	r1, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	fbb1 f3f3 	udiv	r3, r1, r3
 8002504:	3301      	adds	r3, #1
 8002506:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800250a:	e051      	b.n	80025b0 <HAL_I2C_Init+0x1dc>
 800250c:	2304      	movs	r3, #4
 800250e:	e04f      	b.n	80025b0 <HAL_I2C_Init+0x1dc>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d111      	bne.n	800253c <HAL_I2C_Init+0x168>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	1e58      	subs	r0, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6859      	ldr	r1, [r3, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	440b      	add	r3, r1
 8002526:	fbb0 f3f3 	udiv	r3, r0, r3
 800252a:	3301      	adds	r3, #1
 800252c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002530:	2b00      	cmp	r3, #0
 8002532:	bf0c      	ite	eq
 8002534:	2301      	moveq	r3, #1
 8002536:	2300      	movne	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	e012      	b.n	8002562 <HAL_I2C_Init+0x18e>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	1e58      	subs	r0, r3, #1
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6859      	ldr	r1, [r3, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	0099      	lsls	r1, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002552:	3301      	adds	r3, #1
 8002554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf0c      	ite	eq
 800255c:	2301      	moveq	r3, #1
 800255e:	2300      	movne	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_I2C_Init+0x196>
 8002566:	2301      	movs	r3, #1
 8002568:	e022      	b.n	80025b0 <HAL_I2C_Init+0x1dc>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10e      	bne.n	8002590 <HAL_I2C_Init+0x1bc>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	1e58      	subs	r0, r3, #1
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6859      	ldr	r1, [r3, #4]
 800257a:	460b      	mov	r3, r1
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	440b      	add	r3, r1
 8002580:	fbb0 f3f3 	udiv	r3, r0, r3
 8002584:	3301      	adds	r3, #1
 8002586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800258a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800258e:	e00f      	b.n	80025b0 <HAL_I2C_Init+0x1dc>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1e58      	subs	r0, r3, #1
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6859      	ldr	r1, [r3, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	0099      	lsls	r1, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025a6:	3301      	adds	r3, #1
 80025a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	6809      	ldr	r1, [r1, #0]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69da      	ldr	r2, [r3, #28]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6911      	ldr	r1, [r2, #16]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	68d2      	ldr	r2, [r2, #12]
 80025ea:	4311      	orrs	r1, r2
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	430b      	orrs	r3, r1
 80025f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695a      	ldr	r2, [r3, #20]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0201 	orr.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2220      	movs	r2, #32
 800262a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	000186a0 	.word	0x000186a0
 800264c:	001e847f 	.word	0x001e847f
 8002650:	003d08ff 	.word	0x003d08ff
 8002654:	431bde83 	.word	0x431bde83
 8002658:	10624dd3 	.word	0x10624dd3

0800265c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0cc      	b.n	800280a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002670:	4b68      	ldr	r3, [pc, #416]	; (8002814 <HAL_RCC_ClockConfig+0x1b8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 030f 	and.w	r3, r3, #15
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d90c      	bls.n	8002698 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267e:	4b65      	ldr	r3, [pc, #404]	; (8002814 <HAL_RCC_ClockConfig+0x1b8>)
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002686:	4b63      	ldr	r3, [pc, #396]	; (8002814 <HAL_RCC_ClockConfig+0x1b8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d001      	beq.n	8002698 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0b8      	b.n	800280a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d020      	beq.n	80026e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d005      	beq.n	80026bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026b0:	4b59      	ldr	r3, [pc, #356]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	4a58      	ldr	r2, [pc, #352]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026c8:	4b53      	ldr	r3, [pc, #332]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	4a52      	ldr	r2, [pc, #328]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d4:	4b50      	ldr	r3, [pc, #320]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	494d      	ldr	r1, [pc, #308]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d044      	beq.n	800277c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d107      	bne.n	800270a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fa:	4b47      	ldr	r3, [pc, #284]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d119      	bne.n	800273a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e07f      	b.n	800280a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d003      	beq.n	800271a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002716:	2b03      	cmp	r3, #3
 8002718:	d107      	bne.n	800272a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800271a:	4b3f      	ldr	r3, [pc, #252]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d109      	bne.n	800273a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e06f      	b.n	800280a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272a:	4b3b      	ldr	r3, [pc, #236]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e067      	b.n	800280a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800273a:	4b37      	ldr	r3, [pc, #220]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f023 0203 	bic.w	r2, r3, #3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4934      	ldr	r1, [pc, #208]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 8002748:	4313      	orrs	r3, r2
 800274a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800274c:	f7fe fe72 	bl	8001434 <HAL_GetTick>
 8002750:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002752:	e00a      	b.n	800276a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002754:	f7fe fe6e 	bl	8001434 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e04f      	b.n	800280a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276a:	4b2b      	ldr	r3, [pc, #172]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 020c 	and.w	r2, r3, #12
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	429a      	cmp	r2, r3
 800277a:	d1eb      	bne.n	8002754 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800277c:	4b25      	ldr	r3, [pc, #148]	; (8002814 <HAL_RCC_ClockConfig+0x1b8>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 030f 	and.w	r3, r3, #15
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d20c      	bcs.n	80027a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278a:	4b22      	ldr	r3, [pc, #136]	; (8002814 <HAL_RCC_ClockConfig+0x1b8>)
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002792:	4b20      	ldr	r3, [pc, #128]	; (8002814 <HAL_RCC_ClockConfig+0x1b8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	429a      	cmp	r2, r3
 800279e:	d001      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e032      	b.n	800280a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d008      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027b0:	4b19      	ldr	r3, [pc, #100]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	4916      	ldr	r1, [pc, #88]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d009      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027ce:	4b12      	ldr	r3, [pc, #72]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	490e      	ldr	r1, [pc, #56]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027e2:	f000 f855 	bl	8002890 <HAL_RCC_GetSysClockFreq>
 80027e6:	4602      	mov	r2, r0
 80027e8:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	091b      	lsrs	r3, r3, #4
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	490a      	ldr	r1, [pc, #40]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 80027f4:	5ccb      	ldrb	r3, [r1, r3]
 80027f6:	fa22 f303 	lsr.w	r3, r2, r3
 80027fa:	4a09      	ldr	r2, [pc, #36]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <HAL_RCC_ClockConfig+0x1c8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f7fe fdd2 	bl	80013ac <HAL_InitTick>

  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40023c00 	.word	0x40023c00
 8002818:	40023800 	.word	0x40023800
 800281c:	08005160 	.word	0x08005160
 8002820:	20000004 	.word	0x20000004
 8002824:	20000008 	.word	0x20000008

08002828 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800282c:	4b03      	ldr	r3, [pc, #12]	; (800283c <HAL_RCC_GetHCLKFreq+0x14>)
 800282e:	681b      	ldr	r3, [r3, #0]
}
 8002830:	4618      	mov	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	20000004 	.word	0x20000004

08002840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002844:	f7ff fff0 	bl	8002828 <HAL_RCC_GetHCLKFreq>
 8002848:	4602      	mov	r2, r0
 800284a:	4b05      	ldr	r3, [pc, #20]	; (8002860 <HAL_RCC_GetPCLK1Freq+0x20>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	0a9b      	lsrs	r3, r3, #10
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	4903      	ldr	r1, [pc, #12]	; (8002864 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002856:	5ccb      	ldrb	r3, [r1, r3]
 8002858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800285c:	4618      	mov	r0, r3
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40023800 	.word	0x40023800
 8002864:	08005170 	.word	0x08005170

08002868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800286c:	f7ff ffdc 	bl	8002828 <HAL_RCC_GetHCLKFreq>
 8002870:	4602      	mov	r2, r0
 8002872:	4b05      	ldr	r3, [pc, #20]	; (8002888 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	0b5b      	lsrs	r3, r3, #13
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	4903      	ldr	r1, [pc, #12]	; (800288c <HAL_RCC_GetPCLK2Freq+0x24>)
 800287e:	5ccb      	ldrb	r3, [r1, r3]
 8002880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002884:	4618      	mov	r0, r3
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40023800 	.word	0x40023800
 800288c:	08005170 	.word	0x08005170

08002890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002894:	b0ae      	sub	sp, #184	; 0xb8
 8002896:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028b6:	4bcb      	ldr	r3, [pc, #812]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x354>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	2b0c      	cmp	r3, #12
 80028c0:	f200 8206 	bhi.w	8002cd0 <HAL_RCC_GetSysClockFreq+0x440>
 80028c4:	a201      	add	r2, pc, #4	; (adr r2, 80028cc <HAL_RCC_GetSysClockFreq+0x3c>)
 80028c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ca:	bf00      	nop
 80028cc:	08002901 	.word	0x08002901
 80028d0:	08002cd1 	.word	0x08002cd1
 80028d4:	08002cd1 	.word	0x08002cd1
 80028d8:	08002cd1 	.word	0x08002cd1
 80028dc:	08002909 	.word	0x08002909
 80028e0:	08002cd1 	.word	0x08002cd1
 80028e4:	08002cd1 	.word	0x08002cd1
 80028e8:	08002cd1 	.word	0x08002cd1
 80028ec:	08002911 	.word	0x08002911
 80028f0:	08002cd1 	.word	0x08002cd1
 80028f4:	08002cd1 	.word	0x08002cd1
 80028f8:	08002cd1 	.word	0x08002cd1
 80028fc:	08002b01 	.word	0x08002b01
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002900:	4bb9      	ldr	r3, [pc, #740]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002902:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002906:	e1e7      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002908:	4bb8      	ldr	r3, [pc, #736]	; (8002bec <HAL_RCC_GetSysClockFreq+0x35c>)
 800290a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800290e:	e1e3      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002910:	4bb4      	ldr	r3, [pc, #720]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002918:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800291c:	4bb1      	ldr	r3, [pc, #708]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x354>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d071      	beq.n	8002a0c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002928:	4bae      	ldr	r3, [pc, #696]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x354>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	099b      	lsrs	r3, r3, #6
 800292e:	2200      	movs	r2, #0
 8002930:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002934:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002938:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800293c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002940:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002944:	2300      	movs	r3, #0
 8002946:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800294a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800294e:	4622      	mov	r2, r4
 8002950:	462b      	mov	r3, r5
 8002952:	f04f 0000 	mov.w	r0, #0
 8002956:	f04f 0100 	mov.w	r1, #0
 800295a:	0159      	lsls	r1, r3, #5
 800295c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002960:	0150      	lsls	r0, r2, #5
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4621      	mov	r1, r4
 8002968:	1a51      	subs	r1, r2, r1
 800296a:	6439      	str	r1, [r7, #64]	; 0x40
 800296c:	4629      	mov	r1, r5
 800296e:	eb63 0301 	sbc.w	r3, r3, r1
 8002972:	647b      	str	r3, [r7, #68]	; 0x44
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002980:	4649      	mov	r1, r9
 8002982:	018b      	lsls	r3, r1, #6
 8002984:	4641      	mov	r1, r8
 8002986:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800298a:	4641      	mov	r1, r8
 800298c:	018a      	lsls	r2, r1, #6
 800298e:	4641      	mov	r1, r8
 8002990:	1a51      	subs	r1, r2, r1
 8002992:	63b9      	str	r1, [r7, #56]	; 0x38
 8002994:	4649      	mov	r1, r9
 8002996:	eb63 0301 	sbc.w	r3, r3, r1
 800299a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80029a8:	4649      	mov	r1, r9
 80029aa:	00cb      	lsls	r3, r1, #3
 80029ac:	4641      	mov	r1, r8
 80029ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029b2:	4641      	mov	r1, r8
 80029b4:	00ca      	lsls	r2, r1, #3
 80029b6:	4610      	mov	r0, r2
 80029b8:	4619      	mov	r1, r3
 80029ba:	4603      	mov	r3, r0
 80029bc:	4622      	mov	r2, r4
 80029be:	189b      	adds	r3, r3, r2
 80029c0:	633b      	str	r3, [r7, #48]	; 0x30
 80029c2:	462b      	mov	r3, r5
 80029c4:	460a      	mov	r2, r1
 80029c6:	eb42 0303 	adc.w	r3, r2, r3
 80029ca:	637b      	str	r3, [r7, #52]	; 0x34
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	f04f 0300 	mov.w	r3, #0
 80029d4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80029d8:	4629      	mov	r1, r5
 80029da:	024b      	lsls	r3, r1, #9
 80029dc:	4621      	mov	r1, r4
 80029de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029e2:	4621      	mov	r1, r4
 80029e4:	024a      	lsls	r2, r1, #9
 80029e6:	4610      	mov	r0, r2
 80029e8:	4619      	mov	r1, r3
 80029ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029ee:	2200      	movs	r2, #0
 80029f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80029f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80029f8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80029fc:	f7fd fc02 	bl	8000204 <__aeabi_uldivmod>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	4613      	mov	r3, r2
 8002a06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a0a:	e067      	b.n	8002adc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a0c:	4b75      	ldr	r3, [pc, #468]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	099b      	lsrs	r3, r3, #6
 8002a12:	2200      	movs	r2, #0
 8002a14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a18:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002a1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a24:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a26:	2300      	movs	r3, #0
 8002a28:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a2a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002a2e:	4622      	mov	r2, r4
 8002a30:	462b      	mov	r3, r5
 8002a32:	f04f 0000 	mov.w	r0, #0
 8002a36:	f04f 0100 	mov.w	r1, #0
 8002a3a:	0159      	lsls	r1, r3, #5
 8002a3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a40:	0150      	lsls	r0, r2, #5
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	4621      	mov	r1, r4
 8002a48:	1a51      	subs	r1, r2, r1
 8002a4a:	62b9      	str	r1, [r7, #40]	; 0x28
 8002a4c:	4629      	mov	r1, r5
 8002a4e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002a60:	4649      	mov	r1, r9
 8002a62:	018b      	lsls	r3, r1, #6
 8002a64:	4641      	mov	r1, r8
 8002a66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a6a:	4641      	mov	r1, r8
 8002a6c:	018a      	lsls	r2, r1, #6
 8002a6e:	4641      	mov	r1, r8
 8002a70:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a74:	4649      	mov	r1, r9
 8002a76:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a86:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a8e:	4692      	mov	sl, r2
 8002a90:	469b      	mov	fp, r3
 8002a92:	4623      	mov	r3, r4
 8002a94:	eb1a 0303 	adds.w	r3, sl, r3
 8002a98:	623b      	str	r3, [r7, #32]
 8002a9a:	462b      	mov	r3, r5
 8002a9c:	eb4b 0303 	adc.w	r3, fp, r3
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa2:	f04f 0200 	mov.w	r2, #0
 8002aa6:	f04f 0300 	mov.w	r3, #0
 8002aaa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002aae:	4629      	mov	r1, r5
 8002ab0:	028b      	lsls	r3, r1, #10
 8002ab2:	4621      	mov	r1, r4
 8002ab4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ab8:	4621      	mov	r1, r4
 8002aba:	028a      	lsls	r2, r1, #10
 8002abc:	4610      	mov	r0, r2
 8002abe:	4619      	mov	r1, r3
 8002ac0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	673b      	str	r3, [r7, #112]	; 0x70
 8002ac8:	677a      	str	r2, [r7, #116]	; 0x74
 8002aca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002ace:	f7fd fb99 	bl	8000204 <__aeabi_uldivmod>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002adc:	4b41      	ldr	r3, [pc, #260]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	0c1b      	lsrs	r3, r3, #16
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002aee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002af2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002afe:	e0eb      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b00:	4b38      	ldr	r3, [pc, #224]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b0c:	4b35      	ldr	r3, [pc, #212]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d06b      	beq.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b18:	4b32      	ldr	r3, [pc, #200]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	099b      	lsrs	r3, r3, #6
 8002b1e:	2200      	movs	r2, #0
 8002b20:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b22:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b2a:	663b      	str	r3, [r7, #96]	; 0x60
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	667b      	str	r3, [r7, #100]	; 0x64
 8002b30:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002b34:	4622      	mov	r2, r4
 8002b36:	462b      	mov	r3, r5
 8002b38:	f04f 0000 	mov.w	r0, #0
 8002b3c:	f04f 0100 	mov.w	r1, #0
 8002b40:	0159      	lsls	r1, r3, #5
 8002b42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b46:	0150      	lsls	r0, r2, #5
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4621      	mov	r1, r4
 8002b4e:	1a51      	subs	r1, r2, r1
 8002b50:	61b9      	str	r1, [r7, #24]
 8002b52:	4629      	mov	r1, r5
 8002b54:	eb63 0301 	sbc.w	r3, r3, r1
 8002b58:	61fb      	str	r3, [r7, #28]
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	f04f 0300 	mov.w	r3, #0
 8002b62:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002b66:	4659      	mov	r1, fp
 8002b68:	018b      	lsls	r3, r1, #6
 8002b6a:	4651      	mov	r1, sl
 8002b6c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b70:	4651      	mov	r1, sl
 8002b72:	018a      	lsls	r2, r1, #6
 8002b74:	4651      	mov	r1, sl
 8002b76:	ebb2 0801 	subs.w	r8, r2, r1
 8002b7a:	4659      	mov	r1, fp
 8002b7c:	eb63 0901 	sbc.w	r9, r3, r1
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	f04f 0300 	mov.w	r3, #0
 8002b88:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b8c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b90:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b94:	4690      	mov	r8, r2
 8002b96:	4699      	mov	r9, r3
 8002b98:	4623      	mov	r3, r4
 8002b9a:	eb18 0303 	adds.w	r3, r8, r3
 8002b9e:	613b      	str	r3, [r7, #16]
 8002ba0:	462b      	mov	r3, r5
 8002ba2:	eb49 0303 	adc.w	r3, r9, r3
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	f04f 0200 	mov.w	r2, #0
 8002bac:	f04f 0300 	mov.w	r3, #0
 8002bb0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002bb4:	4629      	mov	r1, r5
 8002bb6:	024b      	lsls	r3, r1, #9
 8002bb8:	4621      	mov	r1, r4
 8002bba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bbe:	4621      	mov	r1, r4
 8002bc0:	024a      	lsls	r2, r1, #9
 8002bc2:	4610      	mov	r0, r2
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bca:	2200      	movs	r2, #0
 8002bcc:	65bb      	str	r3, [r7, #88]	; 0x58
 8002bce:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002bd0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002bd4:	f7fd fb16 	bl	8000204 <__aeabi_uldivmod>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4613      	mov	r3, r2
 8002bde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002be2:	e065      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x420>
 8002be4:	40023800 	.word	0x40023800
 8002be8:	00f42400 	.word	0x00f42400
 8002bec:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf0:	4b3d      	ldr	r3, [pc, #244]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	099b      	lsrs	r3, r3, #6
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c00:	653b      	str	r3, [r7, #80]	; 0x50
 8002c02:	2300      	movs	r3, #0
 8002c04:	657b      	str	r3, [r7, #84]	; 0x54
 8002c06:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002c0a:	4642      	mov	r2, r8
 8002c0c:	464b      	mov	r3, r9
 8002c0e:	f04f 0000 	mov.w	r0, #0
 8002c12:	f04f 0100 	mov.w	r1, #0
 8002c16:	0159      	lsls	r1, r3, #5
 8002c18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c1c:	0150      	lsls	r0, r2, #5
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4641      	mov	r1, r8
 8002c24:	1a51      	subs	r1, r2, r1
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	4649      	mov	r1, r9
 8002c2a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	f04f 0300 	mov.w	r3, #0
 8002c38:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002c3c:	4659      	mov	r1, fp
 8002c3e:	018b      	lsls	r3, r1, #6
 8002c40:	4651      	mov	r1, sl
 8002c42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c46:	4651      	mov	r1, sl
 8002c48:	018a      	lsls	r2, r1, #6
 8002c4a:	4651      	mov	r1, sl
 8002c4c:	1a54      	subs	r4, r2, r1
 8002c4e:	4659      	mov	r1, fp
 8002c50:	eb63 0501 	sbc.w	r5, r3, r1
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	00eb      	lsls	r3, r5, #3
 8002c5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c62:	00e2      	lsls	r2, r4, #3
 8002c64:	4614      	mov	r4, r2
 8002c66:	461d      	mov	r5, r3
 8002c68:	4643      	mov	r3, r8
 8002c6a:	18e3      	adds	r3, r4, r3
 8002c6c:	603b      	str	r3, [r7, #0]
 8002c6e:	464b      	mov	r3, r9
 8002c70:	eb45 0303 	adc.w	r3, r5, r3
 8002c74:	607b      	str	r3, [r7, #4]
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c82:	4629      	mov	r1, r5
 8002c84:	028b      	lsls	r3, r1, #10
 8002c86:	4621      	mov	r1, r4
 8002c88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c8c:	4621      	mov	r1, r4
 8002c8e:	028a      	lsls	r2, r1, #10
 8002c90:	4610      	mov	r0, r2
 8002c92:	4619      	mov	r1, r3
 8002c94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c98:	2200      	movs	r2, #0
 8002c9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c9c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002c9e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ca2:	f7fd faaf 	bl	8000204 <__aeabi_uldivmod>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	4613      	mov	r3, r2
 8002cac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002cb0:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	0f1b      	lsrs	r3, r3, #28
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002cbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002cce:	e003      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cd0:	4b06      	ldr	r3, [pc, #24]	; (8002cec <HAL_RCC_GetSysClockFreq+0x45c>)
 8002cd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002cd6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	37b8      	adds	r7, #184	; 0xb8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	00f42400 	.word	0x00f42400

08002cf0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e28d      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 8083 	beq.w	8002e16 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d10:	4b94      	ldr	r3, [pc, #592]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 030c 	and.w	r3, r3, #12
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d019      	beq.n	8002d50 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d1c:	4b91      	ldr	r3, [pc, #580]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d106      	bne.n	8002d36 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d28:	4b8e      	ldr	r3, [pc, #568]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d34:	d00c      	beq.n	8002d50 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d36:	4b8b      	ldr	r3, [pc, #556]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d3e:	2b0c      	cmp	r3, #12
 8002d40:	d112      	bne.n	8002d68 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d42:	4b88      	ldr	r3, [pc, #544]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d4e:	d10b      	bne.n	8002d68 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d50:	4b84      	ldr	r3, [pc, #528]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d05b      	beq.n	8002e14 <HAL_RCC_OscConfig+0x124>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d157      	bne.n	8002e14 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e25a      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d70:	d106      	bne.n	8002d80 <HAL_RCC_OscConfig+0x90>
 8002d72:	4b7c      	ldr	r3, [pc, #496]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a7b      	ldr	r2, [pc, #492]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	e01d      	b.n	8002dbc <HAL_RCC_OscConfig+0xcc>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d88:	d10c      	bne.n	8002da4 <HAL_RCC_OscConfig+0xb4>
 8002d8a:	4b76      	ldr	r3, [pc, #472]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a75      	ldr	r2, [pc, #468]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	4b73      	ldr	r3, [pc, #460]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a72      	ldr	r2, [pc, #456]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	e00b      	b.n	8002dbc <HAL_RCC_OscConfig+0xcc>
 8002da4:	4b6f      	ldr	r3, [pc, #444]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a6e      	ldr	r2, [pc, #440]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dae:	6013      	str	r3, [r2, #0]
 8002db0:	4b6c      	ldr	r3, [pc, #432]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a6b      	ldr	r2, [pc, #428]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d013      	beq.n	8002dec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc4:	f7fe fb36 	bl	8001434 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dcc:	f7fe fb32 	bl	8001434 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b64      	cmp	r3, #100	; 0x64
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e21f      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dde:	4b61      	ldr	r3, [pc, #388]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0f0      	beq.n	8002dcc <HAL_RCC_OscConfig+0xdc>
 8002dea:	e014      	b.n	8002e16 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dec:	f7fe fb22 	bl	8001434 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002df4:	f7fe fb1e 	bl	8001434 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b64      	cmp	r3, #100	; 0x64
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e20b      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e06:	4b57      	ldr	r3, [pc, #348]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f0      	bne.n	8002df4 <HAL_RCC_OscConfig+0x104>
 8002e12:	e000      	b.n	8002e16 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d06f      	beq.n	8002f02 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e22:	4b50      	ldr	r3, [pc, #320]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 030c 	and.w	r3, r3, #12
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d017      	beq.n	8002e5e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e2e:	4b4d      	ldr	r3, [pc, #308]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d105      	bne.n	8002e46 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e3a:	4b4a      	ldr	r3, [pc, #296]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00b      	beq.n	8002e5e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e46:	4b47      	ldr	r3, [pc, #284]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e4e:	2b0c      	cmp	r3, #12
 8002e50:	d11c      	bne.n	8002e8c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e52:	4b44      	ldr	r3, [pc, #272]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d116      	bne.n	8002e8c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e5e:	4b41      	ldr	r3, [pc, #260]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d005      	beq.n	8002e76 <HAL_RCC_OscConfig+0x186>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d001      	beq.n	8002e76 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e1d3      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e76:	4b3b      	ldr	r3, [pc, #236]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4937      	ldr	r1, [pc, #220]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e8a:	e03a      	b.n	8002f02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d020      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e94:	4b34      	ldr	r3, [pc, #208]	; (8002f68 <HAL_RCC_OscConfig+0x278>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9a:	f7fe facb 	bl	8001434 <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ea2:	f7fe fac7 	bl	8001434 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e1b4      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb4:	4b2b      	ldr	r3, [pc, #172]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0f0      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec0:	4b28      	ldr	r3, [pc, #160]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	4925      	ldr	r1, [pc, #148]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	600b      	str	r3, [r1, #0]
 8002ed4:	e015      	b.n	8002f02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ed6:	4b24      	ldr	r3, [pc, #144]	; (8002f68 <HAL_RCC_OscConfig+0x278>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002edc:	f7fe faaa 	bl	8001434 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ee4:	f7fe faa6 	bl	8001434 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e193      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ef6:	4b1b      	ldr	r3, [pc, #108]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f0      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d036      	beq.n	8002f7c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d016      	beq.n	8002f44 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f16:	4b15      	ldr	r3, [pc, #84]	; (8002f6c <HAL_RCC_OscConfig+0x27c>)
 8002f18:	2201      	movs	r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1c:	f7fe fa8a 	bl	8001434 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f24:	f7fe fa86 	bl	8001434 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e173      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f36:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0f0      	beq.n	8002f24 <HAL_RCC_OscConfig+0x234>
 8002f42:	e01b      	b.n	8002f7c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f44:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <HAL_RCC_OscConfig+0x27c>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4a:	f7fe fa73 	bl	8001434 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f50:	e00e      	b.n	8002f70 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f52:	f7fe fa6f 	bl	8001434 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d907      	bls.n	8002f70 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e15c      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
 8002f64:	40023800 	.word	0x40023800
 8002f68:	42470000 	.word	0x42470000
 8002f6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f70:	4b8a      	ldr	r3, [pc, #552]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8002f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1ea      	bne.n	8002f52 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 8097 	beq.w	80030b8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f8e:	4b83      	ldr	r3, [pc, #524]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10f      	bne.n	8002fba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60bb      	str	r3, [r7, #8]
 8002f9e:	4b7f      	ldr	r3, [pc, #508]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	4a7e      	ldr	r2, [pc, #504]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8002fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8002faa:	4b7c      	ldr	r3, [pc, #496]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	60bb      	str	r3, [r7, #8]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fba:	4b79      	ldr	r3, [pc, #484]	; (80031a0 <HAL_RCC_OscConfig+0x4b0>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d118      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fc6:	4b76      	ldr	r3, [pc, #472]	; (80031a0 <HAL_RCC_OscConfig+0x4b0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a75      	ldr	r2, [pc, #468]	; (80031a0 <HAL_RCC_OscConfig+0x4b0>)
 8002fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fd2:	f7fe fa2f 	bl	8001434 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fda:	f7fe fa2b 	bl	8001434 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e118      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fec:	4b6c      	ldr	r3, [pc, #432]	; (80031a0 <HAL_RCC_OscConfig+0x4b0>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0f0      	beq.n	8002fda <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d106      	bne.n	800300e <HAL_RCC_OscConfig+0x31e>
 8003000:	4b66      	ldr	r3, [pc, #408]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8003002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003004:	4a65      	ldr	r2, [pc, #404]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8003006:	f043 0301 	orr.w	r3, r3, #1
 800300a:	6713      	str	r3, [r2, #112]	; 0x70
 800300c:	e01c      	b.n	8003048 <HAL_RCC_OscConfig+0x358>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2b05      	cmp	r3, #5
 8003014:	d10c      	bne.n	8003030 <HAL_RCC_OscConfig+0x340>
 8003016:	4b61      	ldr	r3, [pc, #388]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301a:	4a60      	ldr	r2, [pc, #384]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 800301c:	f043 0304 	orr.w	r3, r3, #4
 8003020:	6713      	str	r3, [r2, #112]	; 0x70
 8003022:	4b5e      	ldr	r3, [pc, #376]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003026:	4a5d      	ldr	r2, [pc, #372]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8003028:	f043 0301 	orr.w	r3, r3, #1
 800302c:	6713      	str	r3, [r2, #112]	; 0x70
 800302e:	e00b      	b.n	8003048 <HAL_RCC_OscConfig+0x358>
 8003030:	4b5a      	ldr	r3, [pc, #360]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8003032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003034:	4a59      	ldr	r2, [pc, #356]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8003036:	f023 0301 	bic.w	r3, r3, #1
 800303a:	6713      	str	r3, [r2, #112]	; 0x70
 800303c:	4b57      	ldr	r3, [pc, #348]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 800303e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003040:	4a56      	ldr	r2, [pc, #344]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8003042:	f023 0304 	bic.w	r3, r3, #4
 8003046:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d015      	beq.n	800307c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003050:	f7fe f9f0 	bl	8001434 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003056:	e00a      	b.n	800306e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003058:	f7fe f9ec 	bl	8001434 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	f241 3288 	movw	r2, #5000	; 0x1388
 8003066:	4293      	cmp	r3, r2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e0d7      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800306e:	4b4b      	ldr	r3, [pc, #300]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8003070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0ee      	beq.n	8003058 <HAL_RCC_OscConfig+0x368>
 800307a:	e014      	b.n	80030a6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307c:	f7fe f9da 	bl	8001434 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003082:	e00a      	b.n	800309a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003084:	f7fe f9d6 	bl	8001434 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003092:	4293      	cmp	r3, r2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e0c1      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800309a:	4b40      	ldr	r3, [pc, #256]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 800309c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1ee      	bne.n	8003084 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030a6:	7dfb      	ldrb	r3, [r7, #23]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d105      	bne.n	80030b8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ac:	4b3b      	ldr	r3, [pc, #236]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	4a3a      	ldr	r2, [pc, #232]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 80030b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 80ad 	beq.w	800321c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030c2:	4b36      	ldr	r3, [pc, #216]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
 80030ca:	2b08      	cmp	r3, #8
 80030cc:	d060      	beq.n	8003190 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d145      	bne.n	8003162 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d6:	4b33      	ldr	r3, [pc, #204]	; (80031a4 <HAL_RCC_OscConfig+0x4b4>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030dc:	f7fe f9aa 	bl	8001434 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e4:	f7fe f9a6 	bl	8001434 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e093      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f6:	4b29      	ldr	r3, [pc, #164]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f0      	bne.n	80030e4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69da      	ldr	r2, [r3, #28]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	019b      	lsls	r3, r3, #6
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003118:	085b      	lsrs	r3, r3, #1
 800311a:	3b01      	subs	r3, #1
 800311c:	041b      	lsls	r3, r3, #16
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	061b      	lsls	r3, r3, #24
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312c:	071b      	lsls	r3, r3, #28
 800312e:	491b      	ldr	r1, [pc, #108]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8003130:	4313      	orrs	r3, r2
 8003132:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003134:	4b1b      	ldr	r3, [pc, #108]	; (80031a4 <HAL_RCC_OscConfig+0x4b4>)
 8003136:	2201      	movs	r2, #1
 8003138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313a:	f7fe f97b 	bl	8001434 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003142:	f7fe f977 	bl	8001434 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e064      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003154:	4b11      	ldr	r3, [pc, #68]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0f0      	beq.n	8003142 <HAL_RCC_OscConfig+0x452>
 8003160:	e05c      	b.n	800321c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003162:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <HAL_RCC_OscConfig+0x4b4>)
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003168:	f7fe f964 	bl	8001434 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003170:	f7fe f960 	bl	8001434 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e04d      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003182:	4b06      	ldr	r3, [pc, #24]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0x480>
 800318e:	e045      	b.n	800321c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d107      	bne.n	80031a8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e040      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
 800319c:	40023800 	.word	0x40023800
 80031a0:	40007000 	.word	0x40007000
 80031a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031a8:	4b1f      	ldr	r3, [pc, #124]	; (8003228 <HAL_RCC_OscConfig+0x538>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d030      	beq.n	8003218 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d129      	bne.n	8003218 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d122      	bne.n	8003218 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031d8:	4013      	ands	r3, r2
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d119      	bne.n	8003218 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ee:	085b      	lsrs	r3, r3, #1
 80031f0:	3b01      	subs	r3, #1
 80031f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d10f      	bne.n	8003218 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003202:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003204:	429a      	cmp	r2, r3
 8003206:	d107      	bne.n	8003218 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003214:	429a      	cmp	r2, r3
 8003216:	d001      	beq.n	800321c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e000      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40023800 	.word	0x40023800

0800322c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e041      	b.n	80032c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7fd ff14 	bl	8001080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2202      	movs	r2, #2
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3304      	adds	r3, #4
 8003268:	4619      	mov	r1, r3
 800326a:	4610      	mov	r0, r2
 800326c:	f000 fcde 	bl	8003c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d001      	beq.n	80032e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e04e      	b.n	8003382 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0201 	orr.w	r2, r2, #1
 80032fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a23      	ldr	r2, [pc, #140]	; (8003390 <HAL_TIM_Base_Start_IT+0xc4>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d022      	beq.n	800334c <HAL_TIM_Base_Start_IT+0x80>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800330e:	d01d      	beq.n	800334c <HAL_TIM_Base_Start_IT+0x80>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a1f      	ldr	r2, [pc, #124]	; (8003394 <HAL_TIM_Base_Start_IT+0xc8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d018      	beq.n	800334c <HAL_TIM_Base_Start_IT+0x80>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a1e      	ldr	r2, [pc, #120]	; (8003398 <HAL_TIM_Base_Start_IT+0xcc>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d013      	beq.n	800334c <HAL_TIM_Base_Start_IT+0x80>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a1c      	ldr	r2, [pc, #112]	; (800339c <HAL_TIM_Base_Start_IT+0xd0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00e      	beq.n	800334c <HAL_TIM_Base_Start_IT+0x80>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a1b      	ldr	r2, [pc, #108]	; (80033a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d009      	beq.n	800334c <HAL_TIM_Base_Start_IT+0x80>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a19      	ldr	r2, [pc, #100]	; (80033a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d004      	beq.n	800334c <HAL_TIM_Base_Start_IT+0x80>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a18      	ldr	r2, [pc, #96]	; (80033a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d111      	bne.n	8003370 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2b06      	cmp	r3, #6
 800335c:	d010      	beq.n	8003380 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f042 0201 	orr.w	r2, r2, #1
 800336c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800336e:	e007      	b.n	8003380 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 0201 	orr.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40010000 	.word	0x40010000
 8003394:	40000400 	.word	0x40000400
 8003398:	40000800 	.word	0x40000800
 800339c:	40000c00 	.word	0x40000c00
 80033a0:	40010400 	.word	0x40010400
 80033a4:	40014000 	.word	0x40014000
 80033a8:	40001800 	.word	0x40001800

080033ac <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e041      	b.n	8003442 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d106      	bne.n	80033d8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f839 	bl	800344a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2202      	movs	r2, #2
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3304      	adds	r3, #4
 80033e8:	4619      	mov	r1, r3
 80033ea:	4610      	mov	r0, r2
 80033ec:	f000 fc1e 	bl	8003c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b082      	sub	sp, #8
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e041      	b.n	80034f4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	d106      	bne.n	800348a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7fd fd8d 	bl	8000fa4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2202      	movs	r2, #2
 800348e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3304      	adds	r3, #4
 800349a:	4619      	mov	r1, r3
 800349c:	4610      	mov	r0, r2
 800349e:	f000 fbc5 	bl	8003c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e097      	b.n	8003640 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	d106      	bne.n	800352a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f7fd fd65 	bl	8000ff4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2202      	movs	r2, #2
 800352e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6812      	ldr	r2, [r2, #0]
 800353c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003540:	f023 0307 	bic.w	r3, r3, #7
 8003544:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	3304      	adds	r3, #4
 800354e:	4619      	mov	r1, r3
 8003550:	4610      	mov	r0, r2
 8003552:	f000 fb6b 	bl	8003c2c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	4313      	orrs	r3, r2
 8003576:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800357e:	f023 0303 	bic.w	r3, r3, #3
 8003582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	021b      	lsls	r3, r3, #8
 800358e:	4313      	orrs	r3, r2
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800359c:	f023 030c 	bic.w	r3, r3, #12
 80035a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	021b      	lsls	r3, r3, #8
 80035b8:	4313      	orrs	r3, r2
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	4313      	orrs	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	011a      	lsls	r2, r3, #4
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	031b      	lsls	r3, r3, #12
 80035cc:	4313      	orrs	r3, r2
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80035da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80035e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	4313      	orrs	r3, r2
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003658:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003660:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003668:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003670:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d110      	bne.n	800369a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003678:	7bfb      	ldrb	r3, [r7, #15]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d102      	bne.n	8003684 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800367e:	7b7b      	ldrb	r3, [r7, #13]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d001      	beq.n	8003688 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e089      	b.n	800379c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003698:	e031      	b.n	80036fe <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2b04      	cmp	r3, #4
 800369e:	d110      	bne.n	80036c2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80036a0:	7bbb      	ldrb	r3, [r7, #14]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d102      	bne.n	80036ac <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80036a6:	7b3b      	ldrb	r3, [r7, #12]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d001      	beq.n	80036b0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e075      	b.n	800379c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2202      	movs	r2, #2
 80036b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036c0:	e01d      	b.n	80036fe <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d108      	bne.n	80036da <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80036c8:	7bbb      	ldrb	r3, [r7, #14]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d105      	bne.n	80036da <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80036ce:	7b7b      	ldrb	r3, [r7, #13]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d102      	bne.n	80036da <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80036d4:	7b3b      	ldrb	r3, [r7, #12]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d001      	beq.n	80036de <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e05e      	b.n	800379c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2202      	movs	r2, #2
 80036e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2202      	movs	r2, #2
 80036ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2202      	movs	r2, #2
 80036f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2202      	movs	r2, #2
 80036fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <HAL_TIM_Encoder_Start_IT+0xc4>
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	2b04      	cmp	r3, #4
 8003708:	d010      	beq.n	800372c <HAL_TIM_Encoder_Start_IT+0xe4>
 800370a:	e01f      	b.n	800374c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2201      	movs	r2, #1
 8003712:	2100      	movs	r1, #0
 8003714:	4618      	mov	r0, r3
 8003716:	f000 fcd9 	bl	80040cc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68da      	ldr	r2, [r3, #12]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 0202 	orr.w	r2, r2, #2
 8003728:	60da      	str	r2, [r3, #12]
      break;
 800372a:	e02e      	b.n	800378a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2201      	movs	r2, #1
 8003732:	2104      	movs	r1, #4
 8003734:	4618      	mov	r0, r3
 8003736:	f000 fcc9 	bl	80040cc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68da      	ldr	r2, [r3, #12]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0204 	orr.w	r2, r2, #4
 8003748:	60da      	str	r2, [r3, #12]
      break;
 800374a:	e01e      	b.n	800378a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2201      	movs	r2, #1
 8003752:	2100      	movs	r1, #0
 8003754:	4618      	mov	r0, r3
 8003756:	f000 fcb9 	bl	80040cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2201      	movs	r2, #1
 8003760:	2104      	movs	r1, #4
 8003762:	4618      	mov	r0, r3
 8003764:	f000 fcb2 	bl	80040cc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0202 	orr.w	r2, r2, #2
 8003776:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0204 	orr.w	r2, r2, #4
 8003786:	60da      	str	r2, [r3, #12]
      break;
 8003788:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f042 0201 	orr.w	r2, r2, #1
 8003798:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d122      	bne.n	8003800 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d11b      	bne.n	8003800 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f06f 0202 	mvn.w	r2, #2
 80037d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7fc ff7e 	bl	80006e8 <HAL_TIM_IC_CaptureCallback>
 80037ec:	e005      	b.n	80037fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f9fe 	bl	8003bf0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 fa05 	bl	8003c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f003 0304 	and.w	r3, r3, #4
 800380a:	2b04      	cmp	r3, #4
 800380c:	d122      	bne.n	8003854 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b04      	cmp	r3, #4
 800381a:	d11b      	bne.n	8003854 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f06f 0204 	mvn.w	r2, #4
 8003824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2202      	movs	r2, #2
 800382a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7fc ff54 	bl	80006e8 <HAL_TIM_IC_CaptureCallback>
 8003840:	e005      	b.n	800384e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f9d4 	bl	8003bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f9db 	bl	8003c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b08      	cmp	r3, #8
 8003860:	d122      	bne.n	80038a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f003 0308 	and.w	r3, r3, #8
 800386c:	2b08      	cmp	r3, #8
 800386e:	d11b      	bne.n	80038a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f06f 0208 	mvn.w	r2, #8
 8003878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2204      	movs	r2, #4
 800387e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7fc ff2a 	bl	80006e8 <HAL_TIM_IC_CaptureCallback>
 8003894:	e005      	b.n	80038a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f9aa 	bl	8003bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f9b1 	bl	8003c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	f003 0310 	and.w	r3, r3, #16
 80038b2:	2b10      	cmp	r3, #16
 80038b4:	d122      	bne.n	80038fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f003 0310 	and.w	r3, r3, #16
 80038c0:	2b10      	cmp	r3, #16
 80038c2:	d11b      	bne.n	80038fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f06f 0210 	mvn.w	r2, #16
 80038cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2208      	movs	r2, #8
 80038d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7fc ff00 	bl	80006e8 <HAL_TIM_IC_CaptureCallback>
 80038e8:	e005      	b.n	80038f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f980 	bl	8003bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f987 	bl	8003c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b01      	cmp	r3, #1
 8003908:	d10e      	bne.n	8003928 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b01      	cmp	r3, #1
 8003916:	d107      	bne.n	8003928 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f06f 0201 	mvn.w	r2, #1
 8003920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7fc fdec 	bl	8000500 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003932:	2b80      	cmp	r3, #128	; 0x80
 8003934:	d10e      	bne.n	8003954 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003940:	2b80      	cmp	r3, #128	; 0x80
 8003942:	d107      	bne.n	8003954 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800394c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fcba 	bl	80042c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395e:	2b40      	cmp	r3, #64	; 0x40
 8003960:	d10e      	bne.n	8003980 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396c:	2b40      	cmp	r3, #64	; 0x40
 800396e:	d107      	bne.n	8003980 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f94c 	bl	8003c18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	f003 0320 	and.w	r3, r3, #32
 800398a:	2b20      	cmp	r3, #32
 800398c:	d10e      	bne.n	80039ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f003 0320 	and.w	r3, r3, #32
 8003998:	2b20      	cmp	r3, #32
 800399a:	d107      	bne.n	80039ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f06f 0220 	mvn.w	r2, #32
 80039a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 fc84 	bl	80042b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039ac:	bf00      	nop
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039c0:	2300      	movs	r3, #0
 80039c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d101      	bne.n	80039d2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80039ce:	2302      	movs	r3, #2
 80039d0:	e048      	b.n	8003a64 <HAL_TIM_OC_ConfigChannel+0xb0>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b0c      	cmp	r3, #12
 80039de:	d839      	bhi.n	8003a54 <HAL_TIM_OC_ConfigChannel+0xa0>
 80039e0:	a201      	add	r2, pc, #4	; (adr r2, 80039e8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80039e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e6:	bf00      	nop
 80039e8:	08003a1d 	.word	0x08003a1d
 80039ec:	08003a55 	.word	0x08003a55
 80039f0:	08003a55 	.word	0x08003a55
 80039f4:	08003a55 	.word	0x08003a55
 80039f8:	08003a2b 	.word	0x08003a2b
 80039fc:	08003a55 	.word	0x08003a55
 8003a00:	08003a55 	.word	0x08003a55
 8003a04:	08003a55 	.word	0x08003a55
 8003a08:	08003a39 	.word	0x08003a39
 8003a0c:	08003a55 	.word	0x08003a55
 8003a10:	08003a55 	.word	0x08003a55
 8003a14:	08003a55 	.word	0x08003a55
 8003a18:	08003a47 	.word	0x08003a47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68b9      	ldr	r1, [r7, #8]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 f9a2 	bl	8003d6c <TIM_OC1_SetConfig>
      break;
 8003a28:	e017      	b.n	8003a5a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68b9      	ldr	r1, [r7, #8]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 fa0b 	bl	8003e4c <TIM_OC2_SetConfig>
      break;
 8003a36:	e010      	b.n	8003a5a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68b9      	ldr	r1, [r7, #8]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fa7a 	bl	8003f38 <TIM_OC3_SetConfig>
      break;
 8003a44:	e009      	b.n	8003a5a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68b9      	ldr	r1, [r7, #8]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 fae7 	bl	8004020 <TIM_OC4_SetConfig>
      break;
 8003a52:	e002      	b.n	8003a5a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	75fb      	strb	r3, [r7, #23]
      break;
 8003a58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a86:	2302      	movs	r3, #2
 8003a88:	e0ae      	b.n	8003be8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b0c      	cmp	r3, #12
 8003a96:	f200 809f 	bhi.w	8003bd8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a9a:	a201      	add	r2, pc, #4	; (adr r2, 8003aa0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa0:	08003ad5 	.word	0x08003ad5
 8003aa4:	08003bd9 	.word	0x08003bd9
 8003aa8:	08003bd9 	.word	0x08003bd9
 8003aac:	08003bd9 	.word	0x08003bd9
 8003ab0:	08003b15 	.word	0x08003b15
 8003ab4:	08003bd9 	.word	0x08003bd9
 8003ab8:	08003bd9 	.word	0x08003bd9
 8003abc:	08003bd9 	.word	0x08003bd9
 8003ac0:	08003b57 	.word	0x08003b57
 8003ac4:	08003bd9 	.word	0x08003bd9
 8003ac8:	08003bd9 	.word	0x08003bd9
 8003acc:	08003bd9 	.word	0x08003bd9
 8003ad0:	08003b97 	.word	0x08003b97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68b9      	ldr	r1, [r7, #8]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 f946 	bl	8003d6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699a      	ldr	r2, [r3, #24]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0208 	orr.w	r2, r2, #8
 8003aee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699a      	ldr	r2, [r3, #24]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0204 	bic.w	r2, r2, #4
 8003afe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6999      	ldr	r1, [r3, #24]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	691a      	ldr	r2, [r3, #16]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	619a      	str	r2, [r3, #24]
      break;
 8003b12:	e064      	b.n	8003bde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 f996 	bl	8003e4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6999      	ldr	r1, [r3, #24]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	021a      	lsls	r2, r3, #8
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	619a      	str	r2, [r3, #24]
      break;
 8003b54:	e043      	b.n	8003bde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68b9      	ldr	r1, [r7, #8]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 f9eb 	bl	8003f38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69da      	ldr	r2, [r3, #28]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f042 0208 	orr.w	r2, r2, #8
 8003b70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	69da      	ldr	r2, [r3, #28]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0204 	bic.w	r2, r2, #4
 8003b80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	69d9      	ldr	r1, [r3, #28]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	61da      	str	r2, [r3, #28]
      break;
 8003b94:	e023      	b.n	8003bde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68b9      	ldr	r1, [r7, #8]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 fa3f 	bl	8004020 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69da      	ldr	r2, [r3, #28]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69da      	ldr	r2, [r3, #28]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69d9      	ldr	r1, [r3, #28]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	021a      	lsls	r2, r3, #8
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	61da      	str	r2, [r3, #28]
      break;
 8003bd6:	e002      	b.n	8003bde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	75fb      	strb	r3, [r7, #23]
      break;
 8003bdc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3718      	adds	r7, #24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a40      	ldr	r2, [pc, #256]	; (8003d40 <TIM_Base_SetConfig+0x114>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d013      	beq.n	8003c6c <TIM_Base_SetConfig+0x40>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c4a:	d00f      	beq.n	8003c6c <TIM_Base_SetConfig+0x40>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a3d      	ldr	r2, [pc, #244]	; (8003d44 <TIM_Base_SetConfig+0x118>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d00b      	beq.n	8003c6c <TIM_Base_SetConfig+0x40>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a3c      	ldr	r2, [pc, #240]	; (8003d48 <TIM_Base_SetConfig+0x11c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d007      	beq.n	8003c6c <TIM_Base_SetConfig+0x40>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a3b      	ldr	r2, [pc, #236]	; (8003d4c <TIM_Base_SetConfig+0x120>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d003      	beq.n	8003c6c <TIM_Base_SetConfig+0x40>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a3a      	ldr	r2, [pc, #232]	; (8003d50 <TIM_Base_SetConfig+0x124>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d108      	bne.n	8003c7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a2f      	ldr	r2, [pc, #188]	; (8003d40 <TIM_Base_SetConfig+0x114>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d02b      	beq.n	8003cde <TIM_Base_SetConfig+0xb2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c8c:	d027      	beq.n	8003cde <TIM_Base_SetConfig+0xb2>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a2c      	ldr	r2, [pc, #176]	; (8003d44 <TIM_Base_SetConfig+0x118>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d023      	beq.n	8003cde <TIM_Base_SetConfig+0xb2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a2b      	ldr	r2, [pc, #172]	; (8003d48 <TIM_Base_SetConfig+0x11c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d01f      	beq.n	8003cde <TIM_Base_SetConfig+0xb2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a2a      	ldr	r2, [pc, #168]	; (8003d4c <TIM_Base_SetConfig+0x120>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d01b      	beq.n	8003cde <TIM_Base_SetConfig+0xb2>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a29      	ldr	r2, [pc, #164]	; (8003d50 <TIM_Base_SetConfig+0x124>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d017      	beq.n	8003cde <TIM_Base_SetConfig+0xb2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a28      	ldr	r2, [pc, #160]	; (8003d54 <TIM_Base_SetConfig+0x128>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d013      	beq.n	8003cde <TIM_Base_SetConfig+0xb2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a27      	ldr	r2, [pc, #156]	; (8003d58 <TIM_Base_SetConfig+0x12c>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00f      	beq.n	8003cde <TIM_Base_SetConfig+0xb2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a26      	ldr	r2, [pc, #152]	; (8003d5c <TIM_Base_SetConfig+0x130>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d00b      	beq.n	8003cde <TIM_Base_SetConfig+0xb2>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a25      	ldr	r2, [pc, #148]	; (8003d60 <TIM_Base_SetConfig+0x134>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d007      	beq.n	8003cde <TIM_Base_SetConfig+0xb2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a24      	ldr	r2, [pc, #144]	; (8003d64 <TIM_Base_SetConfig+0x138>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d003      	beq.n	8003cde <TIM_Base_SetConfig+0xb2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a23      	ldr	r2, [pc, #140]	; (8003d68 <TIM_Base_SetConfig+0x13c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d108      	bne.n	8003cf0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a0a      	ldr	r2, [pc, #40]	; (8003d40 <TIM_Base_SetConfig+0x114>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d003      	beq.n	8003d24 <TIM_Base_SetConfig+0xf8>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a0c      	ldr	r2, [pc, #48]	; (8003d50 <TIM_Base_SetConfig+0x124>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d103      	bne.n	8003d2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	615a      	str	r2, [r3, #20]
}
 8003d32:	bf00      	nop
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	40010000 	.word	0x40010000
 8003d44:	40000400 	.word	0x40000400
 8003d48:	40000800 	.word	0x40000800
 8003d4c:	40000c00 	.word	0x40000c00
 8003d50:	40010400 	.word	0x40010400
 8003d54:	40014000 	.word	0x40014000
 8003d58:	40014400 	.word	0x40014400
 8003d5c:	40014800 	.word	0x40014800
 8003d60:	40001800 	.word	0x40001800
 8003d64:	40001c00 	.word	0x40001c00
 8003d68:	40002000 	.word	0x40002000

08003d6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	f023 0201 	bic.w	r2, r3, #1
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f023 0303 	bic.w	r3, r3, #3
 8003da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f023 0302 	bic.w	r3, r3, #2
 8003db4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a20      	ldr	r2, [pc, #128]	; (8003e44 <TIM_OC1_SetConfig+0xd8>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d003      	beq.n	8003dd0 <TIM_OC1_SetConfig+0x64>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a1f      	ldr	r2, [pc, #124]	; (8003e48 <TIM_OC1_SetConfig+0xdc>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d10c      	bne.n	8003dea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f023 0308 	bic.w	r3, r3, #8
 8003dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f023 0304 	bic.w	r3, r3, #4
 8003de8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a15      	ldr	r2, [pc, #84]	; (8003e44 <TIM_OC1_SetConfig+0xd8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d003      	beq.n	8003dfa <TIM_OC1_SetConfig+0x8e>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a14      	ldr	r2, [pc, #80]	; (8003e48 <TIM_OC1_SetConfig+0xdc>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d111      	bne.n	8003e1e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	621a      	str	r2, [r3, #32]
}
 8003e38:	bf00      	nop
 8003e3a:	371c      	adds	r7, #28
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	40010000 	.word	0x40010000
 8003e48:	40010400 	.word	0x40010400

08003e4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	f023 0210 	bic.w	r2, r3, #16
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	021b      	lsls	r3, r3, #8
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f023 0320 	bic.w	r3, r3, #32
 8003e96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a22      	ldr	r2, [pc, #136]	; (8003f30 <TIM_OC2_SetConfig+0xe4>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d003      	beq.n	8003eb4 <TIM_OC2_SetConfig+0x68>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a21      	ldr	r2, [pc, #132]	; (8003f34 <TIM_OC2_SetConfig+0xe8>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d10d      	bne.n	8003ed0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ece:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a17      	ldr	r2, [pc, #92]	; (8003f30 <TIM_OC2_SetConfig+0xe4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d003      	beq.n	8003ee0 <TIM_OC2_SetConfig+0x94>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a16      	ldr	r2, [pc, #88]	; (8003f34 <TIM_OC2_SetConfig+0xe8>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d113      	bne.n	8003f08 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ee6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003eee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	621a      	str	r2, [r3, #32]
}
 8003f22:	bf00      	nop
 8003f24:	371c      	adds	r7, #28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40010000 	.word	0x40010000
 8003f34:	40010400 	.word	0x40010400

08003f38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f023 0303 	bic.w	r3, r3, #3
 8003f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	021b      	lsls	r3, r3, #8
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a21      	ldr	r2, [pc, #132]	; (8004018 <TIM_OC3_SetConfig+0xe0>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d003      	beq.n	8003f9e <TIM_OC3_SetConfig+0x66>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a20      	ldr	r2, [pc, #128]	; (800401c <TIM_OC3_SetConfig+0xe4>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d10d      	bne.n	8003fba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	021b      	lsls	r3, r3, #8
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a16      	ldr	r2, [pc, #88]	; (8004018 <TIM_OC3_SetConfig+0xe0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d003      	beq.n	8003fca <TIM_OC3_SetConfig+0x92>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a15      	ldr	r2, [pc, #84]	; (800401c <TIM_OC3_SetConfig+0xe4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d113      	bne.n	8003ff2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	621a      	str	r2, [r3, #32]
}
 800400c:	bf00      	nop
 800400e:	371c      	adds	r7, #28
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	40010000 	.word	0x40010000
 800401c:	40010400 	.word	0x40010400

08004020 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800404e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	021b      	lsls	r3, r3, #8
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4313      	orrs	r3, r2
 8004062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800406a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	031b      	lsls	r3, r3, #12
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4313      	orrs	r3, r2
 8004076:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a12      	ldr	r2, [pc, #72]	; (80040c4 <TIM_OC4_SetConfig+0xa4>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d003      	beq.n	8004088 <TIM_OC4_SetConfig+0x68>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a11      	ldr	r2, [pc, #68]	; (80040c8 <TIM_OC4_SetConfig+0xa8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d109      	bne.n	800409c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800408e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	019b      	lsls	r3, r3, #6
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	4313      	orrs	r3, r2
 800409a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	621a      	str	r2, [r3, #32]
}
 80040b6:	bf00      	nop
 80040b8:	371c      	adds	r7, #28
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	40010000 	.word	0x40010000
 80040c8:	40010400 	.word	0x40010400

080040cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	f003 031f 	and.w	r3, r3, #31
 80040de:	2201      	movs	r2, #1
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a1a      	ldr	r2, [r3, #32]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	43db      	mvns	r3, r3
 80040ee:	401a      	ands	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a1a      	ldr	r2, [r3, #32]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f003 031f 	and.w	r3, r3, #31
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	fa01 f303 	lsl.w	r3, r1, r3
 8004104:	431a      	orrs	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	621a      	str	r2, [r3, #32]
}
 800410a:	bf00      	nop
 800410c:	371c      	adds	r7, #28
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
	...

08004118 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800412c:	2302      	movs	r3, #2
 800412e:	e05a      	b.n	80041e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004156:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	4313      	orrs	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a21      	ldr	r2, [pc, #132]	; (80041f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d022      	beq.n	80041ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800417c:	d01d      	beq.n	80041ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a1d      	ldr	r2, [pc, #116]	; (80041f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d018      	beq.n	80041ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a1b      	ldr	r2, [pc, #108]	; (80041fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d013      	beq.n	80041ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a1a      	ldr	r2, [pc, #104]	; (8004200 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d00e      	beq.n	80041ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a18      	ldr	r2, [pc, #96]	; (8004204 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d009      	beq.n	80041ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a17      	ldr	r2, [pc, #92]	; (8004208 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d004      	beq.n	80041ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a15      	ldr	r2, [pc, #84]	; (800420c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d10c      	bne.n	80041d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	40010000 	.word	0x40010000
 80041f8:	40000400 	.word	0x40000400
 80041fc:	40000800 	.word	0x40000800
 8004200:	40000c00 	.word	0x40000c00
 8004204:	40010400 	.word	0x40010400
 8004208:	40014000 	.word	0x40014000
 800420c:	40001800 	.word	0x40001800

08004210 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800421a:	2300      	movs	r3, #0
 800421c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004228:	2302      	movs	r3, #2
 800422a:	e03d      	b.n	80042a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	4313      	orrs	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	4313      	orrs	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4313      	orrs	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	4313      	orrs	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	4313      	orrs	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e03f      	b.n	800436e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d106      	bne.n	8004308 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7fc ff1e 	bl	8001144 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2224      	movs	r2, #36	; 0x24
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800431e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 fc71 	bl	8004c08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004334:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695a      	ldr	r2, [r3, #20]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004344:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004354:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b0ba      	sub	sp, #232	; 0xe8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800439e:	2300      	movs	r3, #0
 80043a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80043aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80043b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10f      	bne.n	80043de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d009      	beq.n	80043de <HAL_UART_IRQHandler+0x66>
 80043ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ce:	f003 0320 	and.w	r3, r3, #32
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 fb5b 	bl	8004a92 <UART_Receive_IT>
      return;
 80043dc:	e256      	b.n	800488c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80043de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 80de 	beq.w	80045a4 <HAL_UART_IRQHandler+0x22c>
 80043e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d106      	bne.n	8004402 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f000 80d1 	beq.w	80045a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00b      	beq.n	8004426 <HAL_UART_IRQHandler+0xae>
 800440e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004416:	2b00      	cmp	r3, #0
 8004418:	d005      	beq.n	8004426 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	f043 0201 	orr.w	r2, r3, #1
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800442a:	f003 0304 	and.w	r3, r3, #4
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00b      	beq.n	800444a <HAL_UART_IRQHandler+0xd2>
 8004432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d005      	beq.n	800444a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	f043 0202 	orr.w	r2, r3, #2
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800444a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00b      	beq.n	800446e <HAL_UART_IRQHandler+0xf6>
 8004456:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d005      	beq.n	800446e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	f043 0204 	orr.w	r2, r3, #4
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800446e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004472:	f003 0308 	and.w	r3, r3, #8
 8004476:	2b00      	cmp	r3, #0
 8004478:	d011      	beq.n	800449e <HAL_UART_IRQHandler+0x126>
 800447a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800447e:	f003 0320 	and.w	r3, r3, #32
 8004482:	2b00      	cmp	r3, #0
 8004484:	d105      	bne.n	8004492 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004486:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d005      	beq.n	800449e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f043 0208 	orr.w	r2, r3, #8
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 81ed 	beq.w	8004882 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ac:	f003 0320 	and.w	r3, r3, #32
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d008      	beq.n	80044c6 <HAL_UART_IRQHandler+0x14e>
 80044b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044b8:	f003 0320 	and.w	r3, r3, #32
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d002      	beq.n	80044c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 fae6 	bl	8004a92 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d0:	2b40      	cmp	r3, #64	; 0x40
 80044d2:	bf0c      	ite	eq
 80044d4:	2301      	moveq	r3, #1
 80044d6:	2300      	movne	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d103      	bne.n	80044f2 <HAL_UART_IRQHandler+0x17a>
 80044ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d04f      	beq.n	8004592 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f9ee 	bl	80048d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004502:	2b40      	cmp	r3, #64	; 0x40
 8004504:	d141      	bne.n	800458a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	3314      	adds	r3, #20
 800450c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004510:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004514:	e853 3f00 	ldrex	r3, [r3]
 8004518:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800451c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004524:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3314      	adds	r3, #20
 800452e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004532:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004536:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800453e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004542:	e841 2300 	strex	r3, r2, [r1]
 8004546:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800454a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1d9      	bne.n	8004506 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004556:	2b00      	cmp	r3, #0
 8004558:	d013      	beq.n	8004582 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455e:	4a7d      	ldr	r2, [pc, #500]	; (8004754 <HAL_UART_IRQHandler+0x3dc>)
 8004560:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004566:	4618      	mov	r0, r3
 8004568:	f7fd fd7d 	bl	8002066 <HAL_DMA_Abort_IT>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d016      	beq.n	80045a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800457c:	4610      	mov	r0, r2
 800457e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004580:	e00e      	b.n	80045a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f990 	bl	80048a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004588:	e00a      	b.n	80045a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f98c 	bl	80048a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004590:	e006      	b.n	80045a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f988 	bl	80048a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800459e:	e170      	b.n	8004882 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a0:	bf00      	nop
    return;
 80045a2:	e16e      	b.n	8004882 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	f040 814a 	bne.w	8004842 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80045ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b2:	f003 0310 	and.w	r3, r3, #16
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 8143 	beq.w	8004842 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80045bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045c0:	f003 0310 	and.w	r3, r3, #16
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 813c 	beq.w	8004842 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045ca:	2300      	movs	r3, #0
 80045cc:	60bb      	str	r3, [r7, #8]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	60bb      	str	r3, [r7, #8]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	60bb      	str	r3, [r7, #8]
 80045de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ea:	2b40      	cmp	r3, #64	; 0x40
 80045ec:	f040 80b4 	bne.w	8004758 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 8140 	beq.w	8004886 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800460a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800460e:	429a      	cmp	r2, r3
 8004610:	f080 8139 	bcs.w	8004886 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800461a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004626:	f000 8088 	beq.w	800473a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	330c      	adds	r3, #12
 8004630:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004634:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004638:	e853 3f00 	ldrex	r3, [r3]
 800463c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004640:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004644:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004648:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	330c      	adds	r3, #12
 8004652:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004656:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800465a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004662:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004666:	e841 2300 	strex	r3, r2, [r1]
 800466a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800466e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1d9      	bne.n	800462a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3314      	adds	r3, #20
 800467c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004680:	e853 3f00 	ldrex	r3, [r3]
 8004684:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004686:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004688:	f023 0301 	bic.w	r3, r3, #1
 800468c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	3314      	adds	r3, #20
 8004696:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800469a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800469e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80046a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80046a6:	e841 2300 	strex	r3, r2, [r1]
 80046aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80046ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1e1      	bne.n	8004676 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	3314      	adds	r3, #20
 80046b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046bc:	e853 3f00 	ldrex	r3, [r3]
 80046c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80046c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3314      	adds	r3, #20
 80046d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80046d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80046d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80046dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046de:	e841 2300 	strex	r3, r2, [r1]
 80046e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80046e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1e3      	bne.n	80046b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	330c      	adds	r3, #12
 80046fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800470a:	f023 0310 	bic.w	r3, r3, #16
 800470e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	330c      	adds	r3, #12
 8004718:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800471c:	65ba      	str	r2, [r7, #88]	; 0x58
 800471e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004720:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004722:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004724:	e841 2300 	strex	r3, r2, [r1]
 8004728:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800472a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1e3      	bne.n	80046f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004734:	4618      	mov	r0, r3
 8004736:	f7fd fc26 	bl	8001f86 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004742:	b29b      	uxth	r3, r3
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	b29b      	uxth	r3, r3
 8004748:	4619      	mov	r1, r3
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f8b6 	bl	80048bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004750:	e099      	b.n	8004886 <HAL_UART_IRQHandler+0x50e>
 8004752:	bf00      	nop
 8004754:	0800499b 	.word	0x0800499b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004760:	b29b      	uxth	r3, r3
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800476c:	b29b      	uxth	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 808b 	beq.w	800488a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004774:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 8086 	beq.w	800488a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	330c      	adds	r3, #12
 8004784:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004788:	e853 3f00 	ldrex	r3, [r3]
 800478c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800478e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004790:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004794:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	330c      	adds	r3, #12
 800479e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80047a2:	647a      	str	r2, [r7, #68]	; 0x44
 80047a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047aa:	e841 2300 	strex	r3, r2, [r1]
 80047ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1e3      	bne.n	800477e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	3314      	adds	r3, #20
 80047bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	e853 3f00 	ldrex	r3, [r3]
 80047c4:	623b      	str	r3, [r7, #32]
   return(result);
 80047c6:	6a3b      	ldr	r3, [r7, #32]
 80047c8:	f023 0301 	bic.w	r3, r3, #1
 80047cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	3314      	adds	r3, #20
 80047d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80047da:	633a      	str	r2, [r7, #48]	; 0x30
 80047dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047e2:	e841 2300 	strex	r3, r2, [r1]
 80047e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1e3      	bne.n	80047b6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2220      	movs	r2, #32
 80047f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	330c      	adds	r3, #12
 8004802:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	e853 3f00 	ldrex	r3, [r3]
 800480a:	60fb      	str	r3, [r7, #12]
   return(result);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f023 0310 	bic.w	r3, r3, #16
 8004812:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	330c      	adds	r3, #12
 800481c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004820:	61fa      	str	r2, [r7, #28]
 8004822:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004824:	69b9      	ldr	r1, [r7, #24]
 8004826:	69fa      	ldr	r2, [r7, #28]
 8004828:	e841 2300 	strex	r3, r2, [r1]
 800482c:	617b      	str	r3, [r7, #20]
   return(result);
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1e3      	bne.n	80047fc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004834:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004838:	4619      	mov	r1, r3
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f83e 	bl	80048bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004840:	e023      	b.n	800488a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484a:	2b00      	cmp	r3, #0
 800484c:	d009      	beq.n	8004862 <HAL_UART_IRQHandler+0x4ea>
 800484e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f8b1 	bl	80049c2 <UART_Transmit_IT>
    return;
 8004860:	e014      	b.n	800488c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00e      	beq.n	800488c <HAL_UART_IRQHandler+0x514>
 800486e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004876:	2b00      	cmp	r3, #0
 8004878:	d008      	beq.n	800488c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f8f1 	bl	8004a62 <UART_EndTransmit_IT>
    return;
 8004880:	e004      	b.n	800488c <HAL_UART_IRQHandler+0x514>
    return;
 8004882:	bf00      	nop
 8004884:	e002      	b.n	800488c <HAL_UART_IRQHandler+0x514>
      return;
 8004886:	bf00      	nop
 8004888:	e000      	b.n	800488c <HAL_UART_IRQHandler+0x514>
      return;
 800488a:	bf00      	nop
  }
}
 800488c:	37e8      	adds	r7, #232	; 0xe8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop

08004894 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	460b      	mov	r3, r1
 80048c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b095      	sub	sp, #84	; 0x54
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	330c      	adds	r3, #12
 80048e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e6:	e853 3f00 	ldrex	r3, [r3]
 80048ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	330c      	adds	r3, #12
 80048fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048fc:	643a      	str	r2, [r7, #64]	; 0x40
 80048fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004900:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004902:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004904:	e841 2300 	strex	r3, r2, [r1]
 8004908:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800490a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1e5      	bne.n	80048dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	3314      	adds	r3, #20
 8004916:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	e853 3f00 	ldrex	r3, [r3]
 800491e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	f023 0301 	bic.w	r3, r3, #1
 8004926:	64bb      	str	r3, [r7, #72]	; 0x48
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3314      	adds	r3, #20
 800492e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004930:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004932:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004934:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004938:	e841 2300 	strex	r3, r2, [r1]
 800493c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1e5      	bne.n	8004910 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004948:	2b01      	cmp	r3, #1
 800494a:	d119      	bne.n	8004980 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	330c      	adds	r3, #12
 8004952:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	e853 3f00 	ldrex	r3, [r3]
 800495a:	60bb      	str	r3, [r7, #8]
   return(result);
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f023 0310 	bic.w	r3, r3, #16
 8004962:	647b      	str	r3, [r7, #68]	; 0x44
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	330c      	adds	r3, #12
 800496a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800496c:	61ba      	str	r2, [r7, #24]
 800496e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004970:	6979      	ldr	r1, [r7, #20]
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	e841 2300 	strex	r3, r2, [r1]
 8004978:	613b      	str	r3, [r7, #16]
   return(result);
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1e5      	bne.n	800494c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800498e:	bf00      	nop
 8004990:	3754      	adds	r7, #84	; 0x54
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b084      	sub	sp, #16
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f7ff ff77 	bl	80048a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049ba:	bf00      	nop
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b085      	sub	sp, #20
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b21      	cmp	r3, #33	; 0x21
 80049d4:	d13e      	bne.n	8004a54 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049de:	d114      	bne.n	8004a0a <UART_Transmit_IT+0x48>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d110      	bne.n	8004a0a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	881b      	ldrh	r3, [r3, #0]
 80049f2:	461a      	mov	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	1c9a      	adds	r2, r3, #2
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	621a      	str	r2, [r3, #32]
 8004a08:	e008      	b.n	8004a1c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	1c59      	adds	r1, r3, #1
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6211      	str	r1, [r2, #32]
 8004a14:	781a      	ldrb	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	3b01      	subs	r3, #1
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	4619      	mov	r1, r3
 8004a2a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10f      	bne.n	8004a50 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a3e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a4e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a50:	2300      	movs	r3, #0
 8004a52:	e000      	b.n	8004a56 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a54:	2302      	movs	r3, #2
  }
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b082      	sub	sp, #8
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68da      	ldr	r2, [r3, #12]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a78:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fb fe20 	bl	80006c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b08c      	sub	sp, #48	; 0x30
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b22      	cmp	r3, #34	; 0x22
 8004aa4:	f040 80ab 	bne.w	8004bfe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab0:	d117      	bne.n	8004ae2 <UART_Receive_IT+0x50>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d113      	bne.n	8004ae2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004aba:	2300      	movs	r3, #0
 8004abc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ada:	1c9a      	adds	r2, r3, #2
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	629a      	str	r2, [r3, #40]	; 0x28
 8004ae0:	e026      	b.n	8004b30 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af4:	d007      	beq.n	8004b06 <UART_Receive_IT+0x74>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10a      	bne.n	8004b14 <UART_Receive_IT+0x82>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d106      	bne.n	8004b14 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b10:	701a      	strb	r2, [r3, #0]
 8004b12:	e008      	b.n	8004b26 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b24:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2a:	1c5a      	adds	r2, r3, #1
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	3b01      	subs	r3, #1
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d15a      	bne.n	8004bfa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0220 	bic.w	r2, r2, #32
 8004b52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695a      	ldr	r2, [r3, #20]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0201 	bic.w	r2, r2, #1
 8004b72:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d135      	bne.n	8004bf0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	330c      	adds	r3, #12
 8004b90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	e853 3f00 	ldrex	r3, [r3]
 8004b98:	613b      	str	r3, [r7, #16]
   return(result);
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f023 0310 	bic.w	r3, r3, #16
 8004ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	330c      	adds	r3, #12
 8004ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004baa:	623a      	str	r2, [r7, #32]
 8004bac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bae:	69f9      	ldr	r1, [r7, #28]
 8004bb0:	6a3a      	ldr	r2, [r7, #32]
 8004bb2:	e841 2300 	strex	r3, r2, [r1]
 8004bb6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1e5      	bne.n	8004b8a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0310 	and.w	r3, r3, #16
 8004bc8:	2b10      	cmp	r3, #16
 8004bca:	d10a      	bne.n	8004be2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bcc:	2300      	movs	r3, #0
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004be6:	4619      	mov	r1, r3
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7ff fe67 	bl	80048bc <HAL_UARTEx_RxEventCallback>
 8004bee:	e002      	b.n	8004bf6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7ff fe4f 	bl	8004894 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	e002      	b.n	8004c00 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	e000      	b.n	8004c00 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004bfe:	2302      	movs	r3, #2
  }
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3730      	adds	r7, #48	; 0x30
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c0c:	b0c0      	sub	sp, #256	; 0x100
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c24:	68d9      	ldr	r1, [r3, #12]
 8004c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	ea40 0301 	orr.w	r3, r0, r1
 8004c30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c36:	689a      	ldr	r2, [r3, #8]
 8004c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	431a      	orrs	r2, r3
 8004c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c60:	f021 010c 	bic.w	r1, r1, #12
 8004c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c6e:	430b      	orrs	r3, r1
 8004c70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c82:	6999      	ldr	r1, [r3, #24]
 8004c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	ea40 0301 	orr.w	r3, r0, r1
 8004c8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	4b8f      	ldr	r3, [pc, #572]	; (8004ed4 <UART_SetConfig+0x2cc>)
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d005      	beq.n	8004ca8 <UART_SetConfig+0xa0>
 8004c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	4b8d      	ldr	r3, [pc, #564]	; (8004ed8 <UART_SetConfig+0x2d0>)
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d104      	bne.n	8004cb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ca8:	f7fd fdde 	bl	8002868 <HAL_RCC_GetPCLK2Freq>
 8004cac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004cb0:	e003      	b.n	8004cba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cb2:	f7fd fdc5 	bl	8002840 <HAL_RCC_GetPCLK1Freq>
 8004cb6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cc4:	f040 810c 	bne.w	8004ee0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004cd2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004cd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004cda:	4622      	mov	r2, r4
 8004cdc:	462b      	mov	r3, r5
 8004cde:	1891      	adds	r1, r2, r2
 8004ce0:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ce2:	415b      	adcs	r3, r3
 8004ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ce6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004cea:	4621      	mov	r1, r4
 8004cec:	eb12 0801 	adds.w	r8, r2, r1
 8004cf0:	4629      	mov	r1, r5
 8004cf2:	eb43 0901 	adc.w	r9, r3, r1
 8004cf6:	f04f 0200 	mov.w	r2, #0
 8004cfa:	f04f 0300 	mov.w	r3, #0
 8004cfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d0a:	4690      	mov	r8, r2
 8004d0c:	4699      	mov	r9, r3
 8004d0e:	4623      	mov	r3, r4
 8004d10:	eb18 0303 	adds.w	r3, r8, r3
 8004d14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d18:	462b      	mov	r3, r5
 8004d1a:	eb49 0303 	adc.w	r3, r9, r3
 8004d1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d2e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d36:	460b      	mov	r3, r1
 8004d38:	18db      	adds	r3, r3, r3
 8004d3a:	653b      	str	r3, [r7, #80]	; 0x50
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	eb42 0303 	adc.w	r3, r2, r3
 8004d42:	657b      	str	r3, [r7, #84]	; 0x54
 8004d44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d4c:	f7fb fa5a 	bl	8000204 <__aeabi_uldivmod>
 8004d50:	4602      	mov	r2, r0
 8004d52:	460b      	mov	r3, r1
 8004d54:	4b61      	ldr	r3, [pc, #388]	; (8004edc <UART_SetConfig+0x2d4>)
 8004d56:	fba3 2302 	umull	r2, r3, r3, r2
 8004d5a:	095b      	lsrs	r3, r3, #5
 8004d5c:	011c      	lsls	r4, r3, #4
 8004d5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d62:	2200      	movs	r2, #0
 8004d64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d68:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d70:	4642      	mov	r2, r8
 8004d72:	464b      	mov	r3, r9
 8004d74:	1891      	adds	r1, r2, r2
 8004d76:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d78:	415b      	adcs	r3, r3
 8004d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d80:	4641      	mov	r1, r8
 8004d82:	eb12 0a01 	adds.w	sl, r2, r1
 8004d86:	4649      	mov	r1, r9
 8004d88:	eb43 0b01 	adc.w	fp, r3, r1
 8004d8c:	f04f 0200 	mov.w	r2, #0
 8004d90:	f04f 0300 	mov.w	r3, #0
 8004d94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004da0:	4692      	mov	sl, r2
 8004da2:	469b      	mov	fp, r3
 8004da4:	4643      	mov	r3, r8
 8004da6:	eb1a 0303 	adds.w	r3, sl, r3
 8004daa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004dae:	464b      	mov	r3, r9
 8004db0:	eb4b 0303 	adc.w	r3, fp, r3
 8004db4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004dc4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004dc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	18db      	adds	r3, r3, r3
 8004dd0:	643b      	str	r3, [r7, #64]	; 0x40
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	eb42 0303 	adc.w	r3, r2, r3
 8004dd8:	647b      	str	r3, [r7, #68]	; 0x44
 8004dda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004dde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004de2:	f7fb fa0f 	bl	8000204 <__aeabi_uldivmod>
 8004de6:	4602      	mov	r2, r0
 8004de8:	460b      	mov	r3, r1
 8004dea:	4611      	mov	r1, r2
 8004dec:	4b3b      	ldr	r3, [pc, #236]	; (8004edc <UART_SetConfig+0x2d4>)
 8004dee:	fba3 2301 	umull	r2, r3, r3, r1
 8004df2:	095b      	lsrs	r3, r3, #5
 8004df4:	2264      	movs	r2, #100	; 0x64
 8004df6:	fb02 f303 	mul.w	r3, r2, r3
 8004dfa:	1acb      	subs	r3, r1, r3
 8004dfc:	00db      	lsls	r3, r3, #3
 8004dfe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e02:	4b36      	ldr	r3, [pc, #216]	; (8004edc <UART_SetConfig+0x2d4>)
 8004e04:	fba3 2302 	umull	r2, r3, r3, r2
 8004e08:	095b      	lsrs	r3, r3, #5
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e10:	441c      	add	r4, r3
 8004e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e16:	2200      	movs	r2, #0
 8004e18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e1c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004e20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004e24:	4642      	mov	r2, r8
 8004e26:	464b      	mov	r3, r9
 8004e28:	1891      	adds	r1, r2, r2
 8004e2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e2c:	415b      	adcs	r3, r3
 8004e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e34:	4641      	mov	r1, r8
 8004e36:	1851      	adds	r1, r2, r1
 8004e38:	6339      	str	r1, [r7, #48]	; 0x30
 8004e3a:	4649      	mov	r1, r9
 8004e3c:	414b      	adcs	r3, r1
 8004e3e:	637b      	str	r3, [r7, #52]	; 0x34
 8004e40:	f04f 0200 	mov.w	r2, #0
 8004e44:	f04f 0300 	mov.w	r3, #0
 8004e48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e4c:	4659      	mov	r1, fp
 8004e4e:	00cb      	lsls	r3, r1, #3
 8004e50:	4651      	mov	r1, sl
 8004e52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e56:	4651      	mov	r1, sl
 8004e58:	00ca      	lsls	r2, r1, #3
 8004e5a:	4610      	mov	r0, r2
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4603      	mov	r3, r0
 8004e60:	4642      	mov	r2, r8
 8004e62:	189b      	adds	r3, r3, r2
 8004e64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e68:	464b      	mov	r3, r9
 8004e6a:	460a      	mov	r2, r1
 8004e6c:	eb42 0303 	adc.w	r3, r2, r3
 8004e70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e80:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e88:	460b      	mov	r3, r1
 8004e8a:	18db      	adds	r3, r3, r3
 8004e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e8e:	4613      	mov	r3, r2
 8004e90:	eb42 0303 	adc.w	r3, r2, r3
 8004e94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004e9e:	f7fb f9b1 	bl	8000204 <__aeabi_uldivmod>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	4b0d      	ldr	r3, [pc, #52]	; (8004edc <UART_SetConfig+0x2d4>)
 8004ea8:	fba3 1302 	umull	r1, r3, r3, r2
 8004eac:	095b      	lsrs	r3, r3, #5
 8004eae:	2164      	movs	r1, #100	; 0x64
 8004eb0:	fb01 f303 	mul.w	r3, r1, r3
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	3332      	adds	r3, #50	; 0x32
 8004eba:	4a08      	ldr	r2, [pc, #32]	; (8004edc <UART_SetConfig+0x2d4>)
 8004ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec0:	095b      	lsrs	r3, r3, #5
 8004ec2:	f003 0207 	and.w	r2, r3, #7
 8004ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4422      	add	r2, r4
 8004ece:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ed0:	e106      	b.n	80050e0 <UART_SetConfig+0x4d8>
 8004ed2:	bf00      	nop
 8004ed4:	40011000 	.word	0x40011000
 8004ed8:	40011400 	.word	0x40011400
 8004edc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ee0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004eea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004eee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004ef2:	4642      	mov	r2, r8
 8004ef4:	464b      	mov	r3, r9
 8004ef6:	1891      	adds	r1, r2, r2
 8004ef8:	6239      	str	r1, [r7, #32]
 8004efa:	415b      	adcs	r3, r3
 8004efc:	627b      	str	r3, [r7, #36]	; 0x24
 8004efe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f02:	4641      	mov	r1, r8
 8004f04:	1854      	adds	r4, r2, r1
 8004f06:	4649      	mov	r1, r9
 8004f08:	eb43 0501 	adc.w	r5, r3, r1
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	f04f 0300 	mov.w	r3, #0
 8004f14:	00eb      	lsls	r3, r5, #3
 8004f16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f1a:	00e2      	lsls	r2, r4, #3
 8004f1c:	4614      	mov	r4, r2
 8004f1e:	461d      	mov	r5, r3
 8004f20:	4643      	mov	r3, r8
 8004f22:	18e3      	adds	r3, r4, r3
 8004f24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f28:	464b      	mov	r3, r9
 8004f2a:	eb45 0303 	adc.w	r3, r5, r3
 8004f2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f42:	f04f 0200 	mov.w	r2, #0
 8004f46:	f04f 0300 	mov.w	r3, #0
 8004f4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f4e:	4629      	mov	r1, r5
 8004f50:	008b      	lsls	r3, r1, #2
 8004f52:	4621      	mov	r1, r4
 8004f54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f58:	4621      	mov	r1, r4
 8004f5a:	008a      	lsls	r2, r1, #2
 8004f5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f60:	f7fb f950 	bl	8000204 <__aeabi_uldivmod>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4b60      	ldr	r3, [pc, #384]	; (80050ec <UART_SetConfig+0x4e4>)
 8004f6a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f6e:	095b      	lsrs	r3, r3, #5
 8004f70:	011c      	lsls	r4, r3, #4
 8004f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f76:	2200      	movs	r2, #0
 8004f78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f84:	4642      	mov	r2, r8
 8004f86:	464b      	mov	r3, r9
 8004f88:	1891      	adds	r1, r2, r2
 8004f8a:	61b9      	str	r1, [r7, #24]
 8004f8c:	415b      	adcs	r3, r3
 8004f8e:	61fb      	str	r3, [r7, #28]
 8004f90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f94:	4641      	mov	r1, r8
 8004f96:	1851      	adds	r1, r2, r1
 8004f98:	6139      	str	r1, [r7, #16]
 8004f9a:	4649      	mov	r1, r9
 8004f9c:	414b      	adcs	r3, r1
 8004f9e:	617b      	str	r3, [r7, #20]
 8004fa0:	f04f 0200 	mov.w	r2, #0
 8004fa4:	f04f 0300 	mov.w	r3, #0
 8004fa8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fac:	4659      	mov	r1, fp
 8004fae:	00cb      	lsls	r3, r1, #3
 8004fb0:	4651      	mov	r1, sl
 8004fb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fb6:	4651      	mov	r1, sl
 8004fb8:	00ca      	lsls	r2, r1, #3
 8004fba:	4610      	mov	r0, r2
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	4642      	mov	r2, r8
 8004fc2:	189b      	adds	r3, r3, r2
 8004fc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fc8:	464b      	mov	r3, r9
 8004fca:	460a      	mov	r2, r1
 8004fcc:	eb42 0303 	adc.w	r3, r2, r3
 8004fd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fde:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004fe0:	f04f 0200 	mov.w	r2, #0
 8004fe4:	f04f 0300 	mov.w	r3, #0
 8004fe8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004fec:	4649      	mov	r1, r9
 8004fee:	008b      	lsls	r3, r1, #2
 8004ff0:	4641      	mov	r1, r8
 8004ff2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ff6:	4641      	mov	r1, r8
 8004ff8:	008a      	lsls	r2, r1, #2
 8004ffa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ffe:	f7fb f901 	bl	8000204 <__aeabi_uldivmod>
 8005002:	4602      	mov	r2, r0
 8005004:	460b      	mov	r3, r1
 8005006:	4611      	mov	r1, r2
 8005008:	4b38      	ldr	r3, [pc, #224]	; (80050ec <UART_SetConfig+0x4e4>)
 800500a:	fba3 2301 	umull	r2, r3, r3, r1
 800500e:	095b      	lsrs	r3, r3, #5
 8005010:	2264      	movs	r2, #100	; 0x64
 8005012:	fb02 f303 	mul.w	r3, r2, r3
 8005016:	1acb      	subs	r3, r1, r3
 8005018:	011b      	lsls	r3, r3, #4
 800501a:	3332      	adds	r3, #50	; 0x32
 800501c:	4a33      	ldr	r2, [pc, #204]	; (80050ec <UART_SetConfig+0x4e4>)
 800501e:	fba2 2303 	umull	r2, r3, r2, r3
 8005022:	095b      	lsrs	r3, r3, #5
 8005024:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005028:	441c      	add	r4, r3
 800502a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800502e:	2200      	movs	r2, #0
 8005030:	673b      	str	r3, [r7, #112]	; 0x70
 8005032:	677a      	str	r2, [r7, #116]	; 0x74
 8005034:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005038:	4642      	mov	r2, r8
 800503a:	464b      	mov	r3, r9
 800503c:	1891      	adds	r1, r2, r2
 800503e:	60b9      	str	r1, [r7, #8]
 8005040:	415b      	adcs	r3, r3
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005048:	4641      	mov	r1, r8
 800504a:	1851      	adds	r1, r2, r1
 800504c:	6039      	str	r1, [r7, #0]
 800504e:	4649      	mov	r1, r9
 8005050:	414b      	adcs	r3, r1
 8005052:	607b      	str	r3, [r7, #4]
 8005054:	f04f 0200 	mov.w	r2, #0
 8005058:	f04f 0300 	mov.w	r3, #0
 800505c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005060:	4659      	mov	r1, fp
 8005062:	00cb      	lsls	r3, r1, #3
 8005064:	4651      	mov	r1, sl
 8005066:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800506a:	4651      	mov	r1, sl
 800506c:	00ca      	lsls	r2, r1, #3
 800506e:	4610      	mov	r0, r2
 8005070:	4619      	mov	r1, r3
 8005072:	4603      	mov	r3, r0
 8005074:	4642      	mov	r2, r8
 8005076:	189b      	adds	r3, r3, r2
 8005078:	66bb      	str	r3, [r7, #104]	; 0x68
 800507a:	464b      	mov	r3, r9
 800507c:	460a      	mov	r2, r1
 800507e:	eb42 0303 	adc.w	r3, r2, r3
 8005082:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	663b      	str	r3, [r7, #96]	; 0x60
 800508e:	667a      	str	r2, [r7, #100]	; 0x64
 8005090:	f04f 0200 	mov.w	r2, #0
 8005094:	f04f 0300 	mov.w	r3, #0
 8005098:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800509c:	4649      	mov	r1, r9
 800509e:	008b      	lsls	r3, r1, #2
 80050a0:	4641      	mov	r1, r8
 80050a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050a6:	4641      	mov	r1, r8
 80050a8:	008a      	lsls	r2, r1, #2
 80050aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80050ae:	f7fb f8a9 	bl	8000204 <__aeabi_uldivmod>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	4b0d      	ldr	r3, [pc, #52]	; (80050ec <UART_SetConfig+0x4e4>)
 80050b8:	fba3 1302 	umull	r1, r3, r3, r2
 80050bc:	095b      	lsrs	r3, r3, #5
 80050be:	2164      	movs	r1, #100	; 0x64
 80050c0:	fb01 f303 	mul.w	r3, r1, r3
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	011b      	lsls	r3, r3, #4
 80050c8:	3332      	adds	r3, #50	; 0x32
 80050ca:	4a08      	ldr	r2, [pc, #32]	; (80050ec <UART_SetConfig+0x4e4>)
 80050cc:	fba2 2303 	umull	r2, r3, r2, r3
 80050d0:	095b      	lsrs	r3, r3, #5
 80050d2:	f003 020f 	and.w	r2, r3, #15
 80050d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4422      	add	r2, r4
 80050de:	609a      	str	r2, [r3, #8]
}
 80050e0:	bf00      	nop
 80050e2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80050e6:	46bd      	mov	sp, r7
 80050e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050ec:	51eb851f 	.word	0x51eb851f

080050f0 <memset>:
 80050f0:	4402      	add	r2, r0
 80050f2:	4603      	mov	r3, r0
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d100      	bne.n	80050fa <memset+0xa>
 80050f8:	4770      	bx	lr
 80050fa:	f803 1b01 	strb.w	r1, [r3], #1
 80050fe:	e7f9      	b.n	80050f4 <memset+0x4>

08005100 <__libc_init_array>:
 8005100:	b570      	push	{r4, r5, r6, lr}
 8005102:	4d0d      	ldr	r5, [pc, #52]	; (8005138 <__libc_init_array+0x38>)
 8005104:	4c0d      	ldr	r4, [pc, #52]	; (800513c <__libc_init_array+0x3c>)
 8005106:	1b64      	subs	r4, r4, r5
 8005108:	10a4      	asrs	r4, r4, #2
 800510a:	2600      	movs	r6, #0
 800510c:	42a6      	cmp	r6, r4
 800510e:	d109      	bne.n	8005124 <__libc_init_array+0x24>
 8005110:	4d0b      	ldr	r5, [pc, #44]	; (8005140 <__libc_init_array+0x40>)
 8005112:	4c0c      	ldr	r4, [pc, #48]	; (8005144 <__libc_init_array+0x44>)
 8005114:	f000 f818 	bl	8005148 <_init>
 8005118:	1b64      	subs	r4, r4, r5
 800511a:	10a4      	asrs	r4, r4, #2
 800511c:	2600      	movs	r6, #0
 800511e:	42a6      	cmp	r6, r4
 8005120:	d105      	bne.n	800512e <__libc_init_array+0x2e>
 8005122:	bd70      	pop	{r4, r5, r6, pc}
 8005124:	f855 3b04 	ldr.w	r3, [r5], #4
 8005128:	4798      	blx	r3
 800512a:	3601      	adds	r6, #1
 800512c:	e7ee      	b.n	800510c <__libc_init_array+0xc>
 800512e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005132:	4798      	blx	r3
 8005134:	3601      	adds	r6, #1
 8005136:	e7f2      	b.n	800511e <__libc_init_array+0x1e>
 8005138:	08005180 	.word	0x08005180
 800513c:	08005180 	.word	0x08005180
 8005140:	08005180 	.word	0x08005180
 8005144:	08005184 	.word	0x08005184

08005148 <_init>:
 8005148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514a:	bf00      	nop
 800514c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800514e:	bc08      	pop	{r3}
 8005150:	469e      	mov	lr, r3
 8005152:	4770      	bx	lr

08005154 <_fini>:
 8005154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005156:	bf00      	nop
 8005158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800515a:	bc08      	pop	{r3}
 800515c:	469e      	mov	lr, r3
 800515e:	4770      	bx	lr
